
nfc_seal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f888  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000b4ed0  0800fa58  0800fa58  0001fa58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080c4928  080c4928  000e00e0  2**0
                  CONTENTS
  4 .ARM          00000008  080c4928  080c4928  000d4928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080c4930  080c4930  000e00e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080c4930  080c4930  000d4930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080c4934  080c4934  000d4934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080c4938  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002408  200000e0  080c4a18  000e00e0  2**3
                  ALLOC
 10 ._user_heap_stack 0004b400  200024e8  080c4a18  000e24e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000e00e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002afb0  00000000  00000000  000e0110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000570c  00000000  00000000  0010b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  001107d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  001124e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b56d  00000000  00000000  00113fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f461  00000000  00000000  0013f545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f213f  00000000  00000000  0015e9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00250ae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000851c  00000000  00000000  00250b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fa40 	.word	0x0800fa40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	0800fa40 	.word	0x0800fa40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 bc70 	b.w	80014c0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 fb08 	bl	80011fc <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__muldc3>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	ed2d 8b08 	vpush	{d8-d11}
 8000c00:	eeb0 8a42 	vmov.f32	s16, s4
 8000c04:	eef0 8a62 	vmov.f32	s17, s5
 8000c08:	eeb0 aa40 	vmov.f32	s20, s0
 8000c0c:	eef0 aa60 	vmov.f32	s21, s1
 8000c10:	b08d      	sub	sp, #52	; 0x34
 8000c12:	ec53 2b12 	vmov	r2, r3, d2
 8000c16:	eeb0 ba42 	vmov.f32	s22, s4
 8000c1a:	eef0 ba62 	vmov.f32	s23, s5
 8000c1e:	ec51 0b10 	vmov	r0, r1, d0
 8000c22:	ec5b ab11 	vmov	sl, fp, d1
 8000c26:	ec57 6b13 	vmov	r6, r7, d3
 8000c2a:	f7ff fcfd 	bl	8000628 <__aeabi_dmul>
 8000c2e:	4632      	mov	r2, r6
 8000c30:	4680      	mov	r8, r0
 8000c32:	4689      	mov	r9, r1
 8000c34:	463b      	mov	r3, r7
 8000c36:	4650      	mov	r0, sl
 8000c38:	4659      	mov	r1, fp
 8000c3a:	e9cd 8900 	strd	r8, r9, [sp]
 8000c3e:	f7ff fcf3 	bl	8000628 <__aeabi_dmul>
 8000c42:	4680      	mov	r8, r0
 8000c44:	4689      	mov	r9, r1
 8000c46:	4644      	mov	r4, r8
 8000c48:	464d      	mov	r5, r9
 8000c4a:	4632      	mov	r2, r6
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	ec51 0b1a 	vmov	r0, r1, d10
 8000c52:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	4652      	mov	r2, sl
 8000c5c:	4680      	mov	r8, r0
 8000c5e:	4689      	mov	r9, r1
 8000c60:	465b      	mov	r3, fp
 8000c62:	ec51 0b18 	vmov	r0, r1, d8
 8000c66:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000c6a:	f7ff fcdd 	bl	8000628 <__aeabi_dmul>
 8000c6e:	4680      	mov	r8, r0
 8000c70:	4689      	mov	r9, r1
 8000c72:	4622      	mov	r2, r4
 8000c74:	462b      	mov	r3, r5
 8000c76:	4644      	mov	r4, r8
 8000c78:	464d      	mov	r5, r9
 8000c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000c7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8000c82:	f7ff fb19 	bl	80002b8 <__aeabi_dsub>
 8000c86:	4642      	mov	r2, r8
 8000c88:	464b      	mov	r3, r9
 8000c8a:	4680      	mov	r8, r0
 8000c8c:	4689      	mov	r9, r1
 8000c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000c92:	f7ff fb13 	bl	80002bc <__adddf3>
 8000c96:	4642      	mov	r2, r8
 8000c98:	4604      	mov	r4, r0
 8000c9a:	460d      	mov	r5, r1
 8000c9c:	464b      	mov	r3, r9
 8000c9e:	4640      	mov	r0, r8
 8000ca0:	4649      	mov	r1, r9
 8000ca2:	ec45 4b18 	vmov	d8, r4, r5
 8000ca6:	f7ff ff59 	bl	8000b5c <__aeabi_dcmpun>
 8000caa:	b950      	cbnz	r0, 8000cc2 <__muldc3+0xca>
 8000cac:	eeb0 1a48 	vmov.f32	s2, s16
 8000cb0:	eef0 1a68 	vmov.f32	s3, s17
 8000cb4:	ec49 8b10 	vmov	d0, r8, r9
 8000cb8:	b00d      	add	sp, #52	; 0x34
 8000cba:	ecbd 8b08 	vpop	{d8-d11}
 8000cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc2:	ec53 2b18 	vmov	r2, r3, d8
 8000cc6:	ec51 0b18 	vmov	r0, r1, d8
 8000cca:	f7ff ff47 	bl	8000b5c <__aeabi_dcmpun>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d0ec      	beq.n	8000cac <__muldc3+0xb4>
 8000cd2:	ee1a 3a90 	vmov	r3, s21
 8000cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cda:	4619      	mov	r1, r3
 8000cdc:	ee1a 0a10 	vmov	r0, s20
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce6:	4bab      	ldr	r3, [pc, #684]	; (8000f94 <__muldc3+0x39c>)
 8000ce8:	f7ff ff38 	bl	8000b5c <__aeabi_dcmpun>
 8000cec:	f04f 0301 	mov.w	r3, #1
 8000cf0:	ee1a 4a10 	vmov	r4, s20
 8000cf4:	f88d 3020 	strb.w	r3, [sp, #32]
 8000cf8:	b950      	cbnz	r0, 8000d10 <__muldc3+0x118>
 8000cfa:	4ba6      	ldr	r3, [pc, #664]	; (8000f94 <__muldc3+0x39c>)
 8000cfc:	ee1a 0a10 	vmov	r0, s20
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d04:	4629      	mov	r1, r5
 8000d06:	f7ff ff0b 	bl	8000b20 <__aeabi_dcmple>
 8000d0a:	b908      	cbnz	r0, 8000d10 <__muldc3+0x118>
 8000d0c:	f88d 0020 	strb.w	r0, [sp, #32]
 8000d10:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000d14:	f083 0c01 	eor.w	ip, r3, #1
 8000d18:	ec45 4b19 	vmov	d9, r4, r5
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4b9d      	ldr	r3, [pc, #628]	; (8000f94 <__muldc3+0x39c>)
 8000d20:	fa5f f48c 	uxtb.w	r4, ip
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d28:	4629      	mov	r1, r5
 8000d2a:	9408      	str	r4, [sp, #32]
 8000d2c:	f7ff ff16 	bl	8000b5c <__aeabi_dcmpun>
 8000d30:	b948      	cbnz	r0, 8000d46 <__muldc3+0x14e>
 8000d32:	ec51 0b19 	vmov	r0, r1, d9
 8000d36:	4b97      	ldr	r3, [pc, #604]	; (8000f94 <__muldc3+0x39c>)
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3c:	f7ff fef0 	bl	8000b20 <__aeabi_dcmple>
 8000d40:	2800      	cmp	r0, #0
 8000d42:	f000 812b 	beq.w	8000f9c <__muldc3+0x3a4>
 8000d46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8000d4a:	461d      	mov	r5, r3
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4650      	mov	r0, sl
 8000d50:	4b90      	ldr	r3, [pc, #576]	; (8000f94 <__muldc3+0x39c>)
 8000d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d56:	f7ff ff01 	bl	8000b5c <__aeabi_dcmpun>
 8000d5a:	b948      	cbnz	r0, 8000d70 <__muldc3+0x178>
 8000d5c:	4b8d      	ldr	r3, [pc, #564]	; (8000f94 <__muldc3+0x39c>)
 8000d5e:	4650      	mov	r0, sl
 8000d60:	4629      	mov	r1, r5
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d66:	f7ff fedb 	bl	8000b20 <__aeabi_dcmple>
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	f000 8116 	beq.w	8000f9c <__muldc3+0x3a4>
 8000d70:	2300      	movs	r3, #0
 8000d72:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d74:	ec52 1b1b 	vmov	r1, r2, d11
 8000d78:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	ee1b 0a10 	vmov	r0, s22
 8000d82:	461d      	mov	r5, r3
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d88:	4b82      	ldr	r3, [pc, #520]	; (8000f94 <__muldc3+0x39c>)
 8000d8a:	f7ff fee7 	bl	8000b5c <__aeabi_dcmpun>
 8000d8e:	f04f 0301 	mov.w	r3, #1
 8000d92:	ee1b 4a10 	vmov	r4, s22
 8000d96:	f88d 3020 	strb.w	r3, [sp, #32]
 8000d9a:	b950      	cbnz	r0, 8000db2 <__muldc3+0x1ba>
 8000d9c:	4b7d      	ldr	r3, [pc, #500]	; (8000f94 <__muldc3+0x39c>)
 8000d9e:	ee1b 0a10 	vmov	r0, s22
 8000da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da6:	4629      	mov	r1, r5
 8000da8:	f7ff feba 	bl	8000b20 <__aeabi_dcmple>
 8000dac:	b908      	cbnz	r0, 8000db2 <__muldc3+0x1ba>
 8000dae:	f88d 0020 	strb.w	r0, [sp, #32]
 8000db2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000db6:	f083 0c01 	eor.w	ip, r3, #1
 8000dba:	ec45 4b19 	vmov	d9, r4, r5
 8000dbe:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <__muldc3+0x39c>)
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	fa5f f48c 	uxtb.w	r4, ip
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	9408      	str	r4, [sp, #32]
 8000dce:	f7ff fec5 	bl	8000b5c <__aeabi_dcmpun>
 8000dd2:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8000dd6:	4634      	mov	r4, r6
 8000dd8:	461d      	mov	r5, r3
 8000dda:	b948      	cbnz	r0, 8000df0 <__muldc3+0x1f8>
 8000ddc:	ec51 0b19 	vmov	r0, r1, d9
 8000de0:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <__muldc3+0x39c>)
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de6:	f7ff fe9b 	bl	8000b20 <__aeabi_dcmple>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	f000 8121 	beq.w	8001032 <__muldc3+0x43a>
 8000df0:	4b68      	ldr	r3, [pc, #416]	; (8000f94 <__muldc3+0x39c>)
 8000df2:	4620      	mov	r0, r4
 8000df4:	4629      	mov	r1, r5
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dfa:	f7ff feaf 	bl	8000b5c <__aeabi_dcmpun>
 8000dfe:	b948      	cbnz	r0, 8000e14 <__muldc3+0x21c>
 8000e00:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <__muldc3+0x39c>)
 8000e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e06:	4620      	mov	r0, r4
 8000e08:	4629      	mov	r1, r5
 8000e0a:	f7ff fe89 	bl	8000b20 <__aeabi_dcmple>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	f000 810f 	beq.w	8001032 <__muldc3+0x43a>
 8000e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f040 8082 	bne.w	8000f20 <__muldc3+0x328>
 8000e1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8000e20:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000e24:	460c      	mov	r4, r1
 8000e26:	461d      	mov	r5, r3
 8000e28:	4608      	mov	r0, r1
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4b58      	ldr	r3, [pc, #352]	; (8000f94 <__muldc3+0x39c>)
 8000e32:	f7ff fe93 	bl	8000b5c <__aeabi_dcmpun>
 8000e36:	b940      	cbnz	r0, 8000e4a <__muldc3+0x252>
 8000e38:	4b56      	ldr	r3, [pc, #344]	; (8000f94 <__muldc3+0x39c>)
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e42:	f7ff fe6d 	bl	8000b20 <__aeabi_dcmple>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d045      	beq.n	8000ed6 <__muldc3+0x2de>
 8000e4a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8000e4e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000e52:	460c      	mov	r4, r1
 8000e54:	461d      	mov	r5, r3
 8000e56:	4608      	mov	r0, r1
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <__muldc3+0x39c>)
 8000e60:	f7ff fe7c 	bl	8000b5c <__aeabi_dcmpun>
 8000e64:	b938      	cbnz	r0, 8000e76 <__muldc3+0x27e>
 8000e66:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <__muldc3+0x39c>)
 8000e68:	4620      	mov	r0, r4
 8000e6a:	4629      	mov	r1, r5
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e70:	f7ff fe56 	bl	8000b20 <__aeabi_dcmple>
 8000e74:	b378      	cbz	r0, 8000ed6 <__muldc3+0x2de>
 8000e76:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8000e7a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000e7e:	460c      	mov	r4, r1
 8000e80:	461d      	mov	r5, r3
 8000e82:	4608      	mov	r0, r1
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <__muldc3+0x39c>)
 8000e8c:	f7ff fe66 	bl	8000b5c <__aeabi_dcmpun>
 8000e90:	b938      	cbnz	r0, 8000ea2 <__muldc3+0x2aa>
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <__muldc3+0x39c>)
 8000e94:	4620      	mov	r0, r4
 8000e96:	4629      	mov	r1, r5
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9c:	f7ff fe40 	bl	8000b20 <__aeabi_dcmple>
 8000ea0:	b1c8      	cbz	r0, 8000ed6 <__muldc3+0x2de>
 8000ea2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8000ea6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8000eaa:	460c      	mov	r4, r1
 8000eac:	461d      	mov	r5, r3
 8000eae:	4608      	mov	r0, r1
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <__muldc3+0x39c>)
 8000eb8:	f7ff fe50 	bl	8000b5c <__aeabi_dcmpun>
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	f47f aef5 	bne.w	8000cac <__muldc3+0xb4>
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <__muldc3+0x39c>)
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ecc:	f7ff fe28 	bl	8000b20 <__aeabi_dcmple>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	f47f aeeb 	bne.w	8000cac <__muldc3+0xb4>
 8000ed6:	ec53 2b1a 	vmov	r2, r3, d10
 8000eda:	ec51 0b1a 	vmov	r0, r1, d10
 8000ede:	f7ff fe3d 	bl	8000b5c <__aeabi_dcmpun>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f040 8144 	bne.w	8001170 <__muldc3+0x578>
 8000ee8:	4652      	mov	r2, sl
 8000eea:	465b      	mov	r3, fp
 8000eec:	4650      	mov	r0, sl
 8000eee:	4659      	mov	r1, fp
 8000ef0:	f7ff fe34 	bl	8000b5c <__aeabi_dcmpun>
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	f040 812e 	bne.w	8001156 <__muldc3+0x55e>
 8000efa:	ec51 0b1b 	vmov	r0, r1, d11
 8000efe:	ee1b 2a10 	vmov	r2, s22
 8000f02:	460b      	mov	r3, r1
 8000f04:	f7ff fe2a 	bl	8000b5c <__aeabi_dcmpun>
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	f040 8116 	bne.w	800113a <__muldc3+0x542>
 8000f0e:	4632      	mov	r2, r6
 8000f10:	463b      	mov	r3, r7
 8000f12:	4630      	mov	r0, r6
 8000f14:	4639      	mov	r1, r7
 8000f16:	f7ff fe21 	bl	8000b5c <__aeabi_dcmpun>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	f040 8101 	bne.w	8001122 <__muldc3+0x52a>
 8000f20:	ec55 4b1b 	vmov	r4, r5, d11
 8000f24:	ee1b 2a10 	vmov	r2, s22
 8000f28:	462b      	mov	r3, r5
 8000f2a:	ec51 0b1a 	vmov	r0, r1, d10
 8000f2e:	f7ff fb7b 	bl	8000628 <__aeabi_dmul>
 8000f32:	4632      	mov	r2, r6
 8000f34:	4680      	mov	r8, r0
 8000f36:	4689      	mov	r9, r1
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4650      	mov	r0, sl
 8000f3c:	4659      	mov	r1, fp
 8000f3e:	f7ff fb73 	bl	8000628 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4640      	mov	r0, r8
 8000f48:	4649      	mov	r1, r9
 8000f4a:	f7ff f9b5 	bl	80002b8 <__aeabi_dsub>
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <__muldc3+0x3a0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f7ff fb69 	bl	8000628 <__aeabi_dmul>
 8000f56:	4632      	mov	r2, r6
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4680      	mov	r8, r0
 8000f5c:	4689      	mov	r9, r1
 8000f5e:	ec51 0b1a 	vmov	r0, r1, d10
 8000f62:	f7ff fb61 	bl	8000628 <__aeabi_dmul>
 8000f66:	462b      	mov	r3, r5
 8000f68:	ee1b 2a10 	vmov	r2, s22
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	460d      	mov	r5, r1
 8000f70:	4650      	mov	r0, sl
 8000f72:	4659      	mov	r1, fp
 8000f74:	f7ff fb58 	bl	8000628 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	4629      	mov	r1, r5
 8000f80:	f7ff f99c 	bl	80002bc <__adddf3>
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__muldc3+0x3a0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f7ff fb4e 	bl	8000628 <__aeabi_dmul>
 8000f8c:	ec41 0b18 	vmov	d8, r0, r1
 8000f90:	e68c      	b.n	8000cac <__muldc3+0xb4>
 8000f92:	bf00      	nop
 8000f94:	7fefffff 	.word	0x7fefffff
 8000f98:	7ff00000 	.word	0x7ff00000
 8000f9c:	9808      	ldr	r0, [sp, #32]
 8000f9e:	f7ff fad9 	bl	8000554 <__aeabi_i2d>
 8000fa2:	ee1a 3a90 	vmov	r3, s21
 8000fa6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8000faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	9008      	str	r0, [sp, #32]
 8000fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb4:	f02b 4100 	bic.w	r1, fp, #2147483648	; 0x80000000
 8000fb8:	4b74      	ldr	r3, [pc, #464]	; (800118c <__muldc3+0x594>)
 8000fba:	4650      	mov	r0, sl
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc0:	460d      	mov	r5, r1
 8000fc2:	f7ff fdcb 	bl	8000b5c <__aeabi_dcmpun>
 8000fc6:	f04f 0301 	mov.w	r3, #1
 8000fca:	ed9d ab08 	vldr	d10, [sp, #32]
 8000fce:	f88d 3020 	strb.w	r3, [sp, #32]
 8000fd2:	b948      	cbnz	r0, 8000fe8 <__muldc3+0x3f0>
 8000fd4:	4b6d      	ldr	r3, [pc, #436]	; (800118c <__muldc3+0x594>)
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	4629      	mov	r1, r5
 8000fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fde:	f7ff fd9f 	bl	8000b20 <__aeabi_dcmple>
 8000fe2:	b908      	cbnz	r0, 8000fe8 <__muldc3+0x3f0>
 8000fe4:	f88d 0020 	strb.w	r0, [sp, #32]
 8000fe8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8000fec:	f083 0001 	eor.w	r0, r3, #1
 8000ff0:	f000 0001 	and.w	r0, r0, #1
 8000ff4:	f7ff faae 	bl	8000554 <__aeabi_i2d>
 8000ff8:	f00b 4300 	and.w	r3, fp, #2147483648	; 0x80000000
 8000ffc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8001000:	4604      	mov	r4, r0
 8001002:	ec51 0b1b 	vmov	r0, r1, d11
 8001006:	4313      	orrs	r3, r2
 8001008:	461d      	mov	r5, r3
 800100a:	ee1b 2a10 	vmov	r2, s22
 800100e:	460b      	mov	r3, r1
 8001010:	46a2      	mov	sl, r4
 8001012:	46ab      	mov	fp, r5
 8001014:	f7ff fda2 	bl	8000b5c <__aeabi_dcmpun>
 8001018:	2800      	cmp	r0, #0
 800101a:	d166      	bne.n	80010ea <__muldc3+0x4f2>
 800101c:	4632      	mov	r2, r6
 800101e:	463b      	mov	r3, r7
 8001020:	4630      	mov	r0, r6
 8001022:	4639      	mov	r1, r7
 8001024:	f7ff fd9a 	bl	8000b5c <__aeabi_dcmpun>
 8001028:	2800      	cmp	r0, #0
 800102a:	d14f      	bne.n	80010cc <__muldc3+0x4d4>
 800102c:	2301      	movs	r3, #1
 800102e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001030:	e6a0      	b.n	8000d74 <__muldc3+0x17c>
 8001032:	9808      	ldr	r0, [sp, #32]
 8001034:	f7ff fa8e 	bl	8000554 <__aeabi_i2d>
 8001038:	ee1b 3a90 	vmov	r3, s23
 800103c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8001040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001044:	4680      	mov	r8, r0
 8001046:	ea42 0903 	orr.w	r9, r2, r3
 800104a:	4620      	mov	r0, r4
 800104c:	4b4f      	ldr	r3, [pc, #316]	; (800118c <__muldc3+0x594>)
 800104e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff fd82 	bl	8000b5c <__aeabi_dcmpun>
 8001058:	ec49 8b1b 	vmov	d11, r8, r9
 800105c:	f04f 0801 	mov.w	r8, #1
 8001060:	b940      	cbnz	r0, 8001074 <__muldc3+0x47c>
 8001062:	4b4a      	ldr	r3, [pc, #296]	; (800118c <__muldc3+0x594>)
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	f7ff fd58 	bl	8000b20 <__aeabi_dcmple>
 8001070:	b900      	cbnz	r0, 8001074 <__muldc3+0x47c>
 8001072:	4680      	mov	r8, r0
 8001074:	f088 0001 	eor.w	r0, r8, #1
 8001078:	f000 0001 	and.w	r0, r0, #1
 800107c:	f7ff fa6a 	bl	8000554 <__aeabi_i2d>
 8001080:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8001084:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8001088:	4680      	mov	r8, r0
 800108a:	ea42 0903 	orr.w	r9, r2, r3
 800108e:	ec51 0b1a 	vmov	r0, r1, d10
 8001092:	ec53 2b1a 	vmov	r2, r3, d10
 8001096:	4646      	mov	r6, r8
 8001098:	464f      	mov	r7, r9
 800109a:	f7ff fd5f 	bl	8000b5c <__aeabi_dcmpun>
 800109e:	bb90      	cbnz	r0, 8001106 <__muldc3+0x50e>
 80010a0:	4652      	mov	r2, sl
 80010a2:	465b      	mov	r3, fp
 80010a4:	4650      	mov	r0, sl
 80010a6:	4659      	mov	r1, fp
 80010a8:	f7ff fd58 	bl	8000b5c <__aeabi_dcmpun>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	f43f af37 	beq.w	8000f20 <__muldc3+0x328>
 80010b2:	f1bb 0f00 	cmp.w	fp, #0
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	bfbc      	itt	lt
 80010c0:	2200      	movlt	r2, #0
 80010c2:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80010c6:	4692      	mov	sl, r2
 80010c8:	469b      	mov	fp, r3
 80010ca:	e729      	b.n	8000f20 <__muldc3+0x328>
 80010cc:	2f00      	cmp	r7, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	bfb8      	it	lt
 80010d4:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	461f      	mov	r7, r3
 80010de:	bfb8      	it	lt
 80010e0:	2200      	movlt	r2, #0
 80010e2:	2301      	movs	r3, #1
 80010e4:	4616      	mov	r6, r2
 80010e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80010e8:	e644      	b.n	8000d74 <__muldc3+0x17c>
 80010ea:	ee1b 1a90 	vmov	r1, s23
 80010ee:	2900      	cmp	r1, #0
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	bfbc      	itt	lt
 80010fa:	2200      	movlt	r2, #0
 80010fc:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001100:	ec43 2b1b 	vmov	d11, r2, r3
 8001104:	e78a      	b.n	800101c <__muldc3+0x424>
 8001106:	ee1a 1a90 	vmov	r1, s21
 800110a:	2900      	cmp	r1, #0
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	bfbc      	itt	lt
 8001116:	2200      	movlt	r2, #0
 8001118:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800111c:	ec43 2b1a 	vmov	d10, r2, r3
 8001120:	e7be      	b.n	80010a0 <__muldc3+0x4a8>
 8001122:	2f00      	cmp	r7, #0
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	bfbc      	itt	lt
 800112e:	2200      	movlt	r2, #0
 8001130:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001134:	4616      	mov	r6, r2
 8001136:	461f      	mov	r7, r3
 8001138:	e6f2      	b.n	8000f20 <__muldc3+0x328>
 800113a:	ee1b 1a90 	vmov	r1, s23
 800113e:	2900      	cmp	r1, #0
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	bfbc      	itt	lt
 800114a:	2200      	movlt	r2, #0
 800114c:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001150:	ec43 2b1b 	vmov	d11, r2, r3
 8001154:	e6db      	b.n	8000f0e <__muldc3+0x316>
 8001156:	f1bb 0f00 	cmp.w	fp, #0
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	bfbc      	itt	lt
 8001164:	2200      	movlt	r2, #0
 8001166:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800116a:	4692      	mov	sl, r2
 800116c:	469b      	mov	fp, r3
 800116e:	e6c4      	b.n	8000efa <__muldc3+0x302>
 8001170:	ee1a 1a90 	vmov	r1, s21
 8001174:	2900      	cmp	r1, #0
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	bfbc      	itt	lt
 8001180:	2200      	movlt	r2, #0
 8001182:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001186:	ec43 2b1a 	vmov	d10, r2, r3
 800118a:	e6ad      	b.n	8000ee8 <__muldc3+0x2f0>
 800118c:	7fefffff 	.word	0x7fefffff

08001190 <__aeabi_d2lz>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	2200      	movs	r2, #0
 8001194:	2300      	movs	r3, #0
 8001196:	4604      	mov	r4, r0
 8001198:	460d      	mov	r5, r1
 800119a:	f7ff fcb7 	bl	8000b0c <__aeabi_dcmplt>
 800119e:	b928      	cbnz	r0, 80011ac <__aeabi_d2lz+0x1c>
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a8:	f000 b80a 	b.w	80011c0 <__aeabi_d2ulz>
 80011ac:	4620      	mov	r0, r4
 80011ae:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80011b2:	f000 f805 	bl	80011c0 <__aeabi_d2ulz>
 80011b6:	4240      	negs	r0, r0
 80011b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	bf00      	nop

080011c0 <__aeabi_d2ulz>:
 80011c0:	b5d0      	push	{r4, r6, r7, lr}
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__aeabi_d2ulz+0x34>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	4606      	mov	r6, r0
 80011c8:	460f      	mov	r7, r1
 80011ca:	f7ff fa2d 	bl	8000628 <__aeabi_dmul>
 80011ce:	f7ff fcdb 	bl	8000b88 <__aeabi_d2uiz>
 80011d2:	4604      	mov	r4, r0
 80011d4:	f7ff f9ae 	bl	8000534 <__aeabi_ui2d>
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <__aeabi_d2ulz+0x38>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f7ff fa24 	bl	8000628 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4630      	mov	r0, r6
 80011e6:	4639      	mov	r1, r7
 80011e8:	f7ff f866 	bl	80002b8 <__aeabi_dsub>
 80011ec:	f7ff fccc 	bl	8000b88 <__aeabi_d2uiz>
 80011f0:	4621      	mov	r1, r4
 80011f2:	bdd0      	pop	{r4, r6, r7, pc}
 80011f4:	3df00000 	.word	0x3df00000
 80011f8:	41f00000 	.word	0x41f00000

080011fc <__udivmoddi4>:
 80011fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001200:	9d08      	ldr	r5, [sp, #32]
 8001202:	4604      	mov	r4, r0
 8001204:	468c      	mov	ip, r1
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 8083 	bne.w	8001312 <__udivmoddi4+0x116>
 800120c:	428a      	cmp	r2, r1
 800120e:	4617      	mov	r7, r2
 8001210:	d947      	bls.n	80012a2 <__udivmoddi4+0xa6>
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	b142      	cbz	r2, 800122a <__udivmoddi4+0x2e>
 8001218:	f1c2 0020 	rsb	r0, r2, #32
 800121c:	fa24 f000 	lsr.w	r0, r4, r0
 8001220:	4091      	lsls	r1, r2
 8001222:	4097      	lsls	r7, r2
 8001224:	ea40 0c01 	orr.w	ip, r0, r1
 8001228:	4094      	lsls	r4, r2
 800122a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800122e:	0c23      	lsrs	r3, r4, #16
 8001230:	fbbc f6f8 	udiv	r6, ip, r8
 8001234:	fa1f fe87 	uxth.w	lr, r7
 8001238:	fb08 c116 	mls	r1, r8, r6, ip
 800123c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001240:	fb06 f10e 	mul.w	r1, r6, lr
 8001244:	4299      	cmp	r1, r3
 8001246:	d909      	bls.n	800125c <__udivmoddi4+0x60>
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800124e:	f080 8119 	bcs.w	8001484 <__udivmoddi4+0x288>
 8001252:	4299      	cmp	r1, r3
 8001254:	f240 8116 	bls.w	8001484 <__udivmoddi4+0x288>
 8001258:	3e02      	subs	r6, #2
 800125a:	443b      	add	r3, r7
 800125c:	1a5b      	subs	r3, r3, r1
 800125e:	b2a4      	uxth	r4, r4
 8001260:	fbb3 f0f8 	udiv	r0, r3, r8
 8001264:	fb08 3310 	mls	r3, r8, r0, r3
 8001268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800126c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001270:	45a6      	cmp	lr, r4
 8001272:	d909      	bls.n	8001288 <__udivmoddi4+0x8c>
 8001274:	193c      	adds	r4, r7, r4
 8001276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800127a:	f080 8105 	bcs.w	8001488 <__udivmoddi4+0x28c>
 800127e:	45a6      	cmp	lr, r4
 8001280:	f240 8102 	bls.w	8001488 <__udivmoddi4+0x28c>
 8001284:	3802      	subs	r0, #2
 8001286:	443c      	add	r4, r7
 8001288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800128c:	eba4 040e 	sub.w	r4, r4, lr
 8001290:	2600      	movs	r6, #0
 8001292:	b11d      	cbz	r5, 800129c <__udivmoddi4+0xa0>
 8001294:	40d4      	lsrs	r4, r2
 8001296:	2300      	movs	r3, #0
 8001298:	e9c5 4300 	strd	r4, r3, [r5]
 800129c:	4631      	mov	r1, r6
 800129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a2:	b902      	cbnz	r2, 80012a6 <__udivmoddi4+0xaa>
 80012a4:	deff      	udf	#255	; 0xff
 80012a6:	fab2 f282 	clz	r2, r2
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d150      	bne.n	8001350 <__udivmoddi4+0x154>
 80012ae:	1bcb      	subs	r3, r1, r7
 80012b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b4:	fa1f f887 	uxth.w	r8, r7
 80012b8:	2601      	movs	r6, #1
 80012ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80012be:	0c21      	lsrs	r1, r4, #16
 80012c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80012c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80012c8:	fb08 f30c 	mul.w	r3, r8, ip
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d907      	bls.n	80012e0 <__udivmoddi4+0xe4>
 80012d0:	1879      	adds	r1, r7, r1
 80012d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80012d6:	d202      	bcs.n	80012de <__udivmoddi4+0xe2>
 80012d8:	428b      	cmp	r3, r1
 80012da:	f200 80e9 	bhi.w	80014b0 <__udivmoddi4+0x2b4>
 80012de:	4684      	mov	ip, r0
 80012e0:	1ac9      	subs	r1, r1, r3
 80012e2:	b2a3      	uxth	r3, r4
 80012e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80012e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80012f0:	fb08 f800 	mul.w	r8, r8, r0
 80012f4:	45a0      	cmp	r8, r4
 80012f6:	d907      	bls.n	8001308 <__udivmoddi4+0x10c>
 80012f8:	193c      	adds	r4, r7, r4
 80012fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80012fe:	d202      	bcs.n	8001306 <__udivmoddi4+0x10a>
 8001300:	45a0      	cmp	r8, r4
 8001302:	f200 80d9 	bhi.w	80014b8 <__udivmoddi4+0x2bc>
 8001306:	4618      	mov	r0, r3
 8001308:	eba4 0408 	sub.w	r4, r4, r8
 800130c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001310:	e7bf      	b.n	8001292 <__udivmoddi4+0x96>
 8001312:	428b      	cmp	r3, r1
 8001314:	d909      	bls.n	800132a <__udivmoddi4+0x12e>
 8001316:	2d00      	cmp	r5, #0
 8001318:	f000 80b1 	beq.w	800147e <__udivmoddi4+0x282>
 800131c:	2600      	movs	r6, #0
 800131e:	e9c5 0100 	strd	r0, r1, [r5]
 8001322:	4630      	mov	r0, r6
 8001324:	4631      	mov	r1, r6
 8001326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132a:	fab3 f683 	clz	r6, r3
 800132e:	2e00      	cmp	r6, #0
 8001330:	d14a      	bne.n	80013c8 <__udivmoddi4+0x1cc>
 8001332:	428b      	cmp	r3, r1
 8001334:	d302      	bcc.n	800133c <__udivmoddi4+0x140>
 8001336:	4282      	cmp	r2, r0
 8001338:	f200 80b8 	bhi.w	80014ac <__udivmoddi4+0x2b0>
 800133c:	1a84      	subs	r4, r0, r2
 800133e:	eb61 0103 	sbc.w	r1, r1, r3
 8001342:	2001      	movs	r0, #1
 8001344:	468c      	mov	ip, r1
 8001346:	2d00      	cmp	r5, #0
 8001348:	d0a8      	beq.n	800129c <__udivmoddi4+0xa0>
 800134a:	e9c5 4c00 	strd	r4, ip, [r5]
 800134e:	e7a5      	b.n	800129c <__udivmoddi4+0xa0>
 8001350:	f1c2 0320 	rsb	r3, r2, #32
 8001354:	fa20 f603 	lsr.w	r6, r0, r3
 8001358:	4097      	lsls	r7, r2
 800135a:	fa01 f002 	lsl.w	r0, r1, r2
 800135e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001362:	40d9      	lsrs	r1, r3
 8001364:	4330      	orrs	r0, r6
 8001366:	0c03      	lsrs	r3, r0, #16
 8001368:	fbb1 f6fe 	udiv	r6, r1, lr
 800136c:	fa1f f887 	uxth.w	r8, r7
 8001370:	fb0e 1116 	mls	r1, lr, r6, r1
 8001374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001378:	fb06 f108 	mul.w	r1, r6, r8
 800137c:	4299      	cmp	r1, r3
 800137e:	fa04 f402 	lsl.w	r4, r4, r2
 8001382:	d909      	bls.n	8001398 <__udivmoddi4+0x19c>
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800138a:	f080 808d 	bcs.w	80014a8 <__udivmoddi4+0x2ac>
 800138e:	4299      	cmp	r1, r3
 8001390:	f240 808a 	bls.w	80014a8 <__udivmoddi4+0x2ac>
 8001394:	3e02      	subs	r6, #2
 8001396:	443b      	add	r3, r7
 8001398:	1a5b      	subs	r3, r3, r1
 800139a:	b281      	uxth	r1, r0
 800139c:	fbb3 f0fe 	udiv	r0, r3, lr
 80013a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80013a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80013a8:	fb00 f308 	mul.w	r3, r0, r8
 80013ac:	428b      	cmp	r3, r1
 80013ae:	d907      	bls.n	80013c0 <__udivmoddi4+0x1c4>
 80013b0:	1879      	adds	r1, r7, r1
 80013b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80013b6:	d273      	bcs.n	80014a0 <__udivmoddi4+0x2a4>
 80013b8:	428b      	cmp	r3, r1
 80013ba:	d971      	bls.n	80014a0 <__udivmoddi4+0x2a4>
 80013bc:	3802      	subs	r0, #2
 80013be:	4439      	add	r1, r7
 80013c0:	1acb      	subs	r3, r1, r3
 80013c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80013c6:	e778      	b.n	80012ba <__udivmoddi4+0xbe>
 80013c8:	f1c6 0c20 	rsb	ip, r6, #32
 80013cc:	fa03 f406 	lsl.w	r4, r3, r6
 80013d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80013d4:	431c      	orrs	r4, r3
 80013d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80013da:	fa01 f306 	lsl.w	r3, r1, r6
 80013de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80013e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80013e6:	431f      	orrs	r7, r3
 80013e8:	0c3b      	lsrs	r3, r7, #16
 80013ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80013ee:	fa1f f884 	uxth.w	r8, r4
 80013f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80013f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013fa:	fb09 fa08 	mul.w	sl, r9, r8
 80013fe:	458a      	cmp	sl, r1
 8001400:	fa02 f206 	lsl.w	r2, r2, r6
 8001404:	fa00 f306 	lsl.w	r3, r0, r6
 8001408:	d908      	bls.n	800141c <__udivmoddi4+0x220>
 800140a:	1861      	adds	r1, r4, r1
 800140c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001410:	d248      	bcs.n	80014a4 <__udivmoddi4+0x2a8>
 8001412:	458a      	cmp	sl, r1
 8001414:	d946      	bls.n	80014a4 <__udivmoddi4+0x2a8>
 8001416:	f1a9 0902 	sub.w	r9, r9, #2
 800141a:	4421      	add	r1, r4
 800141c:	eba1 010a 	sub.w	r1, r1, sl
 8001420:	b2bf      	uxth	r7, r7
 8001422:	fbb1 f0fe 	udiv	r0, r1, lr
 8001426:	fb0e 1110 	mls	r1, lr, r0, r1
 800142a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800142e:	fb00 f808 	mul.w	r8, r0, r8
 8001432:	45b8      	cmp	r8, r7
 8001434:	d907      	bls.n	8001446 <__udivmoddi4+0x24a>
 8001436:	19e7      	adds	r7, r4, r7
 8001438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800143c:	d22e      	bcs.n	800149c <__udivmoddi4+0x2a0>
 800143e:	45b8      	cmp	r8, r7
 8001440:	d92c      	bls.n	800149c <__udivmoddi4+0x2a0>
 8001442:	3802      	subs	r0, #2
 8001444:	4427      	add	r7, r4
 8001446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800144a:	eba7 0708 	sub.w	r7, r7, r8
 800144e:	fba0 8902 	umull	r8, r9, r0, r2
 8001452:	454f      	cmp	r7, r9
 8001454:	46c6      	mov	lr, r8
 8001456:	4649      	mov	r1, r9
 8001458:	d31a      	bcc.n	8001490 <__udivmoddi4+0x294>
 800145a:	d017      	beq.n	800148c <__udivmoddi4+0x290>
 800145c:	b15d      	cbz	r5, 8001476 <__udivmoddi4+0x27a>
 800145e:	ebb3 020e 	subs.w	r2, r3, lr
 8001462:	eb67 0701 	sbc.w	r7, r7, r1
 8001466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800146a:	40f2      	lsrs	r2, r6
 800146c:	ea4c 0202 	orr.w	r2, ip, r2
 8001470:	40f7      	lsrs	r7, r6
 8001472:	e9c5 2700 	strd	r2, r7, [r5]
 8001476:	2600      	movs	r6, #0
 8001478:	4631      	mov	r1, r6
 800147a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800147e:	462e      	mov	r6, r5
 8001480:	4628      	mov	r0, r5
 8001482:	e70b      	b.n	800129c <__udivmoddi4+0xa0>
 8001484:	4606      	mov	r6, r0
 8001486:	e6e9      	b.n	800125c <__udivmoddi4+0x60>
 8001488:	4618      	mov	r0, r3
 800148a:	e6fd      	b.n	8001288 <__udivmoddi4+0x8c>
 800148c:	4543      	cmp	r3, r8
 800148e:	d2e5      	bcs.n	800145c <__udivmoddi4+0x260>
 8001490:	ebb8 0e02 	subs.w	lr, r8, r2
 8001494:	eb69 0104 	sbc.w	r1, r9, r4
 8001498:	3801      	subs	r0, #1
 800149a:	e7df      	b.n	800145c <__udivmoddi4+0x260>
 800149c:	4608      	mov	r0, r1
 800149e:	e7d2      	b.n	8001446 <__udivmoddi4+0x24a>
 80014a0:	4660      	mov	r0, ip
 80014a2:	e78d      	b.n	80013c0 <__udivmoddi4+0x1c4>
 80014a4:	4681      	mov	r9, r0
 80014a6:	e7b9      	b.n	800141c <__udivmoddi4+0x220>
 80014a8:	4666      	mov	r6, ip
 80014aa:	e775      	b.n	8001398 <__udivmoddi4+0x19c>
 80014ac:	4630      	mov	r0, r6
 80014ae:	e74a      	b.n	8001346 <__udivmoddi4+0x14a>
 80014b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80014b4:	4439      	add	r1, r7
 80014b6:	e713      	b.n	80012e0 <__udivmoddi4+0xe4>
 80014b8:	3802      	subs	r0, #2
 80014ba:	443c      	add	r4, r7
 80014bc:	e724      	b.n	8001308 <__udivmoddi4+0x10c>
 80014be:	bf00      	nop

080014c0 <__aeabi_idiv0>:
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop

080014c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	int DataIdx;
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <_write+0x28>)
 80014dc:	f003 fafc 	bl	8004ad8 <HAL_UART_Transmit>
	return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200022ac 	.word	0x200022ac

080014f0 <main>:
 */

uint8_t part1 = 0;
int cnt2 = 0;

int main(void) {
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 80014f6:	b09c      	sub	sp, #112	; 0x70
 80014f8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014fa:	f000 fd80 	bl	8001ffe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014fe:	f000 f9f5 	bl	80018ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001502:	f000 faeb 	bl	8001adc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001506:	f000 fab9 	bl	8001a7c <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800150a:	f000 fa77 	bl	80019fc <MX_I2C1_Init>
	MX_CRC_Init();
 800150e:	f000 fa53 	bl	80019b8 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */

	BSP_NFCTAG_Init(0U);
 8001512:	2000      	movs	r0, #0
 8001514:	f004 f80a 	bl	800552c <BSP_NFCTAG_Init>

	printf("\r============\r\n");
 8001518:	48aa      	ldr	r0, [pc, #680]	; (80017c4 <main+0x2d4>)
 800151a:	f00d f95b 	bl	800e7d4 <puts>

	if (BSP_NFCTAG_IsDeviceReady(0U, 2) != -1) {
 800151e:	2102      	movs	r1, #2
 8001520:	2000      	movs	r0, #0
 8001522:	f004 f855 	bl	80055d0 <BSP_NFCTAG_IsDeviceReady>
 8001526:	4603      	mov	r3, r0
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800152c:	d003      	beq.n	8001536 <main+0x46>
		printf("\rNFC OK\r\n");
 800152e:	48a6      	ldr	r0, [pc, #664]	; (80017c8 <main+0x2d8>)
 8001530:	f00d f950 	bl	800e7d4 <puts>
 8001534:	e002      	b.n	800153c <main+0x4c>

	} else {
		printf("\rNFC not ok\n");
 8001536:	48a5      	ldr	r0, [pc, #660]	; (80017cc <main+0x2dc>)
 8001538:	f00d f94c 	bl	800e7d4 <puts>
	}

	ST25FTM_Init();
 800153c:	f005 fa56 	bl	80069ec <ST25FTM_Init>

	ST25FTM_SetRxFrameMaxLength(256);
 8001540:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001544:	f005 fa6c 	bl	8006a20 <ST25FTM_SetRxFrameMaxLength>
	ST25FTM_SetTxFrameMaxLength(256);
 8001548:	f44f 7080 	mov.w	r0, #256	; 0x100
 800154c:	f005 fa58 	bl	8006a00 <ST25FTM_SetTxFrameMaxLength>
	cmdLength = 1000;
 8001550:	4b9f      	ldr	r3, [pc, #636]	; (80017d0 <main+0x2e0>)
 8001552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001556:	601a      	str	r2, [r3, #0]
	current_command = FTM_NO_COMMAND;
 8001558:	4b9e      	ldr	r3, [pc, #632]	; (80017d4 <main+0x2e4>)
 800155a:	22ff      	movs	r2, #255	; 0xff
 800155c:	701a      	strb	r2, [r3, #0]
	ST25FTM_ReceiveCommand(cmdBuffer, &cmdLength, NULL);
 800155e:	2200      	movs	r2, #0
 8001560:	499b      	ldr	r1, [pc, #620]	; (80017d0 <main+0x2e0>)
 8001562:	489d      	ldr	r0, [pc, #628]	; (80017d8 <main+0x2e8>)
 8001564:	f005 fa90 	bl	8006a88 <ST25FTM_ReceiveCommand>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	float g[4096];
	float input[]    = {24.94, 24.75, 24.56, 25.38, 121, 34, 53, 40,  0.08,  0.19,  0.06,  0.06,  390, 0.769231, 0,  0};
 8001568:	4b9c      	ldr	r3, [pc, #624]	; (80017dc <main+0x2ec>)
 800156a:	f244 0268 	movw	r2, #16488	; 0x4068
 800156e:	443a      	add	r2, r7
 8001570:	4413      	add	r3, r2
 8001572:	4a9b      	ldr	r2, [pc, #620]	; (80017e0 <main+0x2f0>)
 8001574:	461c      	mov	r4, r3
 8001576:	4615      	mov	r5, r2
 8001578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int i = 0; i < 4096; i++)
 800158c:	2300      	movs	r3, #0
 800158e:	f244 0264 	movw	r2, #16484	; 0x4064
 8001592:	443a      	add	r2, r7
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e027      	b.n	80015e8 <main+0xf8>
		g[i] = input[i%16];
 8001598:	f244 0364 	movw	r3, #16484	; 0x4064
 800159c:	443b      	add	r3, r7
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	425a      	negs	r2, r3
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	f002 020f 	and.w	r2, r2, #15
 80015aa:	bf58      	it	pl
 80015ac:	4253      	negpl	r3, r2
 80015ae:	4a8b      	ldr	r2, [pc, #556]	; (80017dc <main+0x2ec>)
 80015b0:	f244 0168 	movw	r1, #16488	; 0x4068
 80015b4:	4439      	add	r1, r7
 80015b6:	440a      	add	r2, r1
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b89      	ldr	r3, [pc, #548]	; (80017e4 <main+0x2f4>)
 80015c0:	f244 0168 	movw	r1, #16488	; 0x4068
 80015c4:	4439      	add	r1, r7
 80015c6:	440b      	add	r3, r1
 80015c8:	f244 0164 	movw	r1, #16484	; 0x4064
 80015cc:	4439      	add	r1, r7
 80015ce:	6809      	ldr	r1, [r1, #0]
 80015d0:	0089      	lsls	r1, r1, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4096; i++)
 80015d6:	f244 0364 	movw	r3, #16484	; 0x4064
 80015da:	443b      	add	r3, r7
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	f244 0264 	movw	r2, #16484	; 0x4064
 80015e4:	443a      	add	r2, r7
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	f244 0364 	movw	r3, #16484	; 0x4064
 80015ec:	443b      	add	r3, r7
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f4:	dbd0      	blt.n	8001598 <main+0xa8>

	double scale = pow(2, 25);
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80015fe:	f244 0158 	movw	r1, #16472	; 0x4058
 8001602:	4439      	add	r1, r7
 8001604:	e9c1 2300 	strd	r2, r3, [r1]

	par = se_setup(8192, 6, scale, SE_SYM_ENCR);
 8001608:	2200      	movs	r2, #0
 800160a:	f244 0358 	movw	r3, #16472	; 0x4058
 800160e:	443b      	add	r3, r7
 8001610:	ed93 0b00 	vldr	d0, [r3]
 8001614:	2106      	movs	r1, #6
 8001616:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800161a:	f00c fde9 	bl	800e1f0 <se_setup>
 800161e:	4603      	mov	r3, r0
 8001620:	4a71      	ldr	r2, [pc, #452]	; (80017e8 <main+0x2f8>)
 8001622:	6013      	str	r3, [r2, #0]

	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ST25FTM_Runner();
 8001624:	f005 fa56 	bl	8006ad4 <ST25FTM_Runner>

		if (ST25FTM_IsNewFrame()) {
 8001628:	f005 fad8 	bl	8006bdc <ST25FTM_IsNewFrame>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <main+0x156>
			current_command = (ftm_cmd_t) cmdBuffer[0];
 8001632:	4b69      	ldr	r3, [pc, #420]	; (80017d8 <main+0x2e8>)
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <main+0x2e4>)
 8001638:	701a      	strb	r2, [r3, #0]
			printf("%d \n", cmdBuffer[0]);
 800163a:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <main+0x2e8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	486a      	ldr	r0, [pc, #424]	; (80017ec <main+0x2fc>)
 8001642:	f00d f82b 	bl	800e69c <iprintf>
		}

		if (ST25FTM_IsReceptionComplete()) {
 8001646:	f005 fae3 	bl	8006c10 <ST25FTM_IsReceptionComplete>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8099 	beq.w	8001784 <main+0x294>

			if (current_command == FTM_READ_ID) {
 8001652:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <main+0x2e4>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d138      	bne.n	80016cc <main+0x1dc>

				uint8_t response_p[6];
				response_p[2] = 0;
 800165a:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <main+0x300>)
 800165c:	f244 0268 	movw	r2, #16488	; 0x4068
 8001660:	443a      	add	r2, r7
 8001662:	4413      	add	r3, r2
 8001664:	2200      	movs	r2, #0
 8001666:	709a      	strb	r2, [r3, #2]
				response_p[3] = 1;
 8001668:	4b61      	ldr	r3, [pc, #388]	; (80017f0 <main+0x300>)
 800166a:	f244 0268 	movw	r2, #16488	; 0x4068
 800166e:	443a      	add	r2, r7
 8001670:	4413      	add	r3, r2
 8001672:	2201      	movs	r2, #1
 8001674:	70da      	strb	r2, [r3, #3]
				response_p[4] = 2;
 8001676:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <main+0x300>)
 8001678:	f244 0268 	movw	r2, #16488	; 0x4068
 800167c:	443a      	add	r2, r7
 800167e:	4413      	add	r3, r2
 8001680:	2202      	movs	r2, #2
 8001682:	711a      	strb	r2, [r3, #4]
				response_p[5] = 3;
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <main+0x300>)
 8001686:	f244 0268 	movw	r2, #16488	; 0x4068
 800168a:	443a      	add	r2, r7
 800168c:	4413      	add	r3, r2
 800168e:	2203      	movs	r2, #3
 8001690:	715a      	strb	r2, [r3, #5]
				response_p[0] = (FTM_RESP_CMD | current_command);
 8001692:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <main+0x2e4>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <main+0x300>)
 800169e:	f244 0168 	movw	r1, #16488	; 0x4068
 80016a2:	4439      	add	r1, r7
 80016a4:	440b      	add	r3, r1
 80016a6:	701a      	strb	r2, [r3, #0]
				response_p[1] = (FTM_VALID);
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <main+0x300>)
 80016aa:	f244 0268 	movw	r2, #16488	; 0x4068
 80016ae:	443a      	add	r2, r7
 80016b0:	4413      	add	r3, r2
 80016b2:	2281      	movs	r2, #129	; 0x81
 80016b4:	705a      	strb	r2, [r3, #1]

				ST25FTM_SendCommand(response_p, 6, 0, NULL);
 80016b6:	484e      	ldr	r0, [pc, #312]	; (80017f0 <main+0x300>)
 80016b8:	f244 0368 	movw	r3, #16488	; 0x4068
 80016bc:	443b      	add	r3, r7
 80016be:	4418      	add	r0, r3
 80016c0:	2300      	movs	r3, #0
 80016c2:	2200      	movs	r2, #0
 80016c4:	2106      	movs	r1, #6
 80016c6:	f005 f9bb 	bl	8006a40 <ST25FTM_SendCommand>
 80016ca:	e05b      	b.n	8001784 <main+0x294>

			} else if (current_command == FTM_READ_DATA) {
 80016cc:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <main+0x2e4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d157      	bne.n	8001784 <main+0x294>

				int data_transfer_length = 32768;
 80016d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d8:	f244 0254 	movw	r2, #16468	; 0x4054
 80016dc:	443a      	add	r2, r7
 80016de:	6013      	str	r3, [r2, #0]
				uint32_t rspLen = data_transfer_length + 2;
 80016e0:	f244 0354 	movw	r3, #16468	; 0x4054
 80016e4:	443b      	add	r3, r7
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3302      	adds	r3, #2
 80016ea:	f244 0250 	movw	r2, #16464	; 0x4050
 80016ee:	443a      	add	r2, r7
 80016f0:	6013      	str	r3, [r2, #0]

				ST25FTM_Send_Ack_t ack =(current_command == FTM_READ_DATA) ?ST25FTM_SEND_WITH_ACK :ST25FTM_SEND_WITHOUT_ACK;
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <main+0x2e4>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	bf0c      	ite	eq
 80016fa:	2301      	moveq	r3, #1
 80016fc:	2300      	movne	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f244 024f 	movw	r2, #16463	; 0x404f
 8001704:	443a      	add	r2, r7
 8001706:	7013      	strb	r3, [r2, #0]

               if(cnt2%2==0){
 8001708:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <main+0x304>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d120      	bne.n	8001756 <main+0x266>
            	   part1++;
 8001714:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <main+0x308>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <main+0x308>)
 800171e:	701a      	strb	r2, [r3, #0]
            	   se_encrypt(NULL, &g, 4096 * 8, 1, par);
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <main+0x2f8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	492f      	ldr	r1, [pc, #188]	; (80017e4 <main+0x2f4>)
 8001726:	f244 0268 	movw	r2, #16488	; 0x4068
 800172a:	443a      	add	r2, r7
 800172c:	4411      	add	r1, r2
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2301      	movs	r3, #1
 8001732:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001736:	2000      	movs	r0, #0
 8001738:	f00c fe82 	bl	800e440 <se_encrypt>
            	   ST25FTM_SendCommand(0, rspLen, ack, &FTM_ReadData_Callback);
 800173c:	f244 034f 	movw	r3, #16463	; 0x404f
 8001740:	443b      	add	r3, r7
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <main+0x30c>)
 8001746:	f244 0150 	movw	r1, #16464	; 0x4050
 800174a:	4439      	add	r1, r7
 800174c:	6809      	ldr	r1, [r1, #0]
 800174e:	2000      	movs	r0, #0
 8001750:	f005 f976 	bl	8006a40 <ST25FTM_SendCommand>
 8001754:	e00b      	b.n	800176e <main+0x27e>
               }
               else{
            	   ST25FTM_SendCommand(0, rspLen, ack, &FTM_ReadData_Callback2);
 8001756:	f244 034f 	movw	r3, #16463	; 0x404f
 800175a:	443b      	add	r3, r7
 800175c:	781a      	ldrb	r2, [r3, #0]
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <main+0x310>)
 8001760:	f244 0150 	movw	r1, #16464	; 0x4050
 8001764:	4439      	add	r1, r7
 8001766:	6809      	ldr	r1, [r1, #0]
 8001768:	2000      	movs	r0, #0
 800176a:	f005 f969 	bl	8006a40 <ST25FTM_SendCommand>
               }
				cnt2++;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <main+0x304>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <main+0x304>)
 8001776:	6013      	str	r3, [r2, #0]
				printf("\r\npart%d of 12 \r\n",cnt2);
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <main+0x304>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4821      	ldr	r0, [pc, #132]	; (8001804 <main+0x314>)
 8001780:	f00c ff8c 	bl	800e69c <iprintf>

			}
		}

		if (ST25FTM_IsTransmissionComplete() || ST25FTM_IsIdle()) {
 8001784:	f005 fa5e 	bl	8006c44 <ST25FTM_IsTransmissionComplete>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d104      	bne.n	8001798 <main+0x2a8>
 800178e:	f005 fa73 	bl	8006c78 <ST25FTM_IsIdle>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00a      	beq.n	80017ae <main+0x2be>

			cmdLength = 4;
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <main+0x2e0>)
 800179a:	2204      	movs	r2, #4
 800179c:	601a      	str	r2, [r3, #0]
			current_command = FTM_NO_COMMAND;
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <main+0x2e4>)
 80017a0:	22ff      	movs	r2, #255	; 0xff
 80017a2:	701a      	strb	r2, [r3, #0]
			ST25FTM_ReceiveCommand(cmdBuffer, &cmdLength, NULL);
 80017a4:	2200      	movs	r2, #0
 80017a6:	490a      	ldr	r1, [pc, #40]	; (80017d0 <main+0x2e0>)
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <main+0x2e8>)
 80017aa:	f005 f96d 	bl	8006a88 <ST25FTM_ReceiveCommand>

		}

		if (ST25FTM_CheckError()) {
 80017ae:	f005 fa79 	bl	8006ca4 <ST25FTM_CheckError>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f43f af35 	beq.w	8001624 <main+0x134>
			printf("error\n");
 80017ba:	4813      	ldr	r0, [pc, #76]	; (8001808 <main+0x318>)
 80017bc:	f00d f80a 	bl	800e7d4 <puts>
		ST25FTM_Runner();
 80017c0:	e730      	b.n	8001624 <main+0x134>
 80017c2:	bf00      	nop
 80017c4:	0800fa58 	.word	0x0800fa58
 80017c8:	0800fa68 	.word	0x0800fa68
 80017cc:	0800fa74 	.word	0x0800fa74
 80017d0:	20000004 	.word	0x20000004
 80017d4:	20000000 	.word	0x20000000
 80017d8:	200000fc 	.word	0x200000fc
 80017dc:	ffffbfa4 	.word	0xffffbfa4
 80017e0:	0800faa4 	.word	0x0800faa4
 80017e4:	ffffbfe4 	.word	0xffffbfe4
 80017e8:	200022a8 	.word	0x200022a8
 80017ec:	0800fa80 	.word	0x0800fa80
 80017f0:	ffffbf9c 	.word	0xffffbf9c
 80017f4:	20002100 	.word	0x20002100
 80017f8:	200020fc 	.word	0x200020fc
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	0800187d 	.word	0x0800187d
 8001804:	0800fa88 	.word	0x0800fa88
 8001808:	0800fa9c 	.word	0x0800fa9c

0800180c <FTM_ReadData_Callback>:
		}
		/* USER CODE END 3 */
	}
}

static void FTM_ReadData_Callback(uint8_t *dst, uint8_t *src, uint32_t len) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]

	if (src == 0)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <FTM_ReadData_Callback+0x44>
	{

		dst[0] = (FTM_RESP_CMD) | (current_command);
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <FTM_ReadData_Callback+0x68>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001826:	b2da      	uxtb	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	701a      	strb	r2, [r3, #0]
		dst[1] = (FTM_VALID);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3301      	adds	r3, #1
 8001830:	2281      	movs	r2, #129	; 0x81
 8001832:	701a      	strb	r2, [r3, #0]
		uint8_t *t = ((void*)par->se_ptrs->c0_ptr) ;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <FTM_ReadData_Callback+0x6c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	613b      	str	r3, [r7, #16]
		memcpy(&dst[2],t , len - 2);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1c98      	adds	r0, r3, #2
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3b02      	subs	r3, #2
 8001846:	461a      	mov	r2, r3
 8001848:	6939      	ldr	r1, [r7, #16]
 800184a:	f00c fe57 	bl	800e4fc <memcpy>
	else
	{
		uint8_t *t = ((void*)par->se_ptrs->c0_ptr) + (int)src;
		memcpy(dst,t-2 , len);
	}
}
 800184e:	e00d      	b.n	800186c <FTM_ReadData_Callback+0x60>
		uint8_t *t = ((void*)par->se_ptrs->c0_ptr) + (int)src;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <FTM_ReadData_Callback+0x6c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4413      	add	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
		memcpy(dst,t-2 , len);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3b02      	subs	r3, #2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4619      	mov	r1, r3
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f00c fe48 	bl	800e4fc <memcpy>
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000000 	.word	0x20000000
 8001878:	200022a8 	.word	0x200022a8

0800187c <FTM_ReadData_Callback2>:

static void FTM_ReadData_Callback2(uint8_t *dst, uint8_t *src, uint32_t len) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]

	if (src == 0)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <FTM_ReadData_Callback2+0x44>
	{

		dst[0] = (FTM_RESP_CMD) | (current_command);
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <FTM_ReadData_Callback2+0x68>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	701a      	strb	r2, [r3, #0]
		dst[1] = (FTM_VALID);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	2281      	movs	r2, #129	; 0x81
 80018a2:	701a      	strb	r2, [r3, #0]
		uint8_t *t = ((void*)par->se_ptrs->c1_ptr) ;
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <FTM_ReadData_Callback2+0x6c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	613b      	str	r3, [r7, #16]
		memcpy(&dst[2],t , len - 2);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1c98      	adds	r0, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3b02      	subs	r3, #2
 80018b6:	461a      	mov	r2, r3
 80018b8:	6939      	ldr	r1, [r7, #16]
 80018ba:	f00c fe1f 	bl	800e4fc <memcpy>
	else
	{
		uint8_t *t = ((void*)par->se_ptrs->c1_ptr) + (int)src;
		memcpy(dst,t-2 , len);
	}
}
 80018be:	e00d      	b.n	80018dc <FTM_ReadData_Callback2+0x60>
		uint8_t *t = ((void*)par->se_ptrs->c1_ptr) + (int)src;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <FTM_ReadData_Callback2+0x6c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4413      	add	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
		memcpy(dst,t-2 , len);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3b02      	subs	r3, #2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f00c fe10 	bl	800e4fc <memcpy>
}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	200022a8 	.word	0x200022a8

080018ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	; 0x50
 80018f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2230      	movs	r2, #48	; 0x30
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00c fe0c 	bl	800e518 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <SystemClock_Config+0xc4>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <SystemClock_Config+0xc4>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <SystemClock_Config+0xc4>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <SystemClock_Config+0xc8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <SystemClock_Config+0xc8>)
 800192e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <SystemClock_Config+0xc8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001948:	2310      	movs	r3, #16
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194c:	2302      	movs	r3, #2
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001950:	2300      	movs	r3, #0
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001954:	2308      	movs	r3, #8
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001958:	23b4      	movs	r3, #180	; 0xb4
 800195a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195c:	2302      	movs	r3, #2
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001960:	2302      	movs	r3, #2
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fffd 	bl	8003968 <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x8c>
		Error_Handler();
 8001974:	f000 f8fe 	bl	8001b74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001978:	230f      	movs	r3, #15
 800197a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197c:	2302      	movs	r3, #2
 800197e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001984:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001988:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2105      	movs	r1, #5
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fa8a 	bl	8003eb0 <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0xba>
		Error_Handler();
 80019a2:	f000 f8e7 	bl	8001b74 <Error_Handler>
	}
}
 80019a6:	bf00      	nop
 80019a8:	3750      	adds	r7, #80	; 0x50
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000

080019b8 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <MX_CRC_Init+0x3c>)
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <MX_CRC_Init+0x40>)
 80019c0:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_CRC_Init+0x3c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_CRC_Init+0x3c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_CRC_Init+0x3c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_CRC_Init+0x3c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_CRC_Init+0x3c>)
 80019dc:	2201      	movs	r2, #1
 80019de:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_CRC_Init+0x3c>)
 80019e2:	f000 fc9f 	bl	8002324 <HAL_CRC_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_CRC_Init+0x38>
		Error_Handler();
 80019ec:	f000 f8c2 	bl	8001b74 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20002284 	.word	0x20002284
 80019f8:	40023000 	.word	0x40023000

080019fc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <MX_I2C1_Init+0x78>)
 8001a04:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00401650;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <MX_I2C1_Init+0x7c>)
 8001a0a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a36:	480e      	ldr	r0, [pc, #56]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a38:	f001 f886 	bl	8002b48 <HAL_I2C_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001a42:	f000 f897 	bl	8001b74 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001a46:	2100      	movs	r1, #0
 8001a48:	4809      	ldr	r0, [pc, #36]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a4a:	f001 fef5 	bl	8003838 <HAL_I2CEx_ConfigAnalogFilter>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001a54:	f000 f88e 	bl	8001b74 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_I2C1_Init+0x74>)
 8001a5c:	f001 ff37 	bl	80038ce <HAL_I2CEx_ConfigDigitalFilter>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001a66:	f000 f885 	bl	8001b74 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20002238 	.word	0x20002238
 8001a74:	40005400 	.word	0x40005400
 8001a78:	00401650 	.word	0x00401650

08001a7c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <MX_USART1_UART_Init+0x5c>)
 8001a84:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a8c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001ac0:	f002 ffbc 	bl	8004a3c <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001aca:	f000 f853 	bl	8001b74 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200022ac 	.word	0x200022ac
 8001ad8:	40011000 	.word	0x40011000

08001adc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_GPIO_Init+0x90>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b3a:	2340      	movs	r3, #64	; 0x40
 8001b3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <MX_GPIO_Init+0x94>)
 8001b50:	f000 fe2a 	bl	80027a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2017      	movs	r0, #23
 8001b5a:	f000 fbac 	bl	80022b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b5e:	2017      	movs	r0, #23
 8001b60:	f000 fbc5 	bl	80022ee <HAL_NVIC_EnableIRQ>

}
 8001b64:	bf00      	nop
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40021800 	.word	0x40021800

08001b74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_MspInit+0x44>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_CRC_MspInit+0x38>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_CRC_MspInit+0x3c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_CRC_MspInit+0x3c>)
 8001be0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_CRC_MspInit+0x3c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023000 	.word	0x40023000
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0aa      	sub	sp, #168	; 0xa8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2284      	movs	r2, #132	; 0x84
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f00c fc75 	bl	800e518 <memset>
  if(hi2c->Instance==I2C1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_I2C_MspInit+0xb4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d13c      	bne.n	8001cb2 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fb08 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c52:	f7ff ff8f 	bl	8001b74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_I2C_MspInit+0xb8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_I2C_MspInit+0xb8>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_I2C_MspInit+0xb8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c76:	2312      	movs	r3, #18
 8001c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c92:	4619      	mov	r1, r3
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_I2C_MspInit+0xbc>)
 8001c96:	f000 fd87 	bl	80027a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_I2C_MspInit+0xb8>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_I2C_MspInit+0xb8>)
 8001ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_I2C_MspInit+0xb8>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	37a8      	adds	r7, #168	; 0xa8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40005400 	.word	0x40005400
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0ac      	sub	sp, #176	; 0xb0
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	2284      	movs	r2, #132	; 0x84
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00c fc15 	bl	800e518 <memset>
  if(huart->Instance==USART1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <HAL_UART_MspInit+0xf4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d15c      	bne.n	8001db2 <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cf8:	2340      	movs	r3, #64	; 0x40
 8001cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d00:	f107 0318 	add.w	r3, r7, #24
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 faa9 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d10:	f7ff ff30 	bl	8001b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	6313      	str	r3, [r2, #48]	; 0x30
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0xf8>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d74:	2307      	movs	r3, #7
 8001d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <HAL_UART_MspInit+0xfc>)
 8001d82:	f000 fd11 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da0:	2307      	movs	r3, #7
 8001da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001daa:	4619      	mov	r1, r3
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <HAL_UART_MspInit+0x100>)
 8001dae:	f000 fcfb 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	37b0      	adds	r7, #176	; 0xb0
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020000 	.word	0x40020000

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>
	...

08001dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{  printf("fault\n");
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4801      	ldr	r0, [pc, #4]	; (8001de0 <HardFault_Handler+0xc>)
 8001dda:	f00c fcfb 	bl	800e7d4 <puts>
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0xa>
 8001de0:	0800fae4 	.word	0x0800fae4

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <MemManage_Handler+0x4>

08001dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <BusFault_Handler+0x4>

08001df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <UsageFault_Handler+0x4>

08001df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e24:	f000 f928 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	f000 fe65 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  GPO_Activated=1;
 8001e36:	4b02      	ldr	r3, [pc, #8]	; (8001e40 <EXTI9_5_IRQHandler+0x14>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
 // printf("intu\n");
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200024d8 	.word	0x200024d8

08001e44 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e4e:	f00c fb17 	bl	800e480 <__errno>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2216      	movs	r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
	return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_exit>:

void _exit (int status)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ffe7 	bl	8001e44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e76:	e7fe      	b.n	8001e76 <_exit+0x12>

08001e78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e00a      	b.n	8001ea0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	4601      	mov	r1, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	60ba      	str	r2, [r7, #8]
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf0      	blt.n	8001e8a <_read+0x12>
	}

return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
	return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:

int _isatty(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f00c fa98 	bl	800e480 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20050000 	.word	0x20050000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20002104 	.word	0x20002104
 8001f84:	200024e8 	.word	0x200024e8

08001f88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fb2:	490e      	ldr	r1, [pc, #56]	; (8001fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb8:	e002      	b.n	8001fc0 <LoopCopyDataInit>

08001fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fbe:	3304      	adds	r3, #4

08001fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc4:	d3f9      	bcc.n	8001fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc8:	4c0b      	ldr	r4, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fcc:	e001      	b.n	8001fd2 <LoopFillZerobss>

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd0:	3204      	adds	r2, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd6:	f7ff ffd7 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fda:	f00c fa6b 	bl	800e4b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fde:	f7ff fa87 	bl	80014f0 <main>
  bx  lr    
 8001fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001ff0:	080c4938 	.word	0x080c4938
  ldr r2, =_sbss
 8001ff4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001ff8:	200024e8 	.word	0x200024e8

08001ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC_IRQHandler>

08001ffe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002002:	2003      	movs	r0, #3
 8002004:	f000 f94c 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002008:	200f      	movs	r0, #15
 800200a:	f000 f805 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800200e:	f7ff fdb7 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f967 	bl	800230a <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002054:	f000 f92f 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000008 	.word	0x20000008
 8002070:	20000010 	.word	0x20000010
 8002074:	2000000c 	.word	0x2000000c

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000010 	.word	0x20000010
 800209c:	20002330 	.word	0x20002330

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20002330 	.word	0x20002330

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_Delay+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffde 	bl	80020a0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
  {
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000010 	.word	0x20000010

08002100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <__NVIC_SetPriorityGrouping+0x40>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	4313      	orrs	r3, r2
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x40>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00
 8002144:	05fa0000 	.word	0x05fa0000

08002148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff29 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff3e 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e054      	b.n	80023e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7f5b      	ldrb	r3, [r3, #29]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fc3e 	bl	8001bc8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_CRC_Init+0xc4>)
 8002360:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0218 	bic.w	r2, r2, #24
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	e00c      	b.n	800238e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f98c 	bl	800269c <HAL_CRCEx_Polynomial_Set>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e028      	b.n	80023e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	795b      	ldrb	r3, [r3, #5]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800239e:	611a      	str	r2, [r3, #16]
 80023a0:	e004      	b.n	80023ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	04c11db7 	.word	0x04c11db7

080023ec <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2202      	movs	r2, #2
 8002400:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d006      	beq.n	8002418 <HAL_CRC_Accumulate+0x2c>
 800240a:	2b03      	cmp	r3, #3
 800240c:	d829      	bhi.n	8002462 <HAL_CRC_Accumulate+0x76>
 800240e:	2b01      	cmp	r3, #1
 8002410:	d019      	beq.n	8002446 <HAL_CRC_Accumulate+0x5a>
 8002412:	2b02      	cmp	r3, #2
 8002414:	d01e      	beq.n	8002454 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002416:	e024      	b.n	8002462 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e00a      	b.n	8002434 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	441a      	add	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d3f0      	bcc.n	800241e <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
      break;
 8002444:	e00e      	b.n	8002464 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f85e 	bl	800250c <CRC_Handle_8>
 8002450:	6138      	str	r0, [r7, #16]
      break;
 8002452:	e007      	b.n	8002464 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f8e5 	bl	8002628 <CRC_Handle_16>
 800245e:	6138      	str	r0, [r7, #16]
      break;
 8002460:	e000      	b.n	8002464 <HAL_CRC_Accumulate+0x78>
      break;
 8002462:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800246a:	693b      	ldr	r3, [r7, #16]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2202      	movs	r2, #2
 8002488:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d006      	beq.n	80024b0 <HAL_CRC_Calculate+0x3c>
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d829      	bhi.n	80024fa <HAL_CRC_Calculate+0x86>
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d019      	beq.n	80024de <HAL_CRC_Calculate+0x6a>
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d01e      	beq.n	80024ec <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80024ae:	e024      	b.n	80024fa <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e00a      	b.n	80024cc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	441a      	add	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d3f0      	bcc.n	80024b6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	613b      	str	r3, [r7, #16]
      break;
 80024dc:	e00e      	b.n	80024fc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f812 	bl	800250c <CRC_Handle_8>
 80024e8:	6138      	str	r0, [r7, #16]
      break;
 80024ea:	e007      	b.n	80024fc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f899 	bl	8002628 <CRC_Handle_16>
 80024f6:	6138      	str	r0, [r7, #16]
      break;
 80024f8:	e000      	b.n	80024fc <HAL_CRC_Calculate+0x88>
      break;
 80024fa:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002502:	693b      	ldr	r3, [r7, #16]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	e023      	b.n	8002566 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	4413      	add	r3, r2
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	3301      	adds	r3, #1
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	440b      	add	r3, r1
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002538:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	440b      	add	r3, r1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002548:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	3303      	adds	r3, #3
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	440b      	add	r3, r1
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800255c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800255e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	429a      	cmp	r2, r3
 800256e:	d3d6      	bcc.n	800251e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04d      	beq.n	8002616 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	4413      	add	r3, r2
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d116      	bne.n	80025cc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4413      	add	r3, r2
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3301      	adds	r3, #1
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	440b      	add	r3, r1
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b21b      	sxth	r3, r3
 80025be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	8b7a      	ldrh	r2, [r7, #26]
 80025ca:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d11f      	bne.n	8002616 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	3301      	adds	r3, #1
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	440b      	add	r3, r1
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	8b7a      	ldrh	r2, [r7, #26]
 8002602:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4413      	add	r3, r2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3724      	adds	r7, #36	; 0x24
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e013      	b.n	8002662 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4413      	add	r3, r2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	440b      	add	r3, r1
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	4619      	mov	r1, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3301      	adds	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	d3e6      	bcc.n	800263a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	4413      	add	r3, r2
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80026ac:	231f      	movs	r3, #31
 80026ae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80026b0:	bf00      	nop
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	613a      	str	r2, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_CRCEx_Polynomial_Set+0x34>
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_CRCEx_Polynomial_Set+0x16>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b18      	cmp	r3, #24
 80026d4:	d846      	bhi.n	8002764 <HAL_CRCEx_Polynomial_Set+0xc8>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_CRCEx_Polynomial_Set+0x40>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	0800276b 	.word	0x0800276b
 80026e0:	08002765 	.word	0x08002765
 80026e4:	08002765 	.word	0x08002765
 80026e8:	08002765 	.word	0x08002765
 80026ec:	08002765 	.word	0x08002765
 80026f0:	08002765 	.word	0x08002765
 80026f4:	08002765 	.word	0x08002765
 80026f8:	08002765 	.word	0x08002765
 80026fc:	08002759 	.word	0x08002759
 8002700:	08002765 	.word	0x08002765
 8002704:	08002765 	.word	0x08002765
 8002708:	08002765 	.word	0x08002765
 800270c:	08002765 	.word	0x08002765
 8002710:	08002765 	.word	0x08002765
 8002714:	08002765 	.word	0x08002765
 8002718:	08002765 	.word	0x08002765
 800271c:	0800274d 	.word	0x0800274d
 8002720:	08002765 	.word	0x08002765
 8002724:	08002765 	.word	0x08002765
 8002728:	08002765 	.word	0x08002765
 800272c:	08002765 	.word	0x08002765
 8002730:	08002765 	.word	0x08002765
 8002734:	08002765 	.word	0x08002765
 8002738:	08002765 	.word	0x08002765
 800273c:	08002741 	.word	0x08002741
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b06      	cmp	r3, #6
 8002744:	d913      	bls.n	800276e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800274a:	e010      	b.n	800276e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d90f      	bls.n	8002772 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002756:	e00c      	b.n	8002772 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	d90b      	bls.n	8002776 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002762:	e008      	b.n	8002776 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	75fb      	strb	r3, [r7, #23]
      break;
 8002768:	e006      	b.n	8002778 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800276a:	bf00      	nop
 800276c:	e004      	b.n	8002778 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800276e:	bf00      	nop
 8002770:	e002      	b.n	8002778 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002776:	bf00      	nop
  }
  if (status == HAL_OK)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 0118 	bic.w	r1, r3, #24
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800279a:	7dfb      	ldrb	r3, [r7, #23]
}
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e175      	b.n	8002ab4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f040 8164 	bne.w	8002aae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d005      	beq.n	80027fe <HAL_GPIO_Init+0x56>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d130      	bne.n	8002860 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b03      	cmp	r3, #3
 800286a:	d017      	beq.n	800289c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d123      	bne.n	80028f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80be 	beq.w	8002aae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_GPIO_Init+0x324>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800294a:	4a61      	ldr	r2, [pc, #388]	; (8002ad0 <HAL_GPIO_Init+0x328>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_GPIO_Init+0x32c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d037      	beq.n	80029e6 <HAL_GPIO_Init+0x23e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a57      	ldr	r2, [pc, #348]	; (8002ad8 <HAL_GPIO_Init+0x330>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d031      	beq.n	80029e2 <HAL_GPIO_Init+0x23a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_GPIO_Init+0x334>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_Init+0x236>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <HAL_GPIO_Init+0x338>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_Init+0x232>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_GPIO_Init+0x33c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x22e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a53      	ldr	r2, [pc, #332]	; (8002ae8 <HAL_GPIO_Init+0x340>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x22a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_GPIO_Init+0x344>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x226>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a51      	ldr	r2, [pc, #324]	; (8002af0 <HAL_GPIO_Init+0x348>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x222>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_GPIO_Init+0x34c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x21e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4f      	ldr	r2, [pc, #316]	; (8002af8 <HAL_GPIO_Init+0x350>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x21a>
 80029be:	2309      	movs	r3, #9
 80029c0:	e012      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029c2:	230a      	movs	r3, #10
 80029c4:	e010      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029c6:	2308      	movs	r3, #8
 80029c8:	e00e      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e00c      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029ce:	2306      	movs	r3, #6
 80029d0:	e00a      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029d2:	2305      	movs	r3, #5
 80029d4:	e008      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029d6:	2304      	movs	r3, #4
 80029d8:	e006      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029da:	2303      	movs	r3, #3
 80029dc:	e004      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029de:	2302      	movs	r3, #2
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029e6:	2300      	movs	r3, #0
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f002 0203 	and.w	r2, r2, #3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4093      	lsls	r3, r2
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029f8:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <HAL_GPIO_Init+0x328>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2a:	4a34      	ldr	r2, [pc, #208]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a54:	4a29      	ldr	r2, [pc, #164]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a5a:	4b28      	ldr	r3, [pc, #160]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <HAL_GPIO_Init+0x354>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	f67f ae86 	bls.w	80027c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	3724      	adds	r7, #36	; 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40020400 	.word	0x40020400
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40021400 	.word	0x40021400
 8002aec:	40021800 	.word	0x40021800
 8002af0:	40021c00 	.word	0x40021c00
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022400 	.word	0x40022400
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f806 	bl	8002b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff f84a 	bl	8001c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2224      	movs	r2, #36	; 0x24
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e006      	b.n	8002bd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d104      	bne.n	8002be2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_I2C_Init+0x11c>)
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69d9      	ldr	r1, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	02008000 	.word	0x02008000

08002c68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	817b      	strh	r3, [r7, #10]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	813b      	strh	r3, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	f040 80f9 	bne.w	8002e82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_I2C_Mem_Write+0x34>
 8002c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0ed      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2C_Mem_Write+0x4e>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0e6      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cbe:	f7ff f9ef 	bl	80020a0 <HAL_GetTick>
 8002cc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2319      	movs	r3, #25
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fbd7 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0d1      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2221      	movs	r2, #33	; 0x21
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a3a      	ldr	r2, [r7, #32]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d08:	88f8      	ldrh	r0, [r7, #6]
 8002d0a:	893a      	ldrh	r2, [r7, #8]
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4603      	mov	r3, r0
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fae7 	bl	80032ec <I2C_RequestMemoryWrite>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0a9      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2bff      	cmp	r3, #255	; 0xff
 8002d38:	d90e      	bls.n	8002d58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	22ff      	movs	r2, #255	; 0xff
 8002d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	8979      	ldrh	r1, [r7, #10]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fd3f 	bl	80037d4 <I2C_TransferConfig>
 8002d56:	e00f      	b.n	8002d78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	8979      	ldrh	r1, [r7, #10]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fd2e 	bl	80037d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fbc1 	bl	8003504 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e07b      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d034      	beq.n	8002e30 <HAL_I2C_Mem_Write+0x1c8>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d130      	bne.n	8002e30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fb53 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e04d      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2bff      	cmp	r3, #255	; 0xff
 8002df0:	d90e      	bls.n	8002e10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	8979      	ldrh	r1, [r7, #10]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fce3 	bl	80037d4 <I2C_TransferConfig>
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	8979      	ldrh	r1, [r7, #10]
 8002e22:	2300      	movs	r3, #0
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fcd2 	bl	80037d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d19e      	bne.n	8002d78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fba0 	bl	8003584 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01a      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2220      	movs	r2, #32
 8002e54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_I2C_Mem_Write+0x224>)
 8002e62:	400b      	ands	r3, r1
 8002e64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	fe00e800 	.word	0xfe00e800

08002e90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	817b      	strh	r3, [r7, #10]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	813b      	strh	r3, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	f040 80fd 	bne.w	80030b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_I2C_Mem_Read+0x34>
 8002ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0f1      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Mem_Read+0x4e>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e0ea      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee6:	f7ff f8db 	bl	80020a0 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2319      	movs	r3, #25
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fac3 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d5      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2222      	movs	r2, #34	; 0x22
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2240      	movs	r2, #64	; 0x40
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f30:	88f8      	ldrh	r0, [r7, #6]
 8002f32:	893a      	ldrh	r2, [r7, #8]
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4603      	mov	r3, r0
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fa27 	bl	8003394 <I2C_RequestMemoryRead>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0ad      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2bff      	cmp	r3, #255	; 0xff
 8002f60:	d90e      	bls.n	8002f80 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	22ff      	movs	r2, #255	; 0xff
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	8979      	ldrh	r1, [r7, #10]
 8002f70:	4b52      	ldr	r3, [pc, #328]	; (80030bc <HAL_I2C_Mem_Read+0x22c>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fc2b 	bl	80037d4 <I2C_TransferConfig>
 8002f7e:	e00f      	b.n	8002fa0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	8979      	ldrh	r1, [r7, #10]
 8002f92:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_I2C_Mem_Read+0x22c>)
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fc1a 	bl	80037d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2104      	movs	r1, #4
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fa6a 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07c      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d034      	beq.n	8003060 <HAL_I2C_Mem_Read+0x1d0>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d130      	bne.n	8003060 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	2200      	movs	r2, #0
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fa3b 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e04d      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2bff      	cmp	r3, #255	; 0xff
 8003020:	d90e      	bls.n	8003040 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	22ff      	movs	r2, #255	; 0xff
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	b2da      	uxtb	r2, r3
 800302e:	8979      	ldrh	r1, [r7, #10]
 8003030:	2300      	movs	r3, #0
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fbcb 	bl	80037d4 <I2C_TransferConfig>
 800303e:	e00f      	b.n	8003060 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	b2da      	uxtb	r2, r3
 8003050:	8979      	ldrh	r1, [r7, #10]
 8003052:	2300      	movs	r3, #0
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fbba 	bl	80037d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d19a      	bne.n	8002fa0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fa88 	bl	8003584 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e01a      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2220      	movs	r2, #32
 8003084:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_I2C_Mem_Read+0x230>)
 8003092:	400b      	ands	r3, r1
 8003094:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
  }
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	80002400 	.word	0x80002400
 80030c0:	fe00e800 	.word	0xfe00e800

080030c4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	460b      	mov	r3, r1
 80030d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	f040 80ef 	bne.w	80032c4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0e5      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_I2C_IsDeviceReady+0x44>
 8003104:	2302      	movs	r3, #2
 8003106:	e0de      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_I2C_IsDeviceReady+0x6e>
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_I2C_IsDeviceReady+0x20c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	e004      	b.n	800313c <HAL_I2C_IsDeviceReady+0x78>
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003138:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	6812      	ldr	r2, [r2, #0]
 8003140:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003142:	f7fe ffad 	bl	80020a0 <HAL_GetTick>
 8003146:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b10      	cmp	r3, #16
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003174:	e034      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d01a      	beq.n	80031b4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe ff8f 	bl	80020a0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <HAL_I2C_IsDeviceReady+0xd0>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10f      	bne.n	80031b4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f043 0220 	orr.w	r2, r3, #32
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e088      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b20      	cmp	r3, #32
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031e0:	7ffb      	ldrb	r3, [r7, #31]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_I2C_IsDeviceReady+0x128>
 80031e6:	7fbb      	ldrb	r3, [r7, #30]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0c4      	beq.n	8003176 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d01a      	beq.n	8003230 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2200      	movs	r2, #0
 8003202:	2120      	movs	r1, #32
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f93d 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e058      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2220      	movs	r2, #32
 800321a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e04a      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	2120      	movs	r1, #32
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f922 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e03d      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2210      	movs	r2, #16
 8003250:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2220      	movs	r2, #32
 8003258:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	d118      	bne.n	8003294 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003270:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2200      	movs	r2, #0
 800327a:	2120      	movs	r1, #32
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f901 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e01c      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2220      	movs	r2, #32
 8003292:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3301      	adds	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	f63f af3d 	bhi.w	800311e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	02002000 	.word	0x02002000

080032d4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	817b      	strh	r3, [r7, #10]
 80032fe:	460b      	mov	r3, r1
 8003300:	813b      	strh	r3, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <I2C_RequestMemoryWrite+0xa4>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fa5d 	bl	80037d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	69b9      	ldr	r1, [r7, #24]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f8f0 	bl	8003504 <I2C_WaitOnTXISFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e02c      	b.n	8003388 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003334:	893b      	ldrh	r3, [r7, #8]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
 800333e:	e015      	b.n	800336c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	b29b      	uxth	r3, r3
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	69b9      	ldr	r1, [r7, #24]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8d6 	bl	8003504 <I2C_WaitOnTXISFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e012      	b.n	8003388 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2200      	movs	r2, #0
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f884 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	80002000 	.word	0x80002000

08003394 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	460b      	mov	r3, r1
 80033a8:	813b      	strh	r3, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	8979      	ldrh	r1, [r7, #10]
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <I2C_RequestMemoryRead+0xa4>)
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fa0a 	bl	80037d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f89d 	bl	8003504 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e02c      	b.n	800342e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d105      	bne.n	80033e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033da:	893b      	ldrh	r3, [r7, #8]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
 80033e4:	e015      	b.n	8003412 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033e6:	893b      	ldrh	r3, [r7, #8]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	69b9      	ldr	r1, [r7, #24]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f883 	bl	8003504 <I2C_WaitOnTXISFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e012      	b.n	800342e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003408:	893b      	ldrh	r3, [r7, #8]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2200      	movs	r2, #0
 800341a:	2140      	movs	r1, #64	; 0x40
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f831 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	80002000 	.word	0x80002000

0800343c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d103      	bne.n	800345a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d007      	beq.n	8003478 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	619a      	str	r2, [r3, #24]
  }
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003494:	e022      	b.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349c:	d01e      	beq.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe fdff 	bl	80020a0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d113      	bne.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e00f      	b.n	80034fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d0cd      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003510:	e02c      	b.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f870 	bl	80035fc <I2C_IsErrorOccurred>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e02a      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352c:	d01e      	beq.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe fdb7 	bl	80020a0 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d113      	bne.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e007      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d1cb      	bne.n	8003512 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003590:	e028      	b.n	80035e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f830 	bl	80035fc <I2C_IsErrorOccurred>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e026      	b.n	80035f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe fd7b 	bl	80020a0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d113      	bne.n	80035e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e007      	b.n	80035f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d1cf      	bne.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d075      	beq.n	8003714 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2210      	movs	r2, #16
 800362e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003630:	e056      	b.n	80036e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003638:	d052      	beq.n	80036e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fe fd31 	bl	80020a0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <I2C_IsErrorOccurred+0x54>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d147      	bne.n	80036e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003662:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003672:	d12e      	bne.n	80036d2 <I2C_IsErrorOccurred+0xd6>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367a:	d02a      	beq.n	80036d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	2b20      	cmp	r3, #32
 8003680:	d027      	beq.n	80036d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003690:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003692:	f7fe fd05 	bl	80020a0 <HAL_GetTick>
 8003696:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003698:	e01b      	b.n	80036d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800369a:	f7fe fd01 	bl	80020a0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b19      	cmp	r3, #25
 80036a6:	d914      	bls.n	80036d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d1dc      	bne.n	800369a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d003      	beq.n	80036f6 <I2C_IsErrorOccurred+0xfa>
 80036ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d09d      	beq.n	8003632 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2220      	movs	r2, #32
 8003704:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f043 0308 	orr.w	r3, r3, #8
 800374e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01c      	beq.n	80037c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f7ff fe56 	bl	800343c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <I2C_IsErrorOccurred+0x1d4>)
 800379c:	400b      	ands	r3, r1
 800379e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3728      	adds	r7, #40	; 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	4613      	mov	r3, r2
 80037e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ec:	7a7b      	ldrb	r3, [r7, #9]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003802:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	0d5b      	lsrs	r3, r3, #21
 800380e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <I2C_TransferConfig+0x60>)
 8003814:	430b      	orrs	r3, r1
 8003816:	43db      	mvns	r3, r3
 8003818:	ea02 0103 	and.w	r1, r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	03ff63ff 	.word	0x03ff63ff

08003838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	d138      	bne.n	80038c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003858:	2302      	movs	r3, #2
 800385a:	e032      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800388a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d139      	bne.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e033      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2224      	movs	r2, #36	; 0x24
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003920:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003970:	2300      	movs	r3, #0
 8003972:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e291      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8087 	beq.w	8003a9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800398c:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b04      	cmp	r3, #4
 8003996:	d00c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003998:	4b93      	ldr	r3, [pc, #588]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d112      	bne.n	80039ca <HAL_RCC_OscConfig+0x62>
 80039a4:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b0:	d10b      	bne.n	80039ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b2:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d06c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x130>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d168      	bne.n	8003a98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e26b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x7a>
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a83      	ldr	r2, [pc, #524]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e02e      	b.n	8003a40 <HAL_RCC_OscConfig+0xd8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x9c>
 80039ea:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7e      	ldr	r2, [pc, #504]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7b      	ldr	r2, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e01d      	b.n	8003a40 <HAL_RCC_OscConfig+0xd8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a0e:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0xd8>
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6b      	ldr	r2, [pc, #428]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fb2a 	bl	80020a0 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe fb26 	bl	80020a0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e21f      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe fb16 	bl	80020a0 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fb12 	bl	80020a0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e20b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x110>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d069      	beq.n	8003b7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aa6:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab2:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d11c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x190>
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d116      	bne.n	8003af8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x17a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e1df      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	493d      	ldr	r1, [pc, #244]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	e040      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a38      	ldr	r2, [pc, #224]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fac8 	bl	80020a0 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fac4 	bl	80020a0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1bd      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4929      	ldr	r1, [pc, #164]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
 8003b46:	e018      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe faa4 	bl	80020a0 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe faa0 	bl	80020a0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e199      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d038      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d019      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b92:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fe fa81 	bl	80020a0 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fe fa7d 	bl	80020a0 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e176      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x23a>
 8003bc0:	e01a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe fa67 	bl	80020a0 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fa63 	bl	80020a0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d903      	bls.n	8003bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e15c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
 8003be8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b91      	ldr	r3, [pc, #580]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ee      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a4 	beq.w	8003d4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b8b      	ldr	r3, [pc, #556]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	4a87      	ldr	r2, [pc, #540]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2e:	4b82      	ldr	r3, [pc, #520]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d118      	bne.n	8003c6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c46:	f7fe fa2b 	bl	80020a0 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4e:	f7fe fa27 	bl	80020a0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b64      	cmp	r3, #100	; 0x64
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e120      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c60:	4b75      	ldr	r3, [pc, #468]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x31a>
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a6e      	ldr	r2, [pc, #440]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	e02d      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x33c>
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a69      	ldr	r2, [pc, #420]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a66      	ldr	r2, [pc, #408]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca2:	e01c      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x35e>
 8003cac:	4b61      	ldr	r3, [pc, #388]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a60      	ldr	r2, [pc, #384]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b5e      	ldr	r3, [pc, #376]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a5d      	ldr	r2, [pc, #372]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	e00b      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a5a      	ldr	r2, [pc, #360]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b58      	ldr	r3, [pc, #352]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a57      	ldr	r2, [pc, #348]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d015      	beq.n	8003d12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fe f9db 	bl	80020a0 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe f9d7 	bl	80020a0 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0ce      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ee      	beq.n	8003cee <HAL_RCC_OscConfig+0x386>
 8003d10:	e014      	b.n	8003d3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fe f9c5 	bl	80020a0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe f9c1 	bl	80020a0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0b8      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ee      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d42:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80a4 	beq.w	8003ea0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d58:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d06b      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d149      	bne.n	8003e00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fe f992 	bl	80020a0 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe f98e 	bl	80020a0 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e087      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe f962 	bl	80020a0 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fe f95e 	bl	80020a0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e057      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x478>
 8003dfe:	e04f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f948 	bl	80020a0 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe f944 	bl	80020a0 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e03d      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4ac>
 8003e32:	e035      	b.n	8003ea0 <HAL_RCC_OscConfig+0x538>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCC_OscConfig+0x544>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d028      	beq.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d121      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d11a      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d111      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0d0      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d910      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 020f 	bic.w	r2, r3, #15
 8003ede:	4965      	ldr	r1, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d040      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d115      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e073      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06b      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f023 0203 	bic.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4936      	ldr	r1, [pc, #216]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa4:	f7fe f87c 	bl	80020a0 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fac:	f7fe f878 	bl	80020a0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e053      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 020c 	and.w	r2, r3, #12
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1eb      	bne.n	8003fac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d210      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 020f 	bic.w	r2, r3, #15
 8003fea:	4922      	ldr	r1, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1cc>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1d0>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1d4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd ffd8 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	0800ffb8 	.word	0x0800ffb8
 8004080:	20000008 	.word	0x20000008
 8004084:	2000000c 	.word	0x2000000c

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800408e:	2100      	movs	r1, #0
 8004090:	6079      	str	r1, [r7, #4]
 8004092:	2100      	movs	r1, #0
 8004094:	60f9      	str	r1, [r7, #12]
 8004096:	2100      	movs	r1, #0
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800409a:	2100      	movs	r1, #0
 800409c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800409e:	4952      	ldr	r1, [pc, #328]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040a0:	6889      	ldr	r1, [r1, #8]
 80040a2:	f001 010c 	and.w	r1, r1, #12
 80040a6:	2908      	cmp	r1, #8
 80040a8:	d00d      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80040aa:	2908      	cmp	r1, #8
 80040ac:	f200 8094 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x150>
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d002      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0x32>
 80040b4:	2904      	cmp	r1, #4
 80040b6:	d003      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x38>
 80040b8:	e08e      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ba:	4b4c      	ldr	r3, [pc, #304]	; (80041ec <HAL_RCC_GetSysClockFreq+0x164>)
 80040bc:	60bb      	str	r3, [r7, #8]
      break;
 80040be:	e08e      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80040c2:	60bb      	str	r3, [r7, #8]
      break;
 80040c4:	e08b      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c6:	4948      	ldr	r1, [pc, #288]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040c8:	6849      	ldr	r1, [r1, #4]
 80040ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80040ce:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040d0:	4945      	ldr	r1, [pc, #276]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040d2:	6849      	ldr	r1, [r1, #4]
 80040d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80040d8:	2900      	cmp	r1, #0
 80040da:	d024      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040dc:	4942      	ldr	r1, [pc, #264]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040de:	6849      	ldr	r1, [r1, #4]
 80040e0:	0989      	lsrs	r1, r1, #6
 80040e2:	4608      	mov	r0, r1
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80040ec:	f04f 0500 	mov.w	r5, #0
 80040f0:	ea00 0204 	and.w	r2, r0, r4
 80040f4:	ea01 0305 	and.w	r3, r1, r5
 80040f8:	493d      	ldr	r1, [pc, #244]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80040fa:	fb01 f003 	mul.w	r0, r1, r3
 80040fe:	2100      	movs	r1, #0
 8004100:	fb01 f102 	mul.w	r1, r1, r2
 8004104:	1844      	adds	r4, r0, r1
 8004106:	493a      	ldr	r1, [pc, #232]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004108:	fba2 0101 	umull	r0, r1, r2, r1
 800410c:	1863      	adds	r3, r4, r1
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	f7fc fd56 	bl	8000bc8 <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e04a      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	ea02 0400 	and.w	r4, r2, r0
 800413e:	ea03 0501 	and.w	r5, r3, r1
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	014b      	lsls	r3, r1, #5
 8004150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004154:	0142      	lsls	r2, r0, #5
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	1b00      	subs	r0, r0, r4
 800415c:	eb61 0105 	sbc.w	r1, r1, r5
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	018b      	lsls	r3, r1, #6
 800416a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800416e:	0182      	lsls	r2, r0, #6
 8004170:	1a12      	subs	r2, r2, r0
 8004172:	eb63 0301 	sbc.w	r3, r3, r1
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	00d9      	lsls	r1, r3, #3
 8004180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004184:	00d0      	lsls	r0, r2, #3
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	1912      	adds	r2, r2, r4
 800418c:	eb45 0303 	adc.w	r3, r5, r3
 8004190:	f04f 0000 	mov.w	r0, #0
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	0299      	lsls	r1, r3, #10
 800419a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800419e:	0290      	lsls	r0, r2, #10
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f7fc fd0a 	bl	8000bc8 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	60bb      	str	r3, [r7, #8]
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <HAL_RCC_GetSysClockFreq+0x164>)
 80041da:	60bb      	str	r3, [r7, #8]
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	68bb      	ldr	r3, [r7, #8]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bdb0      	pop	{r4, r5, r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	00f42400 	.word	0x00f42400
 80041f0:	017d7840 	.word	0x017d7840

080041f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_GetHCLKFreq+0x14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000008 	.word	0x20000008

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004210:	f7ff fff0 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	0800ffc8 	.word	0x0800ffc8

08004234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004238:	f7ff ffdc 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0b5b      	lsrs	r3, r3, #13
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	0800ffc8 	.word	0x0800ffc8

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004284:	4b69      	ldr	r3, [pc, #420]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a68      	ldr	r2, [pc, #416]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800428e:	6093      	str	r3, [r2, #8]
 8004290:	4b66      	ldr	r3, [pc, #408]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	4964      	ldr	r1, [pc, #400]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d017      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b6:	4b5d      	ldr	r3, [pc, #372]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	4959      	ldr	r1, [pc, #356]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d017      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042f2:	4b4e      	ldr	r3, [pc, #312]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	494a      	ldr	r1, [pc, #296]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004310:	d101      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800431e:	2301      	movs	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 808b 	beq.w	8004456 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004340:	4b3a      	ldr	r3, [pc, #232]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	4a39      	ldr	r2, [pc, #228]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434a:	6413      	str	r3, [r2, #64]	; 0x40
 800434c:	4b37      	ldr	r3, [pc, #220]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004358:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a34      	ldr	r2, [pc, #208]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800435e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004364:	f7fd fe9c 	bl	80020a0 <HAL_GetTick>
 8004368:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800436a:	e008      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436c:	f7fd fe98 	bl	80020a0 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e357      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800437e:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438a:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d035      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d02e      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b2:	4b1e      	ldr	r3, [pc, #120]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043d0:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d114      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fe60 	bl	80020a0 <HAL_GetTick>
 80043e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fd fe5c 	bl	80020a0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e319      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0ee      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004412:	d111      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004422:	400b      	ands	r3, r1
 8004424:	4901      	ldr	r1, [pc, #4]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
 800442a:	e00b      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800442c:	40023800 	.word	0x40023800
 8004430:	40007000 	.word	0x40007000
 8004434:	0ffffcff 	.word	0x0ffffcff
 8004438:	4bb1      	ldr	r3, [pc, #708]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4ab0      	ldr	r2, [pc, #704]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800443e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004442:	6093      	str	r3, [r2, #8]
 8004444:	4bae      	ldr	r3, [pc, #696]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004446:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004450:	49ab      	ldr	r1, [pc, #684]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d010      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004462:	4ba7      	ldr	r3, [pc, #668]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004468:	4aa5      	ldr	r2, [pc, #660]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800446a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004472:	4ba3      	ldr	r3, [pc, #652]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004474:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	49a0      	ldr	r1, [pc, #640]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004490:	4b9b      	ldr	r3, [pc, #620]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449e:	4998      	ldr	r1, [pc, #608]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b2:	4b93      	ldr	r3, [pc, #588]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c0:	498f      	ldr	r1, [pc, #572]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044d4:	4b8a      	ldr	r3, [pc, #552]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e2:	4987      	ldr	r1, [pc, #540]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044f6:	4b82      	ldr	r3, [pc, #520]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	497e      	ldr	r1, [pc, #504]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004518:	4b79      	ldr	r3, [pc, #484]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	4976      	ldr	r1, [pc, #472]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800453a:	4b71      	ldr	r3, [pc, #452]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f023 020c 	bic.w	r2, r3, #12
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	496d      	ldr	r1, [pc, #436]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800455c:	4b68      	ldr	r3, [pc, #416]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004562:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	4965      	ldr	r1, [pc, #404]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800457e:	4b60      	ldr	r3, [pc, #384]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	495c      	ldr	r1, [pc, #368]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045a0:	4b57      	ldr	r3, [pc, #348]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	4954      	ldr	r1, [pc, #336]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045c2:	4b4f      	ldr	r3, [pc, #316]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	494b      	ldr	r1, [pc, #300]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045e4:	4b46      	ldr	r3, [pc, #280]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	4943      	ldr	r1, [pc, #268]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004606:	4b3e      	ldr	r3, [pc, #248]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004614:	493a      	ldr	r1, [pc, #232]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004636:	4932      	ldr	r1, [pc, #200]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d011      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800464a:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004658:	4929      	ldr	r1, [pc, #164]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004668:	d101      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800466a:	2301      	movs	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800467a:	2301      	movs	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004698:	4919      	ldr	r1, [pc, #100]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046ac:	4b14      	ldr	r3, [pc, #80]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046bc:	4910      	ldr	r1, [pc, #64]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d006      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80d9 	beq.w	800488a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e4:	f7fd fcdc 	bl	80020a0 <HAL_GetTick>
 80046e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ea:	e00b      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046ec:	f7fd fcd8 	bl	80020a0 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d904      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e197      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ed      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d021      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11d      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004724:	4b64      	ldr	r3, [pc, #400]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472a:	0c1b      	lsrs	r3, r3, #16
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004732:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004738:	0e1b      	lsrs	r3, r3, #24
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	019a      	lsls	r2, r3, #6
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	431a      	orrs	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	071b      	lsls	r3, r3, #28
 8004758:	4957      	ldr	r1, [pc, #348]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d02e      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478a:	d129      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800478c:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004792:	0c1b      	lsrs	r3, r3, #16
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a0:	0f1b      	lsrs	r3, r3, #28
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	019a      	lsls	r2, r3, #6
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	431a      	orrs	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	071b      	lsls	r3, r3, #28
 80047c0:	493d      	ldr	r1, [pc, #244]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047c8:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ce:	f023 021f 	bic.w	r2, r3, #31
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	3b01      	subs	r3, #1
 80047d8:	4937      	ldr	r1, [pc, #220]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01d      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ec:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004800:	0f1b      	lsrs	r3, r3, #28
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	019a      	lsls	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	041b      	lsls	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	431a      	orrs	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	071b      	lsls	r3, r3, #28
 8004820:	4925      	ldr	r1, [pc, #148]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d011      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	019a      	lsls	r2, r3, #6
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	071b      	lsls	r3, r3, #28
 8004850:	4919      	ldr	r1, [pc, #100]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004858:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004864:	f7fd fc1c 	bl	80020a0 <HAL_GetTick>
 8004868:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800486c:	f7fd fc18 	bl	80020a0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e0d7      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b01      	cmp	r3, #1
 800488e:	f040 80cd 	bne.w	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489e:	f7fd fbff 	bl	80020a0 <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048a4:	e00a      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048a6:	f7fd fbfb 	bl	80020a0 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b64      	cmp	r3, #100	; 0x64
 80048b2:	d903      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e0ba      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80048b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048bc:	4b5e      	ldr	r3, [pc, #376]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c8:	d0ed      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d02e      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d12a      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048f2:	4b51      	ldr	r3, [pc, #324]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004900:	4b4d      	ldr	r3, [pc, #308]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	0f1b      	lsrs	r3, r3, #28
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	019a      	lsls	r2, r3, #6
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	061b      	lsls	r3, r3, #24
 8004920:	431a      	orrs	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	071b      	lsls	r3, r3, #28
 8004926:	4944      	ldr	r1, [pc, #272]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800492e:	4b42      	ldr	r3, [pc, #264]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004934:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	493d      	ldr	r1, [pc, #244]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d022      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800495c:	d11d      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800495e:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800496c:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	0f1b      	lsrs	r3, r3, #28
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	019a      	lsls	r2, r3, #6
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	4929      	ldr	r1, [pc, #164]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d028      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	0e1b      	lsrs	r3, r3, #24
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049b4:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	f003 0303 	and.w	r3, r3, #3
 80049c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	019a      	lsls	r2, r3, #6
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	061b      	lsls	r3, r3, #24
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	071b      	lsls	r3, r3, #28
 80049da:	4917      	ldr	r1, [pc, #92]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	4911      	ldr	r1, [pc, #68]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0e      	ldr	r2, [pc, #56]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a04:	f7fd fb4c 	bl	80020a0 <HAL_GetTick>
 8004a08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a0c:	f7fd fb48 	bl	80020a0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e007      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a2a:	d1ef      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800

08004a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e040      	b.n	8004ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd f932 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2224      	movs	r2, #36	; 0x24
 8004a68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8c0 	bl	8004c00 <UART_SetConfig>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e022      	b.n	8004ad0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fb16 	bl	80050c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fb9d 	bl	8005208 <UART_CheckIdleState>
 8004ace:	4603      	mov	r3, r0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	f040 8081 	bne.w	8004bf4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_UART_Transmit+0x26>
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e079      	b.n	8004bf6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_UART_Transmit+0x38>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e072      	b.n	8004bf6 <HAL_UART_Transmit+0x11e>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2221      	movs	r2, #33	; 0x21
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b26:	f7fd fabb 	bl	80020a0 <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d108      	bne.n	8004b58 <HAL_UART_Transmit+0x80>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e003      	b.n	8004b60 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b68:	e02c      	b.n	8004bc4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fb7a 	bl	800526e <UART_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e038      	b.n	8004bf6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e007      	b.n	8004bb2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1cc      	bne.n	8004b6a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2140      	movs	r1, #64	; 0x40
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fb47 	bl	800526e <UART_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e005      	b.n	8004bf6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e000      	b.n	8004bf6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004bf4:	2302      	movs	r3, #2
  }
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4ba7      	ldr	r3, [pc, #668]	; (8004ec8 <UART_SetConfig+0x2c8>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a95      	ldr	r2, [pc, #596]	; (8004ecc <UART_SetConfig+0x2cc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d120      	bne.n	8004cbe <UART_SetConfig+0xbe>
 8004c7c:	4b94      	ldr	r3, [pc, #592]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d816      	bhi.n	8004cb8 <UART_SetConfig+0xb8>
 8004c8a:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x90>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004ca1 	.word	0x08004ca1
 8004c94:	08004cad 	.word	0x08004cad
 8004c98:	08004ca7 	.word	0x08004ca7
 8004c9c:	08004cb3 	.word	0x08004cb3
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e14f      	b.n	8004f46 <UART_SetConfig+0x346>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e14c      	b.n	8004f46 <UART_SetConfig+0x346>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e149      	b.n	8004f46 <UART_SetConfig+0x346>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e146      	b.n	8004f46 <UART_SetConfig+0x346>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e143      	b.n	8004f46 <UART_SetConfig+0x346>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a84      	ldr	r2, [pc, #528]	; (8004ed4 <UART_SetConfig+0x2d4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d132      	bne.n	8004d2e <UART_SetConfig+0x12e>
 8004cc8:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d828      	bhi.n	8004d28 <UART_SetConfig+0x128>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0xdc>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d11 	.word	0x08004d11
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d29 	.word	0x08004d29
 8004ce8:	08004d29 	.word	0x08004d29
 8004cec:	08004d1d 	.word	0x08004d1d
 8004cf0:	08004d29 	.word	0x08004d29
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d17 	.word	0x08004d17
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d29 	.word	0x08004d29
 8004d0c:	08004d23 	.word	0x08004d23
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e117      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d16:	2302      	movs	r3, #2
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e114      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e111      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d22:	2308      	movs	r3, #8
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e10e      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e10b      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a69      	ldr	r2, [pc, #420]	; (8004ed8 <UART_SetConfig+0x2d8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d120      	bne.n	8004d7a <UART_SetConfig+0x17a>
 8004d38:	4b65      	ldr	r3, [pc, #404]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d42:	2b30      	cmp	r3, #48	; 0x30
 8004d44:	d013      	beq.n	8004d6e <UART_SetConfig+0x16e>
 8004d46:	2b30      	cmp	r3, #48	; 0x30
 8004d48:	d814      	bhi.n	8004d74 <UART_SetConfig+0x174>
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d009      	beq.n	8004d62 <UART_SetConfig+0x162>
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d810      	bhi.n	8004d74 <UART_SetConfig+0x174>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <UART_SetConfig+0x15c>
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d006      	beq.n	8004d68 <UART_SetConfig+0x168>
 8004d5a:	e00b      	b.n	8004d74 <UART_SetConfig+0x174>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e0f1      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d62:	2302      	movs	r3, #2
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e0ee      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e0eb      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d6e:	2308      	movs	r3, #8
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e0e8      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d74:	2310      	movs	r3, #16
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e0e5      	b.n	8004f46 <UART_SetConfig+0x346>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a57      	ldr	r2, [pc, #348]	; (8004edc <UART_SetConfig+0x2dc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d120      	bne.n	8004dc6 <UART_SetConfig+0x1c6>
 8004d84:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d90:	d013      	beq.n	8004dba <UART_SetConfig+0x1ba>
 8004d92:	2bc0      	cmp	r3, #192	; 0xc0
 8004d94:	d814      	bhi.n	8004dc0 <UART_SetConfig+0x1c0>
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d009      	beq.n	8004dae <UART_SetConfig+0x1ae>
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	d810      	bhi.n	8004dc0 <UART_SetConfig+0x1c0>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <UART_SetConfig+0x1a8>
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d006      	beq.n	8004db4 <UART_SetConfig+0x1b4>
 8004da6:	e00b      	b.n	8004dc0 <UART_SetConfig+0x1c0>
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e0cb      	b.n	8004f46 <UART_SetConfig+0x346>
 8004dae:	2302      	movs	r3, #2
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e0c8      	b.n	8004f46 <UART_SetConfig+0x346>
 8004db4:	2304      	movs	r3, #4
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e0c5      	b.n	8004f46 <UART_SetConfig+0x346>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e0c2      	b.n	8004f46 <UART_SetConfig+0x346>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e0bf      	b.n	8004f46 <UART_SetConfig+0x346>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a45      	ldr	r2, [pc, #276]	; (8004ee0 <UART_SetConfig+0x2e0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d125      	bne.n	8004e1c <UART_SetConfig+0x21c>
 8004dd0:	4b3f      	ldr	r3, [pc, #252]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dde:	d017      	beq.n	8004e10 <UART_SetConfig+0x210>
 8004de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de4:	d817      	bhi.n	8004e16 <UART_SetConfig+0x216>
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dea:	d00b      	beq.n	8004e04 <UART_SetConfig+0x204>
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df0:	d811      	bhi.n	8004e16 <UART_SetConfig+0x216>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <UART_SetConfig+0x1fe>
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d006      	beq.n	8004e0a <UART_SetConfig+0x20a>
 8004dfc:	e00b      	b.n	8004e16 <UART_SetConfig+0x216>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e0a0      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e04:	2302      	movs	r3, #2
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e09d      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e09a      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e10:	2308      	movs	r3, #8
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e097      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e16:	2310      	movs	r3, #16
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e094      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <UART_SetConfig+0x2e4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d125      	bne.n	8004e72 <UART_SetConfig+0x272>
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e34:	d017      	beq.n	8004e66 <UART_SetConfig+0x266>
 8004e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e3a:	d817      	bhi.n	8004e6c <UART_SetConfig+0x26c>
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e40:	d00b      	beq.n	8004e5a <UART_SetConfig+0x25a>
 8004e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e46:	d811      	bhi.n	8004e6c <UART_SetConfig+0x26c>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <UART_SetConfig+0x254>
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e50:	d006      	beq.n	8004e60 <UART_SetConfig+0x260>
 8004e52:	e00b      	b.n	8004e6c <UART_SetConfig+0x26c>
 8004e54:	2301      	movs	r3, #1
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e075      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e072      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e60:	2304      	movs	r3, #4
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e06f      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e66:	2308      	movs	r3, #8
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e06c      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e069      	b.n	8004f46 <UART_SetConfig+0x346>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1c      	ldr	r2, [pc, #112]	; (8004ee8 <UART_SetConfig+0x2e8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d137      	bne.n	8004eec <UART_SetConfig+0x2ec>
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <UART_SetConfig+0x2d0>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e8a:	d017      	beq.n	8004ebc <UART_SetConfig+0x2bc>
 8004e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e90:	d817      	bhi.n	8004ec2 <UART_SetConfig+0x2c2>
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e96:	d00b      	beq.n	8004eb0 <UART_SetConfig+0x2b0>
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9c:	d811      	bhi.n	8004ec2 <UART_SetConfig+0x2c2>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <UART_SetConfig+0x2aa>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea6:	d006      	beq.n	8004eb6 <UART_SetConfig+0x2b6>
 8004ea8:	e00b      	b.n	8004ec2 <UART_SetConfig+0x2c2>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e04a      	b.n	8004f46 <UART_SetConfig+0x346>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e047      	b.n	8004f46 <UART_SetConfig+0x346>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e044      	b.n	8004f46 <UART_SetConfig+0x346>
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e041      	b.n	8004f46 <UART_SetConfig+0x346>
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	77fb      	strb	r3, [r7, #31]
 8004ec6:	e03e      	b.n	8004f46 <UART_SetConfig+0x346>
 8004ec8:	efff69f3 	.word	0xefff69f3
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40004400 	.word	0x40004400
 8004ed8:	40004800 	.word	0x40004800
 8004edc:	40004c00 	.word	0x40004c00
 8004ee0:	40005000 	.word	0x40005000
 8004ee4:	40011400 	.word	0x40011400
 8004ee8:	40007800 	.word	0x40007800
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a71      	ldr	r2, [pc, #452]	; (80050b8 <UART_SetConfig+0x4b8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d125      	bne.n	8004f42 <UART_SetConfig+0x342>
 8004ef6:	4b71      	ldr	r3, [pc, #452]	; (80050bc <UART_SetConfig+0x4bc>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f04:	d017      	beq.n	8004f36 <UART_SetConfig+0x336>
 8004f06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f0a:	d817      	bhi.n	8004f3c <UART_SetConfig+0x33c>
 8004f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f10:	d00b      	beq.n	8004f2a <UART_SetConfig+0x32a>
 8004f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f16:	d811      	bhi.n	8004f3c <UART_SetConfig+0x33c>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <UART_SetConfig+0x324>
 8004f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f20:	d006      	beq.n	8004f30 <UART_SetConfig+0x330>
 8004f22:	e00b      	b.n	8004f3c <UART_SetConfig+0x33c>
 8004f24:	2300      	movs	r3, #0
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e00d      	b.n	8004f46 <UART_SetConfig+0x346>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e00a      	b.n	8004f46 <UART_SetConfig+0x346>
 8004f30:	2304      	movs	r3, #4
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e007      	b.n	8004f46 <UART_SetConfig+0x346>
 8004f36:	2308      	movs	r3, #8
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e004      	b.n	8004f46 <UART_SetConfig+0x346>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e001      	b.n	8004f46 <UART_SetConfig+0x346>
 8004f42:	2310      	movs	r3, #16
 8004f44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4e:	d15a      	bne.n	8005006 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d827      	bhi.n	8004fa6 <UART_SetConfig+0x3a6>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <UART_SetConfig+0x35c>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	08004f91 	.word	0x08004f91
 8004f68:	08004fa7 	.word	0x08004fa7
 8004f6c:	08004f97 	.word	0x08004f97
 8004f70:	08004fa7 	.word	0x08004fa7
 8004f74:	08004fa7 	.word	0x08004fa7
 8004f78:	08004fa7 	.word	0x08004fa7
 8004f7c:	08004f9f 	.word	0x08004f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f80:	f7ff f944 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 8004f84:	61b8      	str	r0, [r7, #24]
        break;
 8004f86:	e013      	b.n	8004fb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f88:	f7ff f954 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8004f8c:	61b8      	str	r0, [r7, #24]
        break;
 8004f8e:	e00f      	b.n	8004fb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f90:	4b4b      	ldr	r3, [pc, #300]	; (80050c0 <UART_SetConfig+0x4c0>)
 8004f92:	61bb      	str	r3, [r7, #24]
        break;
 8004f94:	e00c      	b.n	8004fb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f96:	f7ff f877 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004f9a:	61b8      	str	r0, [r7, #24]
        break;
 8004f9c:	e008      	b.n	8004fb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa2:	61bb      	str	r3, [r7, #24]
        break;
 8004fa4:	e004      	b.n	8004fb0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	77bb      	strb	r3, [r7, #30]
        break;
 8004fae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d074      	beq.n	80050a0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	005a      	lsls	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	d916      	bls.n	8005000 <UART_SetConfig+0x400>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d212      	bcs.n	8005000 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f023 030f 	bic.w	r3, r3, #15
 8004fe2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	89fb      	ldrh	r3, [r7, #14]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	89fa      	ldrh	r2, [r7, #14]
 8004ffc:	60da      	str	r2, [r3, #12]
 8004ffe:	e04f      	b.n	80050a0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	77bb      	strb	r3, [r7, #30]
 8005004:	e04c      	b.n	80050a0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005006:	7ffb      	ldrb	r3, [r7, #31]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d828      	bhi.n	800505e <UART_SetConfig+0x45e>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x414>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	0800505f 	.word	0x0800505f
 8005024:	0800504f 	.word	0x0800504f
 8005028:	0800505f 	.word	0x0800505f
 800502c:	0800505f 	.word	0x0800505f
 8005030:	0800505f 	.word	0x0800505f
 8005034:	08005057 	.word	0x08005057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7ff f8e8 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 800503c:	61b8      	str	r0, [r7, #24]
        break;
 800503e:	e013      	b.n	8005068 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005040:	f7ff f8f8 	bl	8004234 <HAL_RCC_GetPCLK2Freq>
 8005044:	61b8      	str	r0, [r7, #24]
        break;
 8005046:	e00f      	b.n	8005068 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <UART_SetConfig+0x4c0>)
 800504a:	61bb      	str	r3, [r7, #24]
        break;
 800504c:	e00c      	b.n	8005068 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504e:	f7ff f81b 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8005052:	61b8      	str	r0, [r7, #24]
        break;
 8005054:	e008      	b.n	8005068 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505a:	61bb      	str	r3, [r7, #24]
        break;
 800505c:	e004      	b.n	8005068 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	77bb      	strb	r3, [r7, #30]
        break;
 8005066:	bf00      	nop
    }

    if (pclk != 0U)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	085a      	lsrs	r2, r3, #1
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	441a      	add	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b0f      	cmp	r3, #15
 8005086:	d909      	bls.n	800509c <UART_SetConfig+0x49c>
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508e:	d205      	bcs.n	800509c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	e001      	b.n	80050a0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40007c00 	.word	0x40007c00
 80050bc:	40023800 	.word	0x40023800
 80050c0:	00f42400 	.word	0x00f42400

080050c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01a      	beq.n	80051da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c2:	d10a      	bne.n	80051da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af02      	add	r7, sp, #8
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005218:	f7fc ff42 	bl	80020a0 <HAL_GetTick>
 800521c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b08      	cmp	r3, #8
 800522a:	d10e      	bne.n	800524a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800522c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f817 	bl	800526e <UART_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e00d      	b.n	8005266 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b09c      	sub	sp, #112	; 0x70
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527e:	e0a5      	b.n	80053cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005286:	f000 80a1 	beq.w	80053cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528a:	f7fc ff09 	bl	80020a0 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005296:	429a      	cmp	r2, r3
 8005298:	d302      	bcc.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800529a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800529c:	2b00      	cmp	r3, #0
 800529e:	d13e      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052b4:	667b      	str	r3, [r7, #100]	; 0x64
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e6      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	663b      	str	r3, [r7, #96]	; 0x60
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80052f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e5      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e067      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d04f      	beq.n	80053cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533a:	d147      	bne.n	80053cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005344:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800535a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
 8005366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800536a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3308      	adds	r3, #8
 800537e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	613b      	str	r3, [r7, #16]
   return(result);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005398:	623a      	str	r2, [r7, #32]
 800539a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	69f9      	ldr	r1, [r7, #28]
 800539e:	6a3a      	ldr	r2, [r7, #32]
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e5      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e010      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	f43f af4a 	beq.w	8005280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3770      	adds	r7, #112	; 0x70
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <MX_I2C2_Init2>:
#define   hbus_i2c2 hi2c1
#include "stdio.h"
extern I2C_HandleTypeDef hi2c1;

void MX_I2C2_Init2(void)
 {
 80053f6:	b480      	push	{r7}
 80053f8:	af00      	add	r7, sp, #0
   } */
   /* USER CODE BEGIN I2C2_Init 2 */

   /* USER CODE END I2C2_Init 2 */

 }
 80053fa:	bf00      	nop
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <BSP_I2C2_DeInit>:

 int32_t BSP_I2C2_DeInit(void)
 {
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
   int32_t ret = BSP_ERROR_NONE;
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
     if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
     {
       ret = BSP_ERROR_BUS_FAILURE;
     }
   }*/
   return ret;
 800540e:	687b      	ldr	r3, [r7, #4]
 }
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <BSP_I2C2_IsReady>:

 int32_t BSP_I2C2_IsReady(uint16_t DevAddr, uint32_t Trials)
 {
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	80fb      	strh	r3, [r7, #6]
   int32_t ret = BSP_ERROR_NONE;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

   if (HAL_I2C_IsDeviceReady(&hbus_i2c2, DevAddr, Trials, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800542c:	88f9      	ldrh	r1, [r7, #6]
 800542e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	4806      	ldr	r0, [pc, #24]	; (8005450 <BSP_I2C2_IsReady+0x34>)
 8005436:	f7fd fe45 	bl	80030c4 <HAL_I2C_IsDeviceReady>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <BSP_I2C2_IsReady+0x2a>
   {
     ret = BSP_ERROR_BUSY;
 8005440:	f06f 0302 	mvn.w	r3, #2
 8005444:	60fb      	str	r3, [r7, #12]
   }

   return ret;
 8005446:	68fb      	ldr	r3, [r7, #12]
 }
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20002238 	.word	0x20002238

08005454 <BSP_I2C2_WriteReg16>:

 int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
 {
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	; 0x28
 8005458:	af04      	add	r7, sp, #16
 800545a:	60ba      	str	r2, [r7, #8]
 800545c:	461a      	mov	r2, r3
 800545e:	4603      	mov	r3, r0
 8005460:	81fb      	strh	r3, [r7, #14]
 8005462:	460b      	mov	r3, r1
 8005464:	81bb      	strh	r3, [r7, #12]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
   int32_t ret = BSP_ERROR_NONE;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

   if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT,
 800546e:	89ba      	ldrh	r2, [r7, #12]
 8005470:	89f9      	ldrh	r1, [r7, #14]
 8005472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005476:	9302      	str	r3, [sp, #8]
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2302      	movs	r3, #2
 8005482:	480c      	ldr	r0, [pc, #48]	; (80054b4 <BSP_I2C2_WriteReg16+0x60>)
 8005484:	f7fd fbf0 	bl	8002c68 <HAL_I2C_Mem_Write>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <BSP_I2C2_WriteReg16+0x54>
                               pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
   {
     if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 800548e:	4809      	ldr	r0, [pc, #36]	; (80054b4 <BSP_I2C2_WriteReg16+0x60>)
 8005490:	f7fd ff20 	bl	80032d4 <HAL_I2C_GetError>
 8005494:	4603      	mov	r3, r0
 8005496:	2b04      	cmp	r3, #4
 8005498:	d103      	bne.n	80054a2 <BSP_I2C2_WriteReg16+0x4e>
     {
       ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800549a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e002      	b.n	80054a8 <BSP_I2C2_WriteReg16+0x54>
     }
     else
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 80054a2:	f06f 0303 	mvn.w	r3, #3
 80054a6:	617b      	str	r3, [r7, #20]
     }
   }
   return ret;
 80054a8:	697b      	ldr	r3, [r7, #20]
 }
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20002238 	.word	0x20002238

080054b8 <BSP_I2C2_ReadReg16>:

 int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
 {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af04      	add	r7, sp, #16
 80054be:	60ba      	str	r2, [r7, #8]
 80054c0:	461a      	mov	r2, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	81fb      	strh	r3, [r7, #14]
 80054c6:	460b      	mov	r3, r1
 80054c8:	81bb      	strh	r3, [r7, #12]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
   int32_t ret = BSP_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]

   if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80054d2:	89ba      	ldrh	r2, [r7, #12]
 80054d4:	89f9      	ldrh	r1, [r7, #14]
 80054d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	2302      	movs	r3, #2
 80054e6:	480c      	ldr	r0, [pc, #48]	; (8005518 <BSP_I2C2_ReadReg16+0x60>)
 80054e8:	f7fd fcd2 	bl	8002e90 <HAL_I2C_Mem_Read>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00c      	beq.n	800550c <BSP_I2C2_ReadReg16+0x54>
   {
     if (HAL_I2C_GetError(&hbus_i2c2) != HAL_I2C_ERROR_AF)
 80054f2:	4809      	ldr	r0, [pc, #36]	; (8005518 <BSP_I2C2_ReadReg16+0x60>)
 80054f4:	f7fd feee 	bl	80032d4 <HAL_I2C_GetError>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <BSP_I2C2_ReadReg16+0x4e>
     {
       ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80054fe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e002      	b.n	800550c <BSP_I2C2_ReadReg16+0x54>
     }
     else
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 8005506:	f06f 0303 	mvn.w	r3, #3
 800550a:	617b      	str	r3, [r7, #20]
     }
   }
   return ret;
 800550c:	697b      	ldr	r3, [r7, #20]
 }
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20002238 	.word	0x20002238

0800551c <BSP_GetTick>:

 int32_t BSP_GetTick(void)
 {
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
   return (int32_t)HAL_GetTick();
 8005520:	f7fc fdbe 	bl	80020a0 <HAL_GetTick>
 8005524:	4603      	mov	r3, r0
 }
 8005526:	4618      	mov	r0, r3
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <BSP_NFCTAG_Init>:
 /**
   * @brief  Initializes peripherals used by the I2C NFCTAG driver.
   * @return NFCTAG_StatusTypeDef enum status.
   */
 int32_t BSP_NFCTAG_Init(uint32_t Instance)
 {
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
   int32_t status;
   ST25DV_IO_t IO;
   UNUSED(Instance);

   /* Configure the component */
   IO.Init         =(ST25DV_Init_Func)MX_I2C2_Init2;
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <BSP_NFCTAG_Init+0x80>)
 8005536:	60fb      	str	r3, [r7, #12]
   IO.DeInit       = BSP_I2C2_DeInit;
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <BSP_NFCTAG_Init+0x84>)
 800553a:	613b      	str	r3, [r7, #16]
   IO.IsReady      = BSP_I2C2_IsReady;
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <BSP_NFCTAG_Init+0x88>)
 800553e:	617b      	str	r3, [r7, #20]
   IO.Read         = BSP_I2C2_ReadReg16;
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <BSP_NFCTAG_Init+0x8c>)
 8005542:	61fb      	str	r3, [r7, #28]
   IO.Write        = (ST25DV_Write_Func)BSP_I2C2_WriteReg16;
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <BSP_NFCTAG_Init+0x90>)
 8005546:	61bb      	str	r3, [r7, #24]
   IO.GetTick      = BSP_GetTick;
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <BSP_NFCTAG_Init+0x94>)
 800554a:	623b      	str	r3, [r7, #32]

   status = ST25DV_RegisterBusIO (&NfcTagObj, &IO);
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	4619      	mov	r1, r3
 8005552:	481c      	ldr	r0, [pc, #112]	; (80055c4 <BSP_NFCTAG_Init+0x98>)
 8005554:	f000 f956 	bl	8005804 <ST25DV_RegisterBusIO>
 8005558:	6278      	str	r0, [r7, #36]	; 0x24
   if (status != NFCTAG_OK)
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <BSP_NFCTAG_Init+0x3a>
     return NFCTAG_ERROR;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005564:	e01d      	b.n	80055a2 <BSP_NFCTAG_Init+0x76>

   Nfctag_Drv = (NFCTAG_DrvTypeDef *)(void *)&St25Dv_Drv;
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <BSP_NFCTAG_Init+0x9c>)
 8005568:	4a18      	ldr	r2, [pc, #96]	; (80055cc <BSP_NFCTAG_Init+0xa0>)
 800556a:	601a      	str	r2, [r3, #0]
   if (Nfctag_Drv->Init != NULL)
 800556c:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <BSP_NFCTAG_Init+0x9c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <BSP_NFCTAG_Init+0x68>
   {
     status = Nfctag_Drv->Init(&NfcTagObj);
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <BSP_NFCTAG_Init+0x9c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4811      	ldr	r0, [pc, #68]	; (80055c4 <BSP_NFCTAG_Init+0x98>)
 800557e:	4798      	blx	r3
 8005580:	6278      	str	r0, [r7, #36]	; 0x24
     if (status != NFCTAG_OK)
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <BSP_NFCTAG_Init+0x74>
     {
       Nfctag_Drv = NULL;
 8005588:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <BSP_NFCTAG_Init+0x9c>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
       return NFCTAG_ERROR;
 800558e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005592:	e006      	b.n	80055a2 <BSP_NFCTAG_Init+0x76>
     }
   }
   else
   {
     Nfctag_Drv = NULL;
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <BSP_NFCTAG_Init+0x9c>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
     return NFCTAG_ERROR;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800559e:	e000      	b.n	80055a2 <BSP_NFCTAG_Init+0x76>
   }
   return NFCTAG_OK;
 80055a0:	2300      	movs	r3, #0
 }
 80055a2:	4618      	mov	r0, r3
 80055a4:	3728      	adds	r7, #40	; 0x28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	080053f7 	.word	0x080053f7
 80055b0:	08005405 	.word	0x08005405
 80055b4:	0800541d 	.word	0x0800541d
 80055b8:	080054b9 	.word	0x080054b9
 80055bc:	08005455 	.word	0x08005455
 80055c0:	0800551d 	.word	0x0800551d
 80055c4:	2000210c 	.word	0x2000210c
 80055c8:	20002108 	.word	0x20002108
 80055cc:	20000014 	.word	0x20000014

080055d0 <BSP_NFCTAG_IsDeviceReady>:
   * @brief  Checks if the nfctag is available.
   * @param  Trials Number of trials.
   * @return NFCTAG_StatusTypeDef enum status.
   */
 int32_t BSP_NFCTAG_IsDeviceReady(uint32_t Instance, const uint32_t Trials)
 {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
   UNUSED(Instance);
   if (Nfctag_Drv->IsReady == NULL)
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <BSP_NFCTAG_IsDeviceReady+0x30>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <BSP_NFCTAG_IsDeviceReady+0x1a>
   {
     return NFCTAG_ERROR;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055e8:	e006      	b.n	80055f8 <BSP_NFCTAG_IsDeviceReady+0x28>
   }

   return Nfctag_Drv->IsReady(&NfcTagObj, Trials);
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <BSP_NFCTAG_IsDeviceReady+0x30>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	4804      	ldr	r0, [pc, #16]	; (8005604 <BSP_NFCTAG_IsDeviceReady+0x34>)
 80055f4:	4798      	blx	r3
 80055f6:	4603      	mov	r3, r0
 }
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20002108 	.word	0x20002108
 8005604:	2000210c 	.word	0x2000210c

08005608 <BSP_NFCTAG_ConfigIT>:
   *           - 0x20 => RF_GET_MSG
   *           - 0x40 => RF_WRITE
   * @return NFCTAG_StatusTypeDef enum status.
   */
 int32_t BSP_NFCTAG_ConfigIT(uint32_t Instance, const uint16_t ITConfig)
 {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	807b      	strh	r3, [r7, #2]
   UNUSED(Instance);
   if (Nfctag_Drv->ConfigIT == NULL)
 8005614:	4b09      	ldr	r3, [pc, #36]	; (800563c <BSP_NFCTAG_ConfigIT+0x34>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <BSP_NFCTAG_ConfigIT+0x1c>
   {
     return NFCTAG_ERROR;
 800561e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005622:	e007      	b.n	8005634 <BSP_NFCTAG_ConfigIT+0x2c>
   }
   return Nfctag_Drv->ConfigIT(&NfcTagObj, ITConfig);
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <BSP_NFCTAG_ConfigIT+0x34>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	4611      	mov	r1, r2
 800562e:	4804      	ldr	r0, [pc, #16]	; (8005640 <BSP_NFCTAG_ConfigIT+0x38>)
 8005630:	4798      	blx	r3
 8005632:	4603      	mov	r3, r0
 }
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20002108 	.word	0x20002108
 8005640:	2000210c 	.word	0x2000210c

08005644 <BSP_NFCTAG_ReadUID>:
   * @brief  Reads the ST25DV UID.
   * @param  pUid Pointer used to return the ST25DV UID value.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_ReadUID(uint32_t Instance, ST25DV_UID * const pUid)
 {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
   UNUSED(Instance);
   return ST25DV_ReadUID(&NfcTagObj, pUid);
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	4803      	ldr	r0, [pc, #12]	; (8005660 <BSP_NFCTAG_ReadUID+0x1c>)
 8005652:	f000 fa60 	bl	8005b16 <ST25DV_ReadUID>
 8005656:	4603      	mov	r3, r0
 }
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	2000210c 	.word	0x2000210c

08005664 <BSP_NFCTAG_PresentI2CPassword>:
   * @brief  Presents I2C password, to authorize the I2C writes to protected areas.
   * @param  PassWord Password value on 32bits
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_PresentI2CPassword(uint32_t Instance, const ST25DV_PASSWD PassWord)
 {
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	e883 0006 	stmia.w	r3, {r1, r2}
   UNUSED(Instance);
   return ST25DV_PresentI2CPassword(&NfcTagObj, PassWord);
 8005672:	1d3b      	adds	r3, r7, #4
 8005674:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005678:	4803      	ldr	r0, [pc, #12]	; (8005688 <BSP_NFCTAG_PresentI2CPassword+0x24>)
 800567a:	f000 fa98 	bl	8005bae <ST25DV_PresentI2CPassword>
 800567e:	4603      	mov	r3, r0
 }
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	2000210c 	.word	0x2000210c

0800568c <BSP_NFCTAG_ReadMBMode>:
   * @brief  Reads the Mailbox mode.
   * @param  pMB_mode Pointer on a ST25DV_EH_MODE_STATUS value used to return the Mailbox mode.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_ReadMBMode(uint32_t Instance, ST25DV_EN_STATUS * const pMB_mode)
 {
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
   UNUSED(Instance);
   return ST25DV_ReadMBMode(&NfcTagObj, pMB_mode);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	4803      	ldr	r0, [pc, #12]	; (80056a8 <BSP_NFCTAG_ReadMBMode+0x1c>)
 800569a:	f000 faf2 	bl	8005c82 <ST25DV_ReadMBMode>
 800569e:	4603      	mov	r3, r0
 }
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	2000210c 	.word	0x2000210c

080056ac <BSP_NFCTAG_WriteMBMode>:
   * @details  Needs the I2C Password presentation to be effective.
   * @param  MB_mode ST25DV_EN_STATUS value corresponding to the Mailbox mode to be set.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_WriteMBMode(uint32_t Instance, const ST25DV_EN_STATUS MB_mode)
 {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
   UNUSED(Instance);
   return ST25DV_WriteMBMode(&NfcTagObj, MB_mode);
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	4619      	mov	r1, r3
 80056bc:	4803      	ldr	r0, [pc, #12]	; (80056cc <BSP_NFCTAG_WriteMBMode+0x20>)
 80056be:	f000 fb02 	bl	8005cc6 <ST25DV_WriteMBMode>
 80056c2:	4603      	mov	r3, r0
 }
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	2000210c 	.word	0x2000210c

080056d0 <BSP_NFCTAG_WriteMBWDG>:
   * @details  Needs the I2C Password presentation to be effective.
   * @param  WdgDelay Watchdog duration coefficient to be written (Watch dog duration = MB_WDG*30 ms +/- 6%).
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_WriteMBWDG(uint32_t Instance, const uint8_t WdgDelay)
 {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
   UNUSED(Instance);
   return ST25DV_WriteMBWDG(&NfcTagObj, WdgDelay);
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	4619      	mov	r1, r3
 80056e0:	4803      	ldr	r0, [pc, #12]	; (80056f0 <BSP_NFCTAG_WriteMBWDG+0x20>)
 80056e2:	f000 fb06 	bl	8005cf2 <ST25DV_WriteMBWDG>
 80056e6:	4603      	mov	r3, r0
 }
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	2000210c 	.word	0x2000210c

080056f4 <BSP_NFCTAG_ReadMailboxData>:
   * @param  NbByte  Number of bytes to be read.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_ReadMailboxData(uint32_t Instance, uint8_t * const pData,
                                               const uint16_t TarAddr, const uint16_t NbByte)
 {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4611      	mov	r1, r2
 8005700:	461a      	mov	r2, r3
 8005702:	460b      	mov	r3, r1
 8005704:	80fb      	strh	r3, [r7, #6]
 8005706:	4613      	mov	r3, r2
 8005708:	80bb      	strh	r3, [r7, #4]
   UNUSED(Instance);
   return ST25DV_ReadMailboxData(&NfcTagObj, pData, TarAddr, NbByte);
 800570a:	88bb      	ldrh	r3, [r7, #4]
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4803      	ldr	r0, [pc, #12]	; (8005720 <BSP_NFCTAG_ReadMailboxData+0x2c>)
 8005712:	f000 fb00 	bl	8005d16 <ST25DV_ReadMailboxData>
 8005716:	4603      	mov	r3, r0
 }
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	2000210c 	.word	0x2000210c

08005724 <BSP_NFCTAG_WriteMailboxData>:
   * @param  pData   Pointer to the buffer containing the data to be written.
   * @param  NbByte  Number of bytes to be written.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_WriteMailboxData(uint32_t Instance, const uint8_t * const pData, const uint16_t NbByte)
 {
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
   UNUSED(Instance);
   return ST25DV_WriteMailboxData(&NfcTagObj, pData, NbByte);
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	461a      	mov	r2, r3
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4803      	ldr	r0, [pc, #12]	; (8005748 <BSP_NFCTAG_WriteMailboxData+0x24>)
 800573a:	f000 fb0e 	bl	8005d5a <ST25DV_WriteMailboxData>
 800573e:	4603      	mov	r3, r0
 }
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	2000210c 	.word	0x2000210c

0800574c <BSP_NFCTAG_ReadITSTStatus_Dyn>:
   *                       - RFWRITE = 0x80
   *
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_ReadITSTStatus_Dyn(uint32_t Instance, uint8_t * const pITStatus)
 {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
   UNUSED(Instance);
   return ST25DV_ReadITSTStatus_Dyn(&NfcTagObj, pITStatus);
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	4803      	ldr	r0, [pc, #12]	; (8005768 <BSP_NFCTAG_ReadITSTStatus_Dyn+0x1c>)
 800575a:	f000 fb1b 	bl	8005d94 <ST25DV_ReadITSTStatus_Dyn>
 800575e:	4603      	mov	r3, r0
 }
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	2000210c 	.word	0x2000210c

0800576c <BSP_NFCTAG_GetRFField_Dyn>:
   * @brief  Checks if RF Field is present in front of the ST25DV.
   * @param  pRF_Field Pointer on a ST25DV_FIELD_STATUS value used to return the field presence.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_GetRFField_Dyn(uint32_t Instance, ST25DV_FIELD_STATUS * const pRF_Field)
 {
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
   UNUSED(Instance);
   return ST25DV_GetRFField_Dyn(&NfcTagObj, pRF_Field);
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	4803      	ldr	r0, [pc, #12]	; (8005788 <BSP_NFCTAG_GetRFField_Dyn+0x1c>)
 800577a:	f000 fb1b 	bl	8005db4 <ST25DV_GetRFField_Dyn>
 800577e:	4603      	mov	r3, r0
 }
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	2000210c 	.word	0x2000210c

0800578c <BSP_NFCTAG_ReadMBCtrl_Dyn>:
   * @param  pCtrlStatus Pointer on a ST25DV_MB_CTRL_DYN_STATUS structure used
   *         to return the dynamic Mailbox ctrl information.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_ReadMBCtrl_Dyn(uint32_t Instance, ST25DV_MB_CTRL_DYN_STATUS * const pCtrlStatus)
 {
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
   UNUSED(Instance);
   return ST25DV_ReadMBCtrl_Dyn(&NfcTagObj, pCtrlStatus);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	4803      	ldr	r0, [pc, #12]	; (80057a8 <BSP_NFCTAG_ReadMBCtrl_Dyn+0x1c>)
 800579a:	f000 fb2f 	bl	8005dfc <ST25DV_ReadMBCtrl_Dyn>
 800579e:	4603      	mov	r3, r0
 }
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	2000210c 	.word	0x2000210c

080057ac <BSP_NFCTAG_SetMBEN_Dyn>:
 /**
   * @brief  Sets the Mailbox Enable dynamic configuration.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_SetMBEN_Dyn(uint32_t Instance)
 {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
   UNUSED(Instance);
   return ST25DV_SetMBEN_Dyn(&NfcTagObj);
 80057b4:	4803      	ldr	r0, [pc, #12]	; (80057c4 <BSP_NFCTAG_SetMBEN_Dyn+0x18>)
 80057b6:	f000 fb64 	bl	8005e82 <ST25DV_SetMBEN_Dyn>
 80057ba:	4603      	mov	r3, r0
 }
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	2000210c 	.word	0x2000210c

080057c8 <BSP_NFCTAG_ResetMBEN_Dyn>:
 /**
   * @brief  Unsets the Mailbox Enable dynamic configuration.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_ResetMBEN_Dyn(uint32_t Instance)
 {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
   UNUSED(Instance);
   return ST25DV_ResetMBEN_Dyn(&NfcTagObj);
 80057d0:	4803      	ldr	r0, [pc, #12]	; (80057e0 <BSP_NFCTAG_ResetMBEN_Dyn+0x18>)
 80057d2:	f000 fb69 	bl	8005ea8 <ST25DV_ResetMBEN_Dyn>
 80057d6:	4603      	mov	r3, r0
 }
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	2000210c 	.word	0x2000210c

080057e4 <BSP_NFCTAG_ReadMBLength_Dyn>:
   * @brief  Reads the Mailbox message length dynamic register.
   * @param  pMBLength Pointer on a uint8_t used to return the Mailbox message length.
   * @return int32_t enum status.
   */
 int32_t BSP_NFCTAG_ReadMBLength_Dyn(uint32_t Instance, uint8_t * const pMBLength)
 {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
   UNUSED(Instance);
   return ST25DV_ReadMBLength_Dyn(&NfcTagObj, pMBLength);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	4803      	ldr	r0, [pc, #12]	; (8005800 <BSP_NFCTAG_ReadMBLength_Dyn+0x1c>)
 80057f2:	f000 fb6c 	bl	8005ece <ST25DV_ReadMBLength_Dyn>
 80057f6:	4603      	mov	r3, r0
 }
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	2000210c 	.word	0x2000210c

08005804 <ST25DV_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ST25DV_RegisterBusIO (ST25DV_Object_t* pObj, ST25DV_IO_t *pIO)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  int32_t ret = NFCTAG_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <ST25DV_RegisterBusIO+0x1c>
  {
    ret = NFCTAG_ERROR;
 8005818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e031      	b.n	8005884 <ST25DV_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init        = pIO->Init;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	605a      	str	r2, [r3, #4]
    pObj->IO.Write       = pIO->Write;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]
    pObj->IO.Read        = pIO->Read;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	611a      	str	r2, [r3, #16]
    pObj->IO.IsReady     = pIO->IsReady;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick     = pIO->GetTick;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a0f      	ldr	r2, [pc, #60]	; (8005890 <ST25DV_RegisterBusIO+0x8c>)
 8005854:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a0e      	ldr	r2, [pc, #56]	; (8005894 <ST25DV_RegisterBusIO+0x90>)
 800585a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <ST25DV_RegisterBusIO+0x6e>
    {
      ret = NFCTAG_ERROR;
 800586a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e008      	b.n	8005884 <ST25DV_RegisterBusIO+0x80>
    } else if (pObj->IO.Init() != 0) {
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4798      	blx	r3
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <ST25DV_RegisterBusIO+0x80>
      ret = NFCTAG_ERROR;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005882:	60fb      	str	r3, [r7, #12]
    }
  }

  return /*ret */NFCTAG_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	08005eef 	.word	0x08005eef
 8005894:	08005f3b 	.word	0x08005f3b

08005898 <ST25DV_Init>:
/**
  * @brief  ST25DV nfctag Initialization.
  * @return int32_t enum status.
  */
int32_t ST25DV_Init( ST25DV_Object_t *pObj )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10e      	bne.n	80058c6 <ST25DV_Init+0x2e>
  {
    uint8_t nfctag_id;
    ST25DV_ReadID(pObj,&nfctag_id);
 80058a8:	f107 030f 	add.w	r3, r7, #15
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f811 	bl	80058d6 <ST25DV_ReadID>
    if( (nfctag_id != I_AM_ST25DV04) && (nfctag_id != I_AM_ST25DV64) )
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b24      	cmp	r3, #36	; 0x24
 80058b8:	d005      	beq.n	80058c6 <ST25DV_Init+0x2e>
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b26      	cmp	r3, #38	; 0x26
 80058be:	d002      	beq.n	80058c6 <ST25DV_Init+0x2e>
    {
      return NFCTAG_ERROR;
 80058c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058c4:	e003      	b.n	80058ce <ST25DV_Init+0x36>
    }
  }

  pObj->IsInitialized = 1U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
  return NFCTAG_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <ST25DV_ReadID>:
  * @brief  Reads the ST25DV ID.
  * @param  pICRef Pointeron a uint8_t used to return the ST25DV ID.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadID(ST25DV_Object_t* pObj, uint8_t * const pICRef )
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  /* Read ICRef on device */
  return ST25DV_GetICREF(&(pObj->Ctx), pICRef);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3318      	adds	r3, #24
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb9b 	bl	8006022 <ST25DV_GetICREF>
 80058ec:	4603      	mov	r3, r0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <ST25DV_IsDeviceReady>:
  *           This function determines if the ST25DV is ready to answer an I2C request. 
  * @param    Trials Max number of tentative.
  * @retval   int32_t enum status.
  */
int32_t ST25DV_IsDeviceReady(ST25DV_Object_t* pObj,  const uint32_t Trials )
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
  /* Test communication with device */
  return pObj->IO.IsReady(ST25DV_ADDR_DATA_I2C, Trials );
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	20a6      	movs	r0, #166	; 0xa6
 8005908:	4798      	blx	r3
 800590a:	4603      	mov	r3, r0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <ST25DV_GetGPOStatus>:
  *                     - RFWRITE = 0x80
  *
  * @retval   int32_t enum status.
  */
int32_t ST25DV_GetGPOStatus(ST25DV_Object_t* pObj,  uint16_t * const pGPOStatus )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  int32_t status;
  
  /* Read value of GPO register */
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3318      	adds	r3, #24
 8005922:	f107 020b 	add.w	r2, r7, #11
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fc90 	bl	800624e <ST25DV_GetGPO_ALL>
 800592e:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <ST25DV_GetGPOStatus+0x26>
    return status;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	e004      	b.n	8005944 <ST25DV_GetGPOStatus+0x30>

  /* Extract GPO configuration */
  *pGPOStatus = (uint16_t)reg_value;
 800593a:	7afb      	ldrb	r3, [r7, #11]
 800593c:	b29a      	uxth	r2, r3
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	801a      	strh	r2, [r3, #0]
  
  return NFCTAG_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <ST25DV_ConfigureGPO>:
  *           - RFWRITE = 0x80
  *
  * @retval   int32_t enum status.
  */
int32_t ST25DV_ConfigureGPO(ST25DV_Object_t* pObj,  const uint16_t ITConf )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
  /* Write GPO configuration to register */
  return ST25DV_SetGPO_ALL( &(pObj->Ctx),  (uint8_t *)&ITConf);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3318      	adds	r3, #24
 800595c:	1cba      	adds	r2, r7, #2
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fc8a 	bl	800627a <ST25DV_SetGPO_ALL>
 8005966:	4603      	mov	r3, r0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <ST25DV_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadData(ST25DV_Object_t* pObj,  uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4611      	mov	r1, r2
 800597c:	461a      	mov	r2, r3
 800597e:	460b      	mov	r3, r1
 8005980:	80fb      	strh	r3, [r7, #6]
 8005982:	4613      	mov	r3, r2
 8005984:	80bb      	strh	r3, [r7, #4]
  /* Read Data in user memory */
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691c      	ldr	r4, [r3, #16]
 800598a:	88bb      	ldrh	r3, [r7, #4]
 800598c:	88f9      	ldrh	r1, [r7, #6]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	20a6      	movs	r0, #166	; 0xa6
 8005992:	47a0      	blx	r4
 8005994:	4603      	mov	r3, r0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	bd90      	pop	{r4, r7, pc}

0800599e <ST25DV_WriteData>:
  * @param  TarAddr I2C data memory address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteData(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 800599e:	b590      	push	{r4, r7, lr}
 80059a0:	b08b      	sub	sp, #44	; 0x2c
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	4611      	mov	r1, r2
 80059aa:	461a      	mov	r2, r3
 80059ac:	460b      	mov	r3, r1
 80059ae:	80fb      	strh	r3, [r7, #6]
 80059b0:	4613      	mov	r3, r2
 80059b2:	80bb      	strh	r3, [r7, #4]
  int32_t ret;
  uint16_t split_data_nb;
  const uint8_t *pdata_index = (const uint8_t *)pData;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	61fb      	str	r3, [r7, #28]
  uint16_t bytes_to_write = NbByte;
 80059b8:	88bb      	ldrh	r3, [r7, #4]
 80059ba:	837b      	strh	r3, [r7, #26]
  uint16_t mem_addr = TarAddr;
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	833b      	strh	r3, [r7, #24]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 80059c0:	8b7b      	ldrh	r3, [r7, #26]
 80059c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c6:	d903      	bls.n	80059d0 <ST25DV_WriteData+0x32>
    {
      /* DataSize higher than max page write, copy data by page */
      split_data_nb = (uint16_t)ST25DV_MAX_WRITE_BYTE;
 80059c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80059ce:	e001      	b.n	80059d4 <ST25DV_WriteData+0x36>
    }
    else
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
 80059d0:	8b7b      	ldrh	r3, [r7, #26]
 80059d2:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    /* Write split_data_nb bytes in memory */
    ret = pObj->IO.Write( ST25DV_ADDR_DATA_I2C, mem_addr, pdata_index, split_data_nb);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68dc      	ldr	r4, [r3, #12]
 80059d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059da:	8b39      	ldrh	r1, [r7, #24]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	20a6      	movs	r0, #166	; 0xa6
 80059e0:	47a0      	blx	r4
 80059e2:	6278      	str	r0, [r7, #36]	; 0x24

    if( ret == NFCTAG_OK )
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d11c      	bne.n	8005a24 <ST25DV_WriteData+0x86>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4798      	blx	r3
 80059f0:	4603      	mov	r3, r0
 80059f2:	617b      	str	r3, [r7, #20]
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2101      	movs	r1, #1
 80059fa:	20a6      	movs	r0, #166	; 0xa6
 80059fc:	4798      	blx	r3
 80059fe:	6138      	str	r0, [r7, #16]
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	4798      	blx	r3
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005a10:	d202      	bcs.n	8005a18 <ST25DV_WriteData+0x7a>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ed      	bne.n	80059f4 <ST25DV_WriteData+0x56>
      
      if( pollstatus != NFCTAG_OK )
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <ST25DV_WriteData+0x86>
      {
        ret = NFCTAG_TIMEOUT;
 8005a1e:	f06f 0302 	mvn.w	r3, #2
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 8005a24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	61fb      	str	r3, [r7, #28]
    mem_addr += split_data_nb;
 8005a2c:	8b3a      	ldrh	r2, [r7, #24]
 8005a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a30:	4413      	add	r3, r2
 8005a32:	833b      	strh	r3, [r7, #24]
    bytes_to_write -= split_data_nb;
 8005a34:	8b7a      	ldrh	r2, [r7, #26]
 8005a36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	837b      	strh	r3, [r7, #26]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 8005a3c:	8b7b      	ldrh	r3, [r7, #26]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <ST25DV_WriteData+0xaa>
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0bb      	beq.n	80059c0 <ST25DV_WriteData+0x22>
  
  return ret;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	372c      	adds	r7, #44	; 0x2c
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}

08005a52 <ST25DV_WriteRegister>:
  * @param    TarAddr I2C register address to written.
  * @param    NbByte  Number of bytes to be written.
  * @return   int32_t enum status.
  */
int32_t ST25DV_WriteRegister(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 8005a52:	b590      	push	{r4, r7, lr}
 8005a54:	b08b      	sub	sp, #44	; 0x2c
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	460b      	mov	r3, r1
 8005a62:	80fb      	strh	r3, [r7, #6]
 8005a64:	4613      	mov	r3, r2
 8005a66:	80bb      	strh	r3, [r7, #4]
  int32_t ret;
  uint8_t split_data_nb;
  uint16_t bytes_to_write = NbByte;
 8005a68:	88bb      	ldrh	r3, [r7, #4]
 8005a6a:	843b      	strh	r3, [r7, #32]
  uint16_t mem_addr = TarAddr;
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	83fb      	strh	r3, [r7, #30]
  const uint8_t *pdata_index = (const uint8_t *)pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61bb      	str	r3, [r7, #24]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 8005a74:	8c3b      	ldrh	r3, [r7, #32]
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d903      	bls.n	8005a84 <ST25DV_WriteRegister+0x32>
    {
      /* DataSize higher than max page write, copy data by page */
      split_data_nb = (uint8_t)ST25DV_MAX_WRITE_BYTE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e002      	b.n	8005a8a <ST25DV_WriteRegister+0x38>
    }
    else
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
 8005a84:	8c3b      	ldrh	r3, [r7, #32]
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    /* Write split_data_nb bytes in register */
    ret = pObj->IO.Write( ST25DV_ADDR_SYST_I2C, mem_addr, pdata_index,  split_data_nb);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68dc      	ldr	r4, [r3, #12]
 8005a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	8bf9      	ldrh	r1, [r7, #30]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	20ae      	movs	r0, #174	; 0xae
 8005a9a:	47a0      	blx	r4
 8005a9c:	6278      	str	r0, [r7, #36]	; 0x24
    if( ret == NFCTAG_OK )
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d11c      	bne.n	8005ade <ST25DV_WriteRegister+0x8c>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	4798      	blx	r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	617b      	str	r3, [r7, #20]
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	20a6      	movs	r0, #166	; 0xa6
 8005ab6:	4798      	blx	r3
 8005ab8:	6138      	str	r0, [r7, #16]
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4798      	blx	r3
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005aca:	d202      	bcs.n	8005ad2 <ST25DV_WriteRegister+0x80>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1ed      	bne.n	8005aae <ST25DV_WriteRegister+0x5c>
      
      if( pollstatus != NFCTAG_OK )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <ST25DV_WriteRegister+0x8c>
      {
        ret = NFCTAG_TIMEOUT;
 8005ad8:	f06f 0302 	mvn.w	r3, #2
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 8005ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
    mem_addr += split_data_nb;
 8005ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	8bfb      	ldrh	r3, [r7, #30]
 8005af0:	4413      	add	r3, r2
 8005af2:	83fb      	strh	r3, [r7, #30]
    bytes_to_write -= split_data_nb;
 8005af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8c3a      	ldrh	r2, [r7, #32]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	843b      	strh	r3, [r7, #32]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 8005b00:	8c3b      	ldrh	r3, [r7, #32]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <ST25DV_WriteRegister+0xba>
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0b3      	beq.n	8005a74 <ST25DV_WriteRegister+0x22>
  
  return ret;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	372c      	adds	r7, #44	; 0x2c
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd90      	pop	{r4, r7, pc}

08005b16 <ST25DV_ReadUID>:
  * @brief  Reads the ST25DV UID.
  * @param  pUid Pointer used to return the ST25DV UID value.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadUID(ST25DV_Object_t* pObj,  ST25DV_UID * const pUid )
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b086      	sub	sp, #24
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  uint8_t reg_value[8];
  uint8_t i;
  int32_t status;
  
  /* Read value of UID registers */
  status = ST25DV_GetUID( &(pObj->Ctx), reg_value);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3318      	adds	r3, #24
 8005b24:	f107 0208 	add.w	r2, r7, #8
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fa8f 	bl	800604e <ST25DV_GetUID>
 8005b30:	6138      	str	r0, [r7, #16]
  if( status != NFCTAG_OK )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <ST25DV_ReadUID+0x26>
  {
    return status;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	e034      	b.n	8005ba6 <ST25DV_ReadUID+0x90>
  }
  
  /* Store information in 2 WORD */
  pUid->MsbUid = 0;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
  
  for( i = 0; i < 4; i++ )
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
 8005b46:	e010      	b.n	8005b6a <ST25DV_ReadUID+0x54>
  {
    pUid->MsbUid = (pUid->MsbUid << 8) | reg_value[7 - i];
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	7dfa      	ldrb	r2, [r7, #23]
 8005b50:	f1c2 0207 	rsb	r2, r2, #7
 8005b54:	f107 0118 	add.w	r1, r7, #24
 8005b58:	440a      	add	r2, r1
 8005b5a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	601a      	str	r2, [r3, #0]
  for( i = 0; i < 4; i++ )
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	3301      	adds	r3, #1
 8005b68:	75fb      	strb	r3, [r7, #23]
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d9eb      	bls.n	8005b48 <ST25DV_ReadUID+0x32>
  }
  
  pUid->LsbUid = 0;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	605a      	str	r2, [r3, #4]
  
  for( i = 0; i < 4; i++ )
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]
 8005b7a:	e010      	b.n	8005b9e <ST25DV_ReadUID+0x88>
  {
    pUid->LsbUid = (pUid->LsbUid << 8) | reg_value[3 - i];
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	7dfa      	ldrb	r2, [r7, #23]
 8005b84:	f1c2 0203 	rsb	r2, r2, #3
 8005b88:	f107 0118 	add.w	r1, r7, #24
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	605a      	str	r2, [r3, #4]
  for( i = 0; i < 4; i++ )
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d9eb      	bls.n	8005b7c <ST25DV_ReadUID+0x66>
  }
  
  return NFCTAG_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <ST25DV_PresentI2CPassword>:
  * @brief  Presents I2C password, to authorize the I2C writes to protected areas.
  * @param  PassWord Password value on 32bits
  * @return int32_t enum status.
  */
int32_t ST25DV_PresentI2CPassword(ST25DV_Object_t* pObj,  const ST25DV_PASSWD PassWord )
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b08a      	sub	sp, #40	; 0x28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	e883 0006 	stmia.w	r3, {r1, r2}
  uint8_t ai2c_message[17] = {0};
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	f107 0318 	add.w	r3, r7, #24
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	731a      	strb	r2, [r3, #12]
  uint8_t i;
  
  /* Build I2C Message with Password + Validation code 0x09 + Password */
  ai2c_message[8] = 0x09;
 8005bce:	2309      	movs	r3, #9
 8005bd0:	773b      	strb	r3, [r7, #28]
  for( i = 0; i < 4; i++ )
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bd8:	e042      	b.n	8005c60 <ST25DV_PresentI2CPassword+0xb2>
  {
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005be0:	f1c3 0303 	rsb	r3, r3, #3
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	40da      	lsrs	r2, r3
 8005be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005bf2:	440b      	add	r3, r1
 8005bf4:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bfe:	f1c3 0303 	rsb	r3, r3, #3
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	40da      	lsrs	r2, r3
 8005c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005c12:	440b      	add	r3, r1
 8005c14:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 9] = ai2c_message[i];
 8005c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c20:	3309      	adds	r3, #9
 8005c22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005c26:	440a      	add	r2, r1
 8005c28:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005c2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005c30:	440b      	add	r3, r1
 8005c32:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 13] = ai2c_message[i + 4];
 8005c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c40:	330d      	adds	r3, #13
 8005c42:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005c46:	440a      	add	r2, r1
 8005c48:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005c4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005c50:	440b      	add	r3, r1
 8005c52:	f803 2c14 	strb.w	r2, [r3, #-20]
  for( i = 0; i < 4; i++ )
 8005c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d9b8      	bls.n	8005bda <ST25DV_PresentI2CPassword+0x2c>
  };
  
  /* Present password to ST25DV */
  return ST25DV_WriteRegister(pObj, ai2c_message, ST25DV_I2CPASSWD_REG, 17 );
 8005c68:	f107 0114 	add.w	r1, r7, #20
 8005c6c:	2311      	movs	r3, #17
 8005c6e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff feed 	bl	8005a52 <ST25DV_WriteRegister>
 8005c78:	4603      	mov	r3, r0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3728      	adds	r7, #40	; 0x28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <ST25DV_ReadMBMode>:
  * @brief  Reads the Mailbox mode.
  * @param  pMB_mode Pointer on a ST25DV_EH_MODE_STATUS value used to return the Mailbox mode.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadMBMode( ST25DV_Object_t* pObj, ST25DV_EN_STATUS * const pMB_mode )
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  int32_t status;
  
  /* Read actual value of MB_MODE register */
  status = ST25DV_GetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3318      	adds	r3, #24
 8005c90:	f107 020b 	add.w	r2, r7, #11
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f9ef 	bl	800607a <ST25DV_GetMB_MODE_RW>
 8005c9c:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <ST25DV_ReadMBMode+0x26>
  {
    return status;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	e00a      	b.n	8005cbe <ST25DV_ReadMBMode+0x3c>
  }
  
  /* Extract Mailbox mode status */
  if( reg_value  )
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <ST25DV_ReadMBMode+0x34>
  {
    *pMB_mode = ST25DV_ENABLE;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	e002      	b.n	8005cbc <ST25DV_ReadMBMode+0x3a>
  }
  else
  {
    *pMB_mode = ST25DV_DISABLE;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
  }
  
  return NFCTAG_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <ST25DV_WriteMBMode>:
  * @details  Needs the I2C Password presentation to be effective.
  * @param  MB_mode ST25DV_EN_STATUS value corresponding to the Mailbox mode to be set.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteMBMode( ST25DV_Object_t* pObj, const ST25DV_EN_STATUS MB_mode )
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  uint8_t reg_value;
  int32_t status;
  /* Update Mailbox mode status */
  reg_value = (uint8_t)MB_mode;
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	72fb      	strb	r3, [r7, #11]
  
  /* Write MB_MODE register */
  status = ST25DV_SetMB_MODE_RW(&(pObj->Ctx), &reg_value);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	f107 020b 	add.w	r2, r7, #11
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f9eb 	bl	80060bc <ST25DV_SetMB_MODE_RW>
 8005ce6:	60f8      	str	r0, [r7, #12]

  return status;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <ST25DV_WriteMBWDG>:
  * @details  Needs the I2C Password presentation to be effective.
  * @param  WdgDelay Watchdog duration coefficient to be written (Watch dog duration = MB_WDG*30 ms +/- 6%).
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteMBWDG( ST25DV_Object_t* pObj, const uint8_t WdgDelay )
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
   /* Write MB_WDG register */
  return ST25DV_SetMB_WDG_DELAY(&(pObj->Ctx), &WdgDelay);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3318      	adds	r3, #24
 8005d02:	1cfa      	adds	r2, r7, #3
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fa6e 	bl	80061e8 <ST25DV_SetMB_WDG_DELAY>
 8005d0c:	4603      	mov	r3, r0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <ST25DV_ReadMailboxData>:
  * @param  Offset  Offset in the Mailbox memory, byte number to start the read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadMailboxData( ST25DV_Object_t* pObj, uint8_t * const pData, const uint16_t Offset, const uint16_t NbByte )
{
 8005d16:	b590      	push	{r4, r7, lr}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	4611      	mov	r1, r2
 8005d22:	461a      	mov	r2, r3
 8005d24:	460b      	mov	r3, r1
 8005d26:	80fb      	strh	r3, [r7, #6]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	80bb      	strh	r3, [r7, #4]
  if( Offset > ST25DV_MAX_MAILBOX_LENGTH )
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d32:	d902      	bls.n	8005d3a <ST25DV_ReadMailboxData+0x24>
  {
    return NFCTAG_ERROR;
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d38:	e00b      	b.n	8005d52 <ST25DV_ReadMailboxData+0x3c>
  } 
  /* Read Data in user memory */
  return pObj->IO.Read( ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG + Offset, pData,  NbByte );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691c      	ldr	r4, [r3, #16]
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d44:	3308      	adds	r3, #8
 8005d46:	b299      	uxth	r1, r3
 8005d48:	88bb      	ldrh	r3, [r7, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	20a6      	movs	r0, #166	; 0xa6
 8005d4e:	47a0      	blx	r4
 8005d50:	4603      	mov	r3, r0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}

08005d5a <ST25DV_WriteMailboxData>:
  * @param  pData   Pointer to the buffer containing the data to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteMailboxData( ST25DV_Object_t* pObj, const uint8_t * const pData, const uint16_t NbByte )
{ 
 8005d5a:	b590      	push	{r4, r7, lr}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	4613      	mov	r3, r2
 8005d66:	80fb      	strh	r3, [r7, #6]
  int32_t status;
  
  /* ST25DV can write a maximum of 256 bytes in Mailbox */
  if( NbByte <= ST25DV_MAX_MAILBOX_LENGTH )
 8005d68:	88fb      	ldrh	r3, [r7, #6]
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d809      	bhi.n	8005d84 <ST25DV_WriteMailboxData+0x2a>
  {
    /* Write NbByte data in memory */
    status =  pObj->IO.Write( ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, pData,  NbByte );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68dc      	ldr	r4, [r3, #12]
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	f242 0108 	movw	r1, #8200	; 0x2008
 8005d7c:	20a6      	movs	r0, #166	; 0xa6
 8005d7e:	47a0      	blx	r4
 8005d80:	6178      	str	r0, [r7, #20]
 8005d82:	e002      	b.n	8005d8a <ST25DV_WriteMailboxData+0x30>
  }
  else
  {
    status = NFCTAG_ERROR;
 8005d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d88:	617b      	str	r3, [r7, #20]
  }
  
  return status;
 8005d8a:	697b      	ldr	r3, [r7, #20]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd90      	pop	{r4, r7, pc}

08005d94 <ST25DV_ReadITSTStatus_Dyn>:
  *                       - RFWRITE = 0x80
  *
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadITSTStatus_Dyn( ST25DV_Object_t* pObj, uint8_t * const pITStatus )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  /* Read value of ITStatus register */
  return ST25DV_GetITSTS_DYN_ALL(&(pObj->Ctx), pITStatus );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3318      	adds	r3, #24
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fa7e 	bl	80062a6 <ST25DV_GetITSTS_DYN_ALL>
 8005daa:	4603      	mov	r3, r0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <ST25DV_GetRFField_Dyn>:
  * @brief  Checks if RF Field is present in front of the ST25DV.
  * @param  pRF_Field Pointer on a ST25DV_FIELD_STATUS value used to return the field presence.
  * @return int32_t enum status.
  */
int32_t ST25DV_GetRFField_Dyn( ST25DV_Object_t* pObj, ST25DV_FIELD_STATUS * const pRF_Field )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  int32_t status;
  uint8_t reg_value = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	72fb      	strb	r3, [r7, #11]
  
  /* Read actual value of EH_CTRL_DYN register */
  status = ST25DV_GetEH_CTRL_DYN_FIELD_ON(&(pObj->Ctx), &reg_value );
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3318      	adds	r3, #24
 8005dc6:	f107 020b 	add.w	r2, r7, #11
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fa81 	bl	80062d4 <ST25DV_GetEH_CTRL_DYN_FIELD_ON>
 8005dd2:	60f8      	str	r0, [r7, #12]
  
  /* Extract RF Field information */
  if( status == NFCTAG_OK )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <ST25DV_GetRFField_Dyn+0x3e>
  {
    if( reg_value )
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <ST25DV_GetRFField_Dyn+0x34>
    {
      *pRF_Field = ST25DV_FIELD_ON;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e002      	b.n	8005dee <ST25DV_GetRFField_Dyn+0x3a>
    }
    else
    {
      *pRF_Field = ST25DV_FIELD_OFF;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
    }
    return NFCTAG_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e000      	b.n	8005df4 <ST25DV_GetRFField_Dyn+0x40>
  }
  
  return status;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <ST25DV_ReadMBCtrl_Dyn>:
  * @brief  Reads the Mailbox ctrl dynamic register.
  * @param  pCtrlStatus Pointer on a ST25DV_MB_CTRL_DYN_STATUS structure used to return the dynamic Mailbox ctrl information.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadMBCtrl_Dyn( ST25DV_Object_t* pObj, ST25DV_MB_CTRL_DYN_STATUS * const pCtrlStatus )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  int32_t status;
  
  /* Read MB_CTRL_DYN register */
  status = ST25DV_GetMB_CTRL_DYN_ALL(&(pObj->Ctx), &reg_value);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3318      	adds	r3, #24
 8005e0a:	f107 020b 	add.w	r2, r7, #11
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f9d2 	bl	80061ba <ST25DV_GetMB_CTRL_DYN_ALL>
 8005e16:	60f8      	str	r0, [r7, #12]
  if( status != NFCTAG_OK )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <ST25DV_ReadMBCtrl_Dyn+0x26>
  {
    return status;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	e02b      	b.n	8005e7a <ST25DV_ReadMBCtrl_Dyn+0x7e>
  }
  
  /* Extract Mailbox ctrl information */
  pCtrlStatus->MbEnable = (reg_value & ST25DV_MB_CTRL_DYN_MBEN_MASK) >> ST25DV_MB_CTRL_DYN_MBEN_SHIFT;
 8005e22:	7afb      	ldrb	r3, [r7, #11]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
  pCtrlStatus->HostPutMsg = (reg_value & ST25DV_MB_CTRL_DYN_HOSTPUTMSG_MASK) >> ST25DV_MB_CTRL_DYN_HOSTPUTMSG_SHIFT;
 8005e2e:	7afb      	ldrb	r3, [r7, #11]
 8005e30:	105b      	asrs	r3, r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	705a      	strb	r2, [r3, #1]
  pCtrlStatus->RfPutMsg = (reg_value & ST25DV_MB_CTRL_DYN_RFPUTMSG_MASK) >> ST25DV_MB_CTRL_DYN_RFPUTMSG_SHIFT;
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	109b      	asrs	r3, r3, #2
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	709a      	strb	r2, [r3, #2]
  pCtrlStatus->HostMissMsg = (reg_value & ST25DV_MB_CTRL_DYN_HOSTMISSMSG_MASK) >> ST25DV_MB_CTRL_DYN_HOSTMISSMSG_SHIFT;
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
 8005e50:	111b      	asrs	r3, r3, #4
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	70da      	strb	r2, [r3, #3]
  pCtrlStatus->RFMissMsg = (reg_value & ST25DV_MB_CTRL_DYN_RFMISSMSG_MASK) >> ST25DV_MB_CTRL_DYN_RFMISSMSG_SHIFT;
 8005e5e:	7afb      	ldrb	r3, [r7, #11]
 8005e60:	115b      	asrs	r3, r3, #5
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	711a      	strb	r2, [r3, #4]
  pCtrlStatus->CurrentMsg = (ST25DV_CURRENT_MSG)((reg_value & ST25DV_MB_CTRL_DYN_CURRENTMSG_MASK) >> ST25DV_MB_CTRL_DYN_CURRENTMSG_SHIFT);
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	099b      	lsrs	r3, r3, #6
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	715a      	strb	r2, [r3, #5]
  
  return NFCTAG_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <ST25DV_SetMBEN_Dyn>:
/**
  * @brief  Sets the Mailbox Enable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t ST25DV_SetMBEN_Dyn( ST25DV_Object_t* pObj )
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  uint8_t reg_value = 1;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
    
  /* Write MB_CTRL_DYN register */
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3318      	adds	r3, #24
 8005e92:	f107 020f 	add.w	r2, r7, #15
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f959 	bl	8006150 <ST25DV_SetMB_CTRL_DYN_MBEN>
 8005e9e:	4603      	mov	r3, r0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <ST25DV_ResetMBEN_Dyn>:
/**
  * @brief  Unsets the Mailbox Enable dynamic configuration.
  * @return int32_t enum status.
  */
int32_t ST25DV_ResetMBEN_Dyn( ST25DV_Object_t* pObj )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint8_t reg_value = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]
    
  /* Write MB_CTRL_DYN register */
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3318      	adds	r3, #24
 8005eb8:	f107 020f 	add.w	r2, r7, #15
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f946 	bl	8006150 <ST25DV_SetMB_CTRL_DYN_MBEN>
 8005ec4:	4603      	mov	r3, r0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <ST25DV_ReadMBLength_Dyn>:
  * @brief  Reads the Mailbox message length dynamic register.
  * @param  pMBLength Pointer on a uint8_t used to return the Mailbox message length.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadMBLength_Dyn( ST25DV_Object_t* pObj, uint8_t * const pMBLength )
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_GetMBLEN_DYN_MBLEN( &(pObj->Ctx),pMBLength );
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3318      	adds	r3, #24
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f91f 	bl	8006122 <ST25DV_GetMBLEN_DYN_MBLEN>
 8005ee4:	4603      	mov	r3, r0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <ReadRegWrap>:

static int32_t ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t len)
{
 8005eee:	b590      	push	{r4, r7, lr}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	460b      	mov	r3, r1
 8005efc:	817b      	strh	r3, [r7, #10]
 8005efe:	4613      	mov	r3, r2
 8005f00:	813b      	strh	r3, [r7, #8]
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	617b      	str	r3, [r7, #20]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 8005f06:	897b      	ldrh	r3, [r7, #10]
 8005f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	691c      	ldr	r4, [r3, #16]
 8005f14:	893b      	ldrh	r3, [r7, #8]
 8005f16:	8979      	ldrh	r1, [r7, #10]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	20a6      	movs	r0, #166	; 0xa6
 8005f1c:	47a0      	blx	r4
 8005f1e:	4603      	mov	r3, r0
 8005f20:	e007      	b.n	8005f32 <ReadRegWrap+0x44>
  } else {
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	691c      	ldr	r4, [r3, #16]
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	8979      	ldrh	r1, [r7, #10]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	20ae      	movs	r0, #174	; 0xae
 8005f2e:	47a0      	blx	r4
 8005f30:	4603      	mov	r3, r0
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd90      	pop	{r4, r7, pc}

08005f3a <WriteRegWrap>:

static int32_t WriteRegWrap(void *handle, uint16_t Reg, const uint8_t* pData, uint16_t len)
{
 8005f3a:	b590      	push	{r4, r7, lr}
 8005f3c:	b089      	sub	sp, #36	; 0x24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	461a      	mov	r2, r3
 8005f46:	460b      	mov	r3, r1
 8005f48:	817b      	strh	r3, [r7, #10]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	61bb      	str	r3, [r7, #24]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 8005f52:	897b      	ldrh	r3, [r7, #10]
 8005f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	68dc      	ldr	r4, [r3, #12]
 8005f60:	893b      	ldrh	r3, [r7, #8]
 8005f62:	8979      	ldrh	r1, [r7, #10]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	20a6      	movs	r0, #166	; 0xa6
 8005f68:	47a0      	blx	r4
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	e027      	b.n	8005fbe <WriteRegWrap+0x84>
  } else {
    ret = pObj->IO.Write(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	68dc      	ldr	r4, [r3, #12]
 8005f72:	893b      	ldrh	r3, [r7, #8]
 8005f74:	8979      	ldrh	r1, [r7, #10]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	20ae      	movs	r0, #174	; 0xae
 8005f7a:	47a0      	blx	r4
 8005f7c:	61f8      	str	r0, [r7, #28]
  }

  if( ret == NFCTAG_OK )
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11b      	bne.n	8005fbc <WriteRegWrap+0x82>
  {
    int32_t pollstatus;
    /* Poll until EEPROM is available */
    int32_t tickstart = pObj->IO.GetTick();
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	4798      	blx	r3
 8005f8a:	6178      	str	r0, [r7, #20]
    /* Wait until ST25DV is ready or timeout occurs */
    do
    {
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2101      	movs	r1, #1
 8005f92:	20ae      	movs	r0, #174	; 0xae
 8005f94:	4798      	blx	r3
 8005f96:	6138      	str	r0, [r7, #16]
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	4798      	blx	r3
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005fa8:	d202      	bcs.n	8005fb0 <WriteRegWrap+0x76>
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1ed      	bne.n	8005f8c <WriteRegWrap+0x52>
    
    if( pollstatus != NFCTAG_OK )
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <WriteRegWrap+0x82>
    {
      ret = NFCTAG_TIMEOUT;
 8005fb6:	f06f 0302 	mvn.w	r3, #2
 8005fba:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3724      	adds	r7, #36	; 0x24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd90      	pop	{r4, r7, pc}

08005fc6 <ST25DV_ReadReg>:
#include "st25dv_reg.h"

int32_t ST25DV_ReadReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t* Data, uint16_t len)
{
 8005fc6:	b590      	push	{r4, r7, lr}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	817b      	strh	r3, [r7, #10]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685c      	ldr	r4, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6898      	ldr	r0, [r3, #8]
 8005fe2:	893b      	ldrh	r3, [r7, #8]
 8005fe4:	8979      	ldrh	r1, [r7, #10]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	47a0      	blx	r4
 8005fea:	4603      	mov	r3, r0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <ST25DV_WriteReg>:

int32_t ST25DV_WriteReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t const *Data, uint16_t len)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	461a      	mov	r2, r3
 8006000:	460b      	mov	r3, r1
 8006002:	817b      	strh	r3, [r7, #10]
 8006004:	4613      	mov	r3, r2
 8006006:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681c      	ldr	r4, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6898      	ldr	r0, [r3, #8]
 8006010:	893b      	ldrh	r3, [r7, #8]
 8006012:	8979      	ldrh	r1, [r7, #10]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	47a0      	blx	r4
 8006018:	4603      	mov	r3, r0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	bd90      	pop	{r4, r7, pc}

08006022 <ST25DV_GetICREF>:


/**** Copy generated code hereafter ****/
int32_t ST25DV_GetICREF (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 800602c:	2301      	movs	r3, #1
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	2117      	movs	r1, #23
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ffc7 	bl	8005fc6 <ST25DV_ReadReg>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <ST25DV_GetICREF+0x22>
    return NFCTAG_ERROR;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006042:	e000      	b.n	8006046 <ST25DV_GetICREF+0x24>
  return NFCTAG_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <ST25DV_GetUID>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetUID (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_UID_REG), (uint8_t *)value, 8))
 8006058:	2308      	movs	r3, #8
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	2118      	movs	r1, #24
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ffb1 	bl	8005fc6 <ST25DV_ReadReg>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <ST25DV_GetUID+0x22>
    return NFCTAG_ERROR;
 800606a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800606e:	e000      	b.n	8006072 <ST25DV_GetUID+0x24>
  return NFCTAG_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <ST25DV_GetMB_MODE_RW>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_MODE_RW (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), (uint8_t *)value, 1))
 8006084:	2301      	movs	r3, #1
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	210d      	movs	r1, #13
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff ff9b 	bl	8005fc6 <ST25DV_ReadReg>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <ST25DV_GetMB_MODE_RW+0x22>
    return NFCTAG_ERROR;
 8006096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800609a:	e00b      	b.n	80060b4 <ST25DV_GetMB_MODE_RW+0x3a>
  *value &= (ST25DV_MB_MODE_RW_MASK);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	701a      	strb	r2, [r3, #0]
  *value = *value >> (ST25DV_MB_MODE_RW_SHIFT);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	701a      	strb	r2, [r3, #0]
  return NFCTAG_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <ST25DV_SetMB_MODE_RW>:

int32_t ST25DV_SetMB_MODE_RW (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 80060c6:	f107 020f 	add.w	r2, r7, #15
 80060ca:	2301      	movs	r3, #1
 80060cc:	210d      	movs	r1, #13
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff ff79 	bl	8005fc6 <ST25DV_ReadReg>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <ST25DV_SetMB_MODE_RW+0x24>
    return NFCTAG_ERROR;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060de:	e01c      	b.n	800611a <ST25DV_SetMB_MODE_RW+0x5e>

  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	b25b      	sxtb	r3, r3
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_MB_MODE_RW_MASK));
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	b25b      	sxtb	r3, r3
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_MB_MODE_RW_SHIFT)) & (ST25DV_MB_MODE_RW_MASK)) |
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_MODE_REG), &reg_value, 1))
 80060fe:	f107 020f 	add.w	r2, r7, #15
 8006102:	2301      	movs	r3, #1
 8006104:	210d      	movs	r1, #13
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ff74 	bl	8005ff4 <ST25DV_WriteReg>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <ST25DV_SetMB_MODE_RW+0x5c>
    return NFCTAG_ERROR;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006116:	e000      	b.n	800611a <ST25DV_SetMB_MODE_RW+0x5e>
  return NFCTAG_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <ST25DV_GetMBLEN_DYN_MBLEN>:

int32_t ST25DV_GetMBLEN_DYN_MBLEN (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_MBLEN_DYN_REG), (uint8_t *)value, 1))
 800612c:	2301      	movs	r3, #1
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	f242 0107 	movw	r1, #8199	; 0x2007
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff46 	bl	8005fc6 <ST25DV_ReadReg>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <ST25DV_GetMBLEN_DYN_MBLEN+0x24>
    return NFCTAG_ERROR;
 8006140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006144:	e000      	b.n	8006148 <ST25DV_GetMBLEN_DYN_MBLEN+0x26>
  return NFCTAG_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <ST25DV_SetMB_CTRL_DYN_MBEN>:
  *value = *value >> (ST25DV_MB_CTRL_DYN_MBEN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetMB_CTRL_DYN_MBEN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 800615a:	f107 020f 	add.w	r2, r7, #15
 800615e:	2301      	movs	r3, #1
 8006160:	f242 0106 	movw	r1, #8198	; 0x2006
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff2e 	bl	8005fc6 <ST25DV_ReadReg>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <ST25DV_SetMB_CTRL_DYN_MBEN+0x26>
    return NFCTAG_ERROR;
 8006170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006174:	e01d      	b.n	80061b2 <ST25DV_SetMB_CTRL_DYN_MBEN+0x62>

  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b25b      	sxtb	r3, r3
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	b25b      	sxtb	r3, r3
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 800618c:	4313      	orrs	r3, r2
 800618e:	b25b      	sxtb	r3, r3
 8006190:	b2db      	uxtb	r3, r3
 8006192:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 8006194:	f107 020f 	add.w	r2, r7, #15
 8006198:	2301      	movs	r3, #1
 800619a:	f242 0106 	movw	r1, #8198	; 0x2006
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff ff28 	bl	8005ff4 <ST25DV_WriteReg>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <ST25DV_SetMB_CTRL_DYN_MBEN+0x60>
    return NFCTAG_ERROR;
 80061aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ae:	e000      	b.n	80061b2 <ST25DV_SetMB_CTRL_DYN_MBEN+0x62>
  return NFCTAG_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <ST25DV_GetMB_CTRL_DYN_ALL>:
  *value = *value >> (ST25DV_MB_CTRL_DYN_CURRENTMSG_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_GetMB_CTRL_DYN_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), (uint8_t *)value, 1))
 80061c4:	2301      	movs	r3, #1
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	f242 0106 	movw	r1, #8198	; 0x2006
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fefa 	bl	8005fc6 <ST25DV_ReadReg>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <ST25DV_GetMB_CTRL_DYN_ALL+0x24>
    return NFCTAG_ERROR;
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061dc:	e000      	b.n	80061e0 <ST25DV_GetMB_CTRL_DYN_ALL+0x26>
  return NFCTAG_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <ST25DV_SetMB_WDG_DELAY>:
  *value = *value >> (ST25DV_MB_WDG_DELAY_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetMB_WDG_DELAY (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 80061f2:	f107 020f 	add.w	r2, r7, #15
 80061f6:	2301      	movs	r3, #1
 80061f8:	210e      	movs	r1, #14
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fee3 	bl	8005fc6 <ST25DV_ReadReg>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <ST25DV_SetMB_WDG_DELAY+0x24>
    return NFCTAG_ERROR;
 8006206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800620a:	e01c      	b.n	8006246 <ST25DV_SetMB_WDG_DELAY+0x5e>

  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	b25b      	sxtb	r3, r3
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	b25a      	sxtb	r2, r3
                (reg_value & ~(ST25DV_MB_WDG_DELAY_MASK));
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	b25b      	sxtb	r3, r3
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	b25b      	sxtb	r3, r3
  reg_value = ( (*value << (ST25DV_MB_WDG_DELAY_SHIFT)) & (ST25DV_MB_WDG_DELAY_MASK)) |
 8006222:	4313      	orrs	r3, r2
 8006224:	b25b      	sxtb	r3, r3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	73fb      	strb	r3, [r7, #15]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_WDG_REG), &reg_value, 1))
 800622a:	f107 020f 	add.w	r2, r7, #15
 800622e:	2301      	movs	r3, #1
 8006230:	210e      	movs	r1, #14
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fede 	bl	8005ff4 <ST25DV_WriteReg>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <ST25DV_SetMB_WDG_DELAY+0x5c>
    return NFCTAG_ERROR;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006242:	e000      	b.n	8006246 <ST25DV_SetMB_WDG_DELAY+0x5e>
  return NFCTAG_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <ST25DV_GetGPO_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b082      	sub	sp, #8
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 8006258:	2301      	movs	r3, #1
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	2100      	movs	r1, #0
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff feb1 	bl	8005fc6 <ST25DV_ReadReg>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <ST25DV_GetGPO_ALL+0x22>
    return NFCTAG_ERROR;
 800626a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800626e:	e000      	b.n	8006272 <ST25DV_GetGPO_ALL+0x24>
  return NFCTAG_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <ST25DV_SetGPO_ALL>:

int32_t ST25DV_SetGPO_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 8006284:	2301      	movs	r3, #1
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff feb2 	bl	8005ff4 <ST25DV_WriteReg>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <ST25DV_SetGPO_ALL+0x22>
    return NFCTAG_ERROR;
 8006296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800629a:	e000      	b.n	800629e <ST25DV_SetGPO_ALL+0x24>
  return NFCTAG_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <ST25DV_GetITSTS_DYN_ALL>:
  *value = *value >> (ST25DV_ITSTS_DYN_RFWRITE_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_GetITSTS_DYN_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_ITSTS_DYN_REG), (uint8_t *)value, 1))
 80062b0:	2301      	movs	r3, #1
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	f242 0105 	movw	r1, #8197	; 0x2005
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff fe84 	bl	8005fc6 <ST25DV_ReadReg>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <ST25DV_GetITSTS_DYN_ALL+0x24>
    return NFCTAG_ERROR;
 80062c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062c8:	e000      	b.n	80062cc <ST25DV_GetITSTS_DYN_ALL+0x26>
  return NFCTAG_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <ST25DV_GetEH_CTRL_DYN_FIELD_ON>:
  *value = *value >> (ST25DV_EH_CTRL_DYN_EH_ON_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_GetEH_CTRL_DYN_FIELD_ON (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_CTRL_DYN_REG), (uint8_t *)value, 1))
 80062de:	2301      	movs	r3, #1
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	f242 0102 	movw	r1, #8194	; 0x2002
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fe6d 	bl	8005fc6 <ST25DV_ReadReg>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <ST25DV_GetEH_CTRL_DYN_FIELD_ON+0x24>
    return NFCTAG_ERROR;
 80062f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062f6:	e00d      	b.n	8006314 <ST25DV_GetEH_CTRL_DYN_FIELD_ON+0x40>
  *value &= (ST25DV_EH_CTRL_DYN_FIELD_ON_MASK);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	b2da      	uxtb	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	701a      	strb	r2, [r3, #0]
  *value = *value >> (ST25DV_EH_CTRL_DYN_FIELD_ON_SHIFT);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	089b      	lsrs	r3, r3, #2
 800630c:	b2da      	uxtb	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	701a      	strb	r2, [r3, #0]
  return NFCTAG_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <logHexBuf>:
#include "st25ftm_config.h"

ST25FTM_InternalState_t gFtmState;

void logHexBuf(uint8_t* buf, uint32_t len)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(buf);
  UNUSED(len);
#endif
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <ST25FTM_GetAcknowledgeStatus>:
 
ST25FTM_Acknowledge_Status_t ST25FTM_GetAcknowledgeStatus(void)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b0c2      	sub	sp, #264	; 0x108
 8006336:	af00      	add	r7, sp, #0
  uint8_t msg[ST25FTM_BUFFER_LENGTH];
  uint32_t msg_len = 0U;
 8006338:	463b      	mov	r3, r7
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
  ST25FTM_Acknowledge_Status_t status;
  if(ST25FTM_GetMessageOwner() == ST25FTM_MESSAGE_PEER)
 800633e:	f000 f917 	bl	8006570 <ST25FTM_GetMessageOwner>
 8006342:	4603      	mov	r3, r0
 8006344:	2b02      	cmp	r3, #2
 8006346:	d120      	bne.n	800638a <ST25FTM_GetAcknowledgeStatus+0x58>
  {
    if(ST25FTM_ReadMessage(msg, &msg_len) != ST25FTM_MSG_OK)
 8006348:	463a      	mov	r2, r7
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f8c8 	bl	80064e4 <ST25FTM_ReadMessage>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <ST25FTM_GetAcknowledgeStatus+0x30>
    {
      status = ST25FTM_ACK_BUSY;
 800635a:	23ff      	movs	r3, #255	; 0xff
 800635c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8006360:	e016      	b.n	8006390 <ST25FTM_GetAcknowledgeStatus+0x5e>
    } else {
      if(msg[0] == ((uint8_t)ST25FTM_SEGMENT_OK | (uint8_t)ST25FTM_STATUS_BYTE))
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d103      	bne.n	8006372 <ST25FTM_GetAcknowledgeStatus+0x40>
      {
        status = ST25FTM_SEGMENT_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8006370:	e00e      	b.n	8006390 <ST25FTM_GetAcknowledgeStatus+0x5e>
      } else if (msg[0] == ((uint8_t)ST25FTM_CRC_ERROR | (uint8_t)ST25FTM_STATUS_BYTE))
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b81      	cmp	r3, #129	; 0x81
 8006378:	d103      	bne.n	8006382 <ST25FTM_GetAcknowledgeStatus+0x50>
      {
        status = ST25FTM_CRC_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8006380:	e006      	b.n	8006390 <ST25FTM_GetAcknowledgeStatus+0x5e>
      } else {
        /* Unexpected value, this is not a ACK */
        status = ST25FTM_ACK_ERROR;
 8006382:	23fe      	movs	r3, #254	; 0xfe
 8006384:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 8006388:	e002      	b.n	8006390 <ST25FTM_GetAcknowledgeStatus+0x5e>
      }
    }
  } else {

    status = ST25FTM_ACK_BUSY;
 800638a:	23ff      	movs	r3, #255	; 0xff
 800638c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  }
  return status;
 8006390:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
}
 8006394:	4618      	mov	r0, r3
 8006396:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <ST25FTM_State_Init>:

void ST25FTM_State_Init(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  gFtmState.state = ST25FTM_IDLE;
 80063a4:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <ST25FTM_State_Init+0x3c>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
  gFtmState.lastState = ST25FTM_IDLE;
 80063aa:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <ST25FTM_State_Init+0x3c>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	705a      	strb	r2, [r3, #1]
  gFtmState.rfField = ST25FTM_FIELD_OFF;
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <ST25FTM_State_Init+0x3c>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	709a      	strb	r2, [r3, #2]
  gFtmState.totalDataLength = 0;
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <ST25FTM_State_Init+0x3c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	605a      	str	r2, [r3, #4]
  gFtmState.retryLength = 0;
 80063bc:	4b07      	ldr	r3, [pc, #28]	; (80063dc <ST25FTM_State_Init+0x3c>)
 80063be:	2200      	movs	r2, #0
 80063c0:	609a      	str	r2, [r3, #8]
  gFtmState.lastTick = ST25FTM_TICK();
 80063c2:	f7fb fe6d 	bl	80020a0 <HAL_GetTick>
 80063c6:	4603      	mov	r3, r0
 80063c8:	4a04      	ldr	r2, [pc, #16]	; (80063dc <ST25FTM_State_Init+0x3c>)
 80063ca:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0

  ST25FTM_TxStateInit();
 80063ce:	f001 fabd 	bl	800794c <ST25FTM_TxStateInit>
  ST25FTM_RxStateInit();
 80063d2:	f000 fcb9 	bl	8006d48 <ST25FTM_RxStateInit>
}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20002334 	.word	0x20002334

080063e0 <ST25FTM_CompareTime>:


uint32_t ST25FTM_CompareTime(uint32_t a, uint32_t b)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t result;
  if(a > b)
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d904      	bls.n	80063fc <ST25FTM_CompareTime+0x1c>
  {
    result = a - b;
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	e003      	b.n	8006404 <ST25FTM_CompareTime+0x24>
  } else {
    result = b - a;
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006404:	68fb      	ldr	r3, [r7, #12]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <ST25FTM_DeviceInit>:
                      } while(0)



void ST25FTM_DeviceInit(void)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
  ST25DV_EN_STATUS MB_mode = ST25DV_DISABLE;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
  const ST25DV_PASSWD PassWord = {.MsbPasswd = 0x0, .LsbPasswd = 0x0};
 800641c:	2300      	movs	r3, #0
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	2300      	movs	r3, #0
 8006422:	60bb      	str	r3, [r7, #8]

  BSP_NFCTAG_PresentI2CPassword(0,PassWord );
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	e893 0006 	ldmia.w	r3, {r1, r2}
 800642a:	2000      	movs	r0, #0
 800642c:	f7ff f91a 	bl	8005664 <BSP_NFCTAG_PresentI2CPassword>

  /* If not activated, activate Mailbox */
  BSP_NFCTAG_ReadMBMode(0,&MB_mode);
 8006430:	f107 030f 	add.w	r3, r7, #15
 8006434:	4619      	mov	r1, r3
 8006436:	2000      	movs	r0, #0
 8006438:	f7ff f928 	bl	800568c <BSP_NFCTAG_ReadMBMode>
  if( MB_mode == ST25DV_DISABLE )
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <ST25FTM_DeviceInit+0x3a>
  {
    BSP_NFCTAG_WriteMBMode(0,ST25DV_ENABLE );
 8006442:	2101      	movs	r1, #1
 8006444:	2000      	movs	r0, #0
 8006446:	f7ff f931 	bl	80056ac <BSP_NFCTAG_WriteMBMode>
 800644a:	e005      	b.n	8006458 <ST25FTM_DeviceInit+0x46>
  }
  else
  {
    /* if already activated Clear MB content and flag */
    BSP_NFCTAG_ResetMBEN_Dyn(0);
 800644c:	2000      	movs	r0, #0
 800644e:	f7ff f9bb 	bl	80057c8 <BSP_NFCTAG_ResetMBEN_Dyn>
    BSP_NFCTAG_SetMBEN_Dyn(0);
 8006452:	2000      	movs	r0, #0
 8006454:	f7ff f9aa 	bl	80057ac <BSP_NFCTAG_SetMBEN_Dyn>
  }
  
  /* Disable MB watchdog feature */
  BSP_NFCTAG_WriteMBWDG(0,0);
 8006458:	2100      	movs	r1, #0
 800645a:	2000      	movs	r0, #0
 800645c:	f7ff f938 	bl	80056d0 <BSP_NFCTAG_WriteMBWDG>

  InitITGPOMode( ST25DV_GPO_RFPUTMSG_MASK | ST25DV_GPO_RFGETMSG_MASK | ST25DV_GPO_FIELDCHANGE_MASK | ST25DV_GPO_ENABLE_MASK );
 8006460:	20b8      	movs	r0, #184	; 0xb8
 8006462:	f000 f931 	bl	80066c8 <InitITGPOMode>

}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <ST25FTM_WriteMessage>:
  * @param  pData Pointer to the data to write.
  * @param  NbBytes Number of bytes to write.
  * @return NFCTAG_StatusTypeDef status.
  */
ST25FTM_MessageStatus_t ST25FTM_WriteMessage(uint8_t* msg, uint32_t msg_len)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  int ret = NFCTAG_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
  ST25DV_MB_CTRL_DYN_STATUS data = {0};
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	809a      	strh	r2, [r3, #4]
  
  /* Check if Mailbox is available */
  ret = BSP_NFCTAG_ReadMBCtrl_Dyn(0, &data );
 8006488:	f107 030c 	add.w	r3, r7, #12
 800648c:	4619      	mov	r1, r3
 800648e:	2000      	movs	r0, #0
 8006490:	f7ff f97c 	bl	800578c <BSP_NFCTAG_ReadMBCtrl_Dyn>
 8006494:	6178      	str	r0, [r7, #20]
  if( ret != NFCTAG_OK )
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <ST25FTM_WriteMessage+0x30>
  {
    return ST25FTM_MSG_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e01a      	b.n	80064d6 <ST25FTM_WriteMessage+0x66>
  }
  
  /* If available, write data */
  if( (data.HostPutMsg == 0) && (data.RfPutMsg == 0) )
 80064a0:	7b7b      	ldrb	r3, [r7, #13]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10f      	bne.n	80064c6 <ST25FTM_WriteMessage+0x56>
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <ST25FTM_WriteMessage+0x56>
  {
    ret = BSP_NFCTAG_WriteMailboxData(0, msg, msg_len );
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7ff f935 	bl	8005724 <BSP_NFCTAG_WriteMailboxData>
 80064ba:	6178      	str	r0, [r7, #20]
 80064bc:	bf00      	nop
  else 
  {
    return ST25FTM_MSG_BUSY;
  }
  
  if(ret == NFCTAG_OK)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <ST25FTM_WriteMessage+0x64>
 80064c4:	e001      	b.n	80064ca <ST25FTM_WriteMessage+0x5a>
    return ST25FTM_MSG_BUSY;
 80064c6:	2302      	movs	r3, #2
 80064c8:	e005      	b.n	80064d6 <ST25FTM_WriteMessage+0x66>
  {
    mailboxStatus = ST25FTM_MESSAGE_ME;
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <ST25FTM_WriteMessage+0x70>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	701a      	strb	r2, [r3, #0]
    return ST25FTM_MSG_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	e000      	b.n	80064d6 <ST25FTM_WriteMessage+0x66>
  } else {
    return ST25FTM_MSG_ERROR;
 80064d4:	2301      	movs	r3, #1
  }
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20002136 	.word	0x20002136

080064e4 <ST25FTM_ReadMessage>:
  * @param  pData Pointer to the read data to store.
  * @param  pLength Number of bytes to read.
  * @return NFCTAG_StatusTypeDef status.
  */
ST25FTM_MessageStatus_t ST25FTM_ReadMessage(uint8_t *msg, uint32_t* msg_len)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  int ret = NFCTAG_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  uint16_t mblength = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	817b      	strh	r3, [r7, #10]
  
  /* Read length of message */
  ret = BSP_NFCTAG_ReadMBLength_Dyn(0,  (uint8_t *)&mblength );
 80064f6:	f107 030a 	add.w	r3, r7, #10
 80064fa:	4619      	mov	r1, r3
 80064fc:	2000      	movs	r0, #0
 80064fe:	f7ff f971 	bl	80057e4 <BSP_NFCTAG_ReadMBLength_Dyn>
 8006502:	60f8      	str	r0, [r7, #12]
  if( ret != NFCTAG_OK )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <ST25FTM_ReadMessage+0x2a>
  {
    return ST25FTM_MSG_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e029      	b.n	8006562 <ST25FTM_ReadMessage+0x7e>
  }
  *msg_len = mblength + 1;
 800650e:	897b      	ldrh	r3, [r7, #10]
 8006510:	3301      	adds	r3, #1
 8006512:	461a      	mov	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	601a      	str	r2, [r3, #0]
  
  /* Read all data in Mailbox */
  ret = BSP_NFCTAG_ReadMailboxData(0, msg, 0, *msg_len );
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	2200      	movs	r2, #0
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	2000      	movs	r0, #0
 8006524:	f7ff f8e6 	bl	80056f4 <BSP_NFCTAG_ReadMailboxData>
 8006528:	60f8      	str	r0, [r7, #12]
  if(ret == NFCTAG_OK)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d117      	bne.n	8006560 <ST25FTM_ReadMessage+0x7c>
  {
    mailboxStatus = ST25FTM_MESSAGE_EMPTY;
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <ST25FTM_ReadMessage+0x88>)
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
    /* Trick to automatically detect the max frame length of the reader
       To have this auto detection working, the reader must send a long command
       before receiveing a long response.
    */
    ST25FTM_Ctrl_Byte_t ctrl;
    ctrl.byte = msg[0];
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	723b      	strb	r3, [r7, #8]
    if((!ST25FTM_CTRL_HAS_PKT_LEN(ctrl)) && !(msg[0] & ST25FTM_STATUS_BYTE))
 800653c:	7a3b      	ldrb	r3, [r7, #8]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <ST25FTM_ReadMessage+0x78>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	b25b      	sxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	db04      	blt.n	800655c <ST25FTM_ReadMessage+0x78>
    {
      ST25FTM_SetRxFrameMaxLength(*msg_len);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fa62 	bl	8006a20 <ST25FTM_SetRxFrameMaxLength>
    }
    return ST25FTM_MSG_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <ST25FTM_ReadMessage+0x7e>
  }
  return ST25FTM_MSG_ERROR;
 8006560:	2301      	movs	r3, #1
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20002136 	.word	0x20002136

08006570 <ST25FTM_GetMessageOwner>:


ST25FTM_MessageOwner_t ST25FTM_GetMessageOwner(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Check if GPO IT has raised */
  ManageGPO();
 8006574:	f000 f8fe 	bl	8006774 <ManageGPO>
  return mailboxStatus;
 8006578:	4b01      	ldr	r3, [pc, #4]	; (8006580 <ST25FTM_GetMessageOwner+0x10>)
 800657a:	781b      	ldrb	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20002136 	.word	0x20002136

08006584 <ST25FTM_UpdateFieldStatus>:

void ST25FTM_UpdateFieldStatus(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
  ManageGPO();
 800658a:	f000 f8f3 	bl	8006774 <ManageGPO>
  // first case: Both field transition occured, need to get the RF state from the register
  // second case: no RF transition, but as RF is supposed to be OFF, it doesn't harm to check the register
  if( ((FieldOffEvt == 1) && (FieldOnEvt == 1)) ||
 800658e:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <ST25FTM_UpdateFieldStatus+0xb4>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d103      	bne.n	800659e <ST25FTM_UpdateFieldStatus+0x1a>
 8006596:	4b29      	ldr	r3, [pc, #164]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d00b      	beq.n	80065b6 <ST25FTM_UpdateFieldStatus+0x32>
      (((FieldOffEvt == 0) && (FieldOnEvt == 0)) && (gFtmState.rfField == ST25FTM_FIELD_OFF)))
 800659e:	4b26      	ldr	r3, [pc, #152]	; (8006638 <ST25FTM_UpdateFieldStatus+0xb4>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
  if( ((FieldOffEvt == 1) && (FieldOnEvt == 1)) ||
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d127      	bne.n	80065f6 <ST25FTM_UpdateFieldStatus+0x72>
      (((FieldOffEvt == 0) && (FieldOnEvt == 0)) && (gFtmState.rfField == ST25FTM_FIELD_OFF)))
 80065a6:	4b25      	ldr	r3, [pc, #148]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d123      	bne.n	80065f6 <ST25FTM_UpdateFieldStatus+0x72>
 80065ae:	4b24      	ldr	r3, [pc, #144]	; (8006640 <ST25FTM_UpdateFieldStatus+0xbc>)
 80065b0:	789b      	ldrb	r3, [r3, #2]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11f      	bne.n	80065f6 <ST25FTM_UpdateFieldStatus+0x72>
  {
    // can't decide, need to read the register to get actual state 
    ST25DV_FIELD_STATUS field;
    int32_t status = BSP_NFCTAG_GetRFField_Dyn(0,&field);
 80065b6:	1cfb      	adds	r3, r7, #3
 80065b8:	4619      	mov	r1, r3
 80065ba:	2000      	movs	r0, #0
 80065bc:	f7ff f8d6 	bl	800576c <BSP_NFCTAG_GetRFField_Dyn>
 80065c0:	6078      	str	r0, [r7, #4]
    if((field == ST25DV_FIELD_ON) || (status == NFCTAG_NACK))
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d003      	beq.n	80065d0 <ST25FTM_UpdateFieldStatus+0x4c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f113 0f66 	cmn.w	r3, #102	; 0x66
 80065ce:	d106      	bne.n	80065de <ST25FTM_UpdateFieldStatus+0x5a>
    {
      if(FieldOnEvt || FieldOffEvt)
 80065d0:	4b1a      	ldr	r3, [pc, #104]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
        ST25FTM_LOG("FtmInfo Field Off->On\r\n");
      gFtmState.rfField = ST25FTM_FIELD_ON;
 80065d6:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <ST25FTM_UpdateFieldStatus+0xbc>)
 80065d8:	2201      	movs	r2, #1
 80065da:	709a      	strb	r2, [r3, #2]
 80065dc:	e005      	b.n	80065ea <ST25FTM_UpdateFieldStatus+0x66>
    } else {
      gFtmState.rfField = ST25FTM_FIELD_OFF;
 80065de:	4b18      	ldr	r3, [pc, #96]	; (8006640 <ST25FTM_UpdateFieldStatus+0xbc>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	709a      	strb	r2, [r3, #2]
      if(FieldOnEvt || FieldOffEvt)
 80065e4:	4b15      	ldr	r3, [pc, #84]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
        ST25FTM_LOG("FtmInfo Field On->Off\r\n");
    }
    FieldOnEvt = 0;
 80065ea:	4b14      	ldr	r3, [pc, #80]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
    FieldOffEvt = 0;
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <ST25FTM_UpdateFieldStatus+0xb4>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]

  }
  // Field transition to OFF
  if( (FieldOffEvt == 1) &&  (FieldOnEvt == 0) )
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <ST25FTM_UpdateFieldStatus+0xb4>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d10a      	bne.n	8006614 <ST25FTM_UpdateFieldStatus+0x90>
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <ST25FTM_UpdateFieldStatus+0x90>
  {
    FieldOffEvt = 0;
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <ST25FTM_UpdateFieldStatus+0xb4>)
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
    gFtmState.rfField = ST25FTM_FIELD_OFF;
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <ST25FTM_UpdateFieldStatus+0xbc>)
 800660e:	2200      	movs	r2, #0
 8006610:	709a      	strb	r2, [r3, #2]
    ST25FTM_LOG("FtmInfo Field Off\r\n");
    return;
 8006612:	e00d      	b.n	8006630 <ST25FTM_UpdateFieldStatus+0xac>
  }
  // Field transition to ON
  if( (FieldOffEvt == 0) && (FieldOnEvt == 1) )
 8006614:	4b08      	ldr	r3, [pc, #32]	; (8006638 <ST25FTM_UpdateFieldStatus+0xb4>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <ST25FTM_UpdateFieldStatus+0xac>
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d105      	bne.n	8006630 <ST25FTM_UpdateFieldStatus+0xac>
  {
    FieldOnEvt = 0;
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <ST25FTM_UpdateFieldStatus+0xb8>)
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
    gFtmState.rfField = ST25FTM_FIELD_ON;
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <ST25FTM_UpdateFieldStatus+0xbc>)
 800662c:	2201      	movs	r2, #1
 800662e:	709a      	strb	r2, [r3, #2]
    ST25FTM_LOG("FtmInfo Field On\r\n");
  }
}
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20002135 	.word	0x20002135
 800663c:	20002134 	.word	0x20002134
 8006640:	20002334 	.word	0x20002334

08006644 <MX_GPIO_Init>:
  * @brief  Enable & initialize the GPO interrupt.
  * @param  ITConfig Value of the interrupt register to configure.
  * @return int32_t status.
  */
void MX_GPIO_Init(const uint16_t ITConfig)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	80fb      	strh	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664e:	f107 0314 	add.w	r3, r7, #20
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	605a      	str	r2, [r3, #4]
 8006658:	609a      	str	r2, [r3, #8]
 800665a:	60da      	str	r2, [r3, #12]
 800665c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800665e:	4b18      	ldr	r3, [pc, #96]	; (80066c0 <MX_GPIO_Init+0x7c>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <MX_GPIO_Init+0x7c>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6313      	str	r3, [r2, #48]	; 0x30
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <MX_GPIO_Init+0x7c>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006676:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <MX_GPIO_Init+0x7c>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	4a11      	ldr	r2, [pc, #68]	; (80066c0 <MX_GPIO_Init+0x7c>)
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	6313      	str	r3, [r2, #48]	; 0x30
 8006682:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <MX_GPIO_Init+0x7c>)
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800668e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = ITConfig;
 8006694:	88fb      	ldrh	r3, [r7, #6]
 8006696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	4619      	mov	r1, r3
 80066a2:	4808      	ldr	r0, [pc, #32]	; (80066c4 <MX_GPIO_Init+0x80>)
 80066a4:	f7fc f880 	bl	80027a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	2028      	movs	r0, #40	; 0x28
 80066ae:	f7fb fe02 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80066b2:	2028      	movs	r0, #40	; 0x28
 80066b4:	f7fb fe1b 	bl	80022ee <HAL_NVIC_EnableIRQ>

}
 80066b8:	bf00      	nop
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40020000 	.word	0x40020000

080066c8 <InitITGPOMode>:
static int32_t InitITGPOMode(const uint16_t ITConfig)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = NFCTAG_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
  ST25DV_UID uid;
  uint8_t ProductRef;
  
  /* Init GPO Activation Flag */
  GPO_Activated = 0;
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <InitITGPOMode+0xa0>)
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
  // set both on/off events to 1, to force field register read.
  FieldOffEvt = 1;
 80066dc:	4b23      	ldr	r3, [pc, #140]	; (800676c <InitITGPOMode+0xa4>)
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
  FieldOnEvt = 1;
 80066e2:	4b23      	ldr	r3, [pc, #140]	; (8006770 <InitITGPOMode+0xa8>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	701a      	strb	r2, [r3, #0]

  /* set correct edge setting depending on GPO technology */
  ST25_RETRY(BSP_NFCTAG_ReadUID(BSP_NFCTAG_INSTANCE, &uid));
 80066e8:	230f      	movs	r3, #15
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	e013      	b.n	800671c <InitITGPOMode+0x54>
 80066f4:	f107 0308 	add.w	r3, r7, #8
 80066f8:	4619      	mov	r1, r3
 80066fa:	2000      	movs	r0, #0
 80066fc:	f7fe ffa2 	bl	8005644 <BSP_NFCTAG_ReadUID>
 8006700:	61b8      	str	r0, [r7, #24]
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <InitITGPOMode+0x46>
 8006708:	2028      	movs	r0, #40	; 0x28
 800670a:	f7fb fcd5 	bl	80020b8 <HAL_Delay>
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	1e5a      	subs	r2, r3, #1
 8006712:	61fa      	str	r2, [r7, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dc01      	bgt.n	800671c <InitITGPOMode+0x54>
 8006718:	230f      	movs	r3, #15
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e8      	bne.n	80066f4 <InitITGPOMode+0x2c>
  ProductRef = (uid.MsbUid & 0xFF00) >> 8;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	74fb      	strb	r3, [r7, #19]


  if(ST25DV_AM_I_OPEN_DRAIN(ProductRef))
 8006728:	7cfb      	ldrb	r3, [r7, #19]
 800672a:	2b26      	cmp	r3, #38	; 0x26
 800672c:	d002      	beq.n	8006734 <InitITGPOMode+0x6c>
 800672e:	7cfb      	ldrb	r3, [r7, #19]
 8006730:	2b24      	cmp	r3, #36	; 0x24
 8006732:	d103      	bne.n	800673c <InitITGPOMode+0x74>
  {
    /* GPO Open drain */
	  MX_GPIO_Init(GPIO_MODE_IT_FALLING);
 8006734:	2000      	movs	r0, #0
 8006736:	f7ff ff85 	bl	8006644 <MX_GPIO_Init>
 800673a:	e002      	b.n	8006742 <InitITGPOMode+0x7a>
  } 
  else 
  {
    /* GPO CMOS */
	  MX_GPIO_Init(GPIO_MODE_IT_RISING);
 800673c:	2000      	movs	r0, #0
 800673e:	f7ff ff81 	bl	8006644 <MX_GPIO_Init>
  }
  
  /* Set GPO Configuration */
  ret = BSP_NFCTAG_ConfigIT(BSP_NFCTAG_INSTANCE, ITConfig);
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	4619      	mov	r1, r3
 8006746:	2000      	movs	r0, #0
 8006748:	f7fe ff5e 	bl	8005608 <BSP_NFCTAG_ConfigIT>
 800674c:	6178      	str	r0, [r7, #20]
  /* Enable interruption */
  HAL_NVIC_SetPriority(BSP_GPO_EXTI, 0, 1);
 800674e:	2201      	movs	r2, #1
 8006750:	2100      	movs	r1, #0
 8006752:	2028      	movs	r0, #40	; 0x28
 8006754:	f7fb fdaf 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BSP_GPO_EXTI);
 8006758:	2028      	movs	r0, #40	; 0x28
 800675a:	f7fb fdc8 	bl	80022ee <HAL_NVIC_EnableIRQ>
  
  return ret;
 800675e:	697b      	ldr	r3, [r7, #20]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	200024d8 	.word	0x200024d8
 800676c:	20002135 	.word	0x20002135
 8006770:	20002134 	.word	0x20002134

08006774 <ManageGPO>:
  * @details This function reads the interrupt status register from the ST25DV to report which interrupt(s) occured.
  * @param gpo Pointer on IT_GPO_STATUS structure, to return the status of the GPO irq.
  * @return None.
  */
static void ManageGPO( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
  uint8_t itstatus;
 
  if(GPO_Activated == 1)
 800677a:	4b23      	ldr	r3, [pc, #140]	; (8006808 <ManageGPO+0x94>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d13e      	bne.n	8006800 <ManageGPO+0x8c>
  {
    GPO_Activated = 0;
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <ManageGPO+0x94>)
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]

    ST25_RETRY(BSP_NFCTAG_ReadITSTStatus_Dyn(BSP_NFCTAG_INSTANCE, &itstatus));
 8006788:	230f      	movs	r3, #15
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	e012      	b.n	80067ba <ManageGPO+0x46>
 8006794:	1dfb      	adds	r3, r7, #7
 8006796:	4619      	mov	r1, r3
 8006798:	2000      	movs	r0, #0
 800679a:	f7fe ffd7 	bl	800574c <BSP_NFCTAG_ReadITSTStatus_Dyn>
 800679e:	60b8      	str	r0, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <ManageGPO+0x38>
 80067a6:	2028      	movs	r0, #40	; 0x28
 80067a8:	f7fb fc86 	bl	80020b8 <HAL_Delay>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1e5a      	subs	r2, r3, #1
 80067b0:	60fa      	str	r2, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dc01      	bgt.n	80067ba <ManageGPO+0x46>
 80067b6:	230f      	movs	r3, #15
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e9      	bne.n	8006794 <ManageGPO+0x20>
      
    if((itstatus & ST25DV_ITSTS_DYN_FIELDFALLING_MASK) == ST25DV_ITSTS_DYN_FIELDFALLING_MASK)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <ManageGPO+0x5c>
    {
      FieldOffEvt = 1;
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <ManageGPO+0x98>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
    }
    
    if((itstatus & ST25DV_ITSTS_DYN_FIELDRISING_MASK) == ST25DV_ITSTS_DYN_FIELDRISING_MASK)
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <ManageGPO+0x6c>
    {
      FieldOnEvt = 1;
 80067da:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <ManageGPO+0x9c>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
    }
    
    if((itstatus & ST25DV_ITSTS_DYN_RFPUTMSG_MASK) == ST25DV_ITSTS_DYN_RFPUTMSG_MASK)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <ManageGPO+0x7c>
    {

      mailboxStatus = ST25FTM_MESSAGE_PEER;
 80067ea:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <ManageGPO+0xa0>)
 80067ec:	2202      	movs	r2, #2
 80067ee:	701a      	strb	r2, [r3, #0]
    }
    
    if((itstatus & ST25DV_ITSTS_DYN_RFGETMSG_MASK) == ST25DV_ITSTS_DYN_RFGETMSG_MASK)
 80067f0:	79fb      	ldrb	r3, [r7, #7]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <ManageGPO+0x8c>
    {
      mailboxStatus = ST25FTM_MESSAGE_EMPTY;
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <ManageGPO+0xa0>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	200024d8 	.word	0x200024d8
 800680c:	20002135 	.word	0x20002135
 8006810:	20002134 	.word	0x20002134
 8006814:	20002136 	.word	0x20002136

08006818 <ST25FTM_CRC_Initialize>:

/* CRC services */
void ST25FTM_CRC_Initialize(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
  __HAL_RCC_CRC_CLK_ENABLE();
 800681e:	4b17      	ldr	r3, [pc, #92]	; (800687c <ST25FTM_CRC_Initialize+0x64>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	4a16      	ldr	r2, [pc, #88]	; (800687c <ST25FTM_CRC_Initialize+0x64>)
 8006824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006828:	6313      	str	r3, [r2, #48]	; 0x30
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <ST25FTM_CRC_Initialize+0x64>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
  hcrc.Instance = CRC;
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 8006838:	4a12      	ldr	r2, [pc, #72]	; (8006884 <ST25FTM_CRC_Initialize+0x6c>)
 800683a:	601a      	str	r2, [r3, #0]
  __HAL_CRC_RESET_HANDLE_STATE(&hcrc);
 800683c:	4b10      	ldr	r3, [pc, #64]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 800683e:	2200      	movs	r2, #0
 8006840:	775a      	strb	r2, [r3, #29]

  hcrc.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
 8006842:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 8006844:	2201      	movs	r2, #1
 8006846:	711a      	strb	r2, [r3, #4]
  hcrc.Init.GeneratingPolynomial    = 0x04C11DB7;
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 800684a:	4a0f      	ldr	r2, [pc, #60]	; (8006888 <ST25FTM_CRC_Initialize+0x70>)
 800684c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength               = CRC_POLYLENGTH_32B;
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 8006850:	2200      	movs	r2, #0
 8006852:	60da      	str	r2, [r3, #12]
  hcrc.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 8006856:	2200      	movs	r2, #0
 8006858:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 800685c:	2200      	movs	r2, #0
 800685e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 8006862:	2200      	movs	r2, #0
 8006864:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 8006868:	2203      	movs	r2, #3
 800686a:	621a      	str	r2, [r3, #32]
  /**/
  (void)HAL_CRC_Init( &hcrc );
 800686c:	4804      	ldr	r0, [pc, #16]	; (8006880 <ST25FTM_CRC_Initialize+0x68>)
 800686e:	f7fb fd59 	bl	8002324 <HAL_CRC_Init>
}
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	20002284 	.word	0x20002284
 8006884:	40023000 	.word	0x40023000
 8006888:	04c11db7 	.word	0x04c11db7

0800688c <ST25FTM_GetCrc>:

ST25FTM_Crc_t ST25FTM_GetCrc(uint8_t *data, uint32_t length, ST25FTM_crc_control_t crc_control)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b0c8      	sub	sp, #288	; 0x120
 8006890:	af00      	add	r7, sp, #0
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	6018      	str	r0, [r3, #0]
 8006898:	f107 0308 	add.w	r3, r7, #8
 800689c:	6019      	str	r1, [r3, #0]
 800689e:	1dfb      	adds	r3, r7, #7
 80068a0:	701a      	strb	r2, [r3, #0]
  uint32_t crc;
  static uint8_t last_word[4];
  static uint8_t last_extra_bytes = 0;

  ST25FTM_LOG("GetCrc %x %d\r\n",data,length);
  if((crc_control == ST25FTM_CRC_START) || (crc_control == ST25FTM_CRC_ONESHOT))
 80068a2:	1dfb      	adds	r3, r7, #7
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <ST25FTM_GetCrc+0x26>
 80068aa:	1dfb      	adds	r3, r7, #7
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d126      	bne.n	8006900 <ST25FTM_GetCrc+0x74>
  {
	/* Compute number of words */
	uint32_t nbWords = length / 4U;
 80068b2:	f107 0308 	add.w	r3, r7, #8
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	089b      	lsrs	r3, r3, #2
 80068ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* The uint32_t* cast is ok as buffer length is managed above */
    crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)data,nbWords);
 80068be:	f107 030c 	add.w	r3, r7, #12
 80068c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80068c6:	6819      	ldr	r1, [r3, #0]
 80068c8:	4845      	ldr	r0, [pc, #276]	; (80069e0 <ST25FTM_GetCrc+0x154>)
 80068ca:	f7fb fdd3 	bl	8002474 <HAL_CRC_Calculate>
 80068ce:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	 /* Save remaining extra bytes */
    last_extra_bytes = (uint8_t)(length%4U);
 80068d2:	f107 0308 	add.w	r3, r7, #8
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	4b40      	ldr	r3, [pc, #256]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 80068e2:	701a      	strb	r2, [r3, #0]
    memcpy(last_word,&data[nbWords*4U],last_extra_bytes);
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	f107 020c 	add.w	r2, r7, #12
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	4619      	mov	r1, r3
 80068f8:	483b      	ldr	r0, [pc, #236]	; (80069e8 <ST25FTM_GetCrc+0x15c>)
 80068fa:	f007 fdff 	bl	800e4fc <memcpy>
  {
 80068fe:	e045      	b.n	800698c <ST25FTM_GetCrc+0x100>
	uint32_t nbWords;
    /* In accumulate mode max length is 256 bytes (mailbox length)
	   + last 3 extra bytes from a previous call */
	uint8_t temp_buff[260];
	/* starts with extra bytes from previous call, if any */
	memcpy(temp_buff, last_word, last_extra_bytes);
 8006900:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	f107 0310 	add.w	r3, r7, #16
 800690a:	4937      	ldr	r1, [pc, #220]	; (80069e8 <ST25FTM_GetCrc+0x15c>)
 800690c:	4618      	mov	r0, r3
 800690e:	f007 fdf5 	bl	800e4fc <memcpy>
	/* Append the provided data */
	memcpy(&temp_buff[last_extra_bytes],data,length);
 8006912:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f107 0310 	add.w	r3, r7, #16
 800691c:	1898      	adds	r0, r3, r2
 800691e:	f107 0208 	add.w	r2, r7, #8
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	f007 fde7 	bl	800e4fc <memcpy>
	/* Compute full length & number of words */
	length += last_extra_bytes;
 800692e:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	f107 0308 	add.w	r3, r7, #8
 8006938:	f107 0208 	add.w	r2, r7, #8
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	440a      	add	r2, r1
 8006940:	601a      	str	r2, [r3, #0]
	nbWords = length / 4U;
 8006942:	f107 0308 	add.w	r3, r7, #8
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	089b      	lsrs	r3, r3, #2
 800694a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	crc = HAL_CRC_Accumulate(&hcrc, (uint32_t *)temp_buff,nbWords);
 800694e:	f107 0310 	add.w	r3, r7, #16
 8006952:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006956:	4619      	mov	r1, r3
 8006958:	4821      	ldr	r0, [pc, #132]	; (80069e0 <ST25FTM_GetCrc+0x154>)
 800695a:	f7fb fd47 	bl	80023ec <HAL_CRC_Accumulate>
 800695e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	/* Save remaining extra bytes */
	last_extra_bytes = (uint8_t)(length%4U);
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	b2da      	uxtb	r2, r3
 8006970:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 8006972:	701a      	strb	r2, [r3, #0]
	memcpy(last_word,&temp_buff[nbWords*4U],last_extra_bytes);
 8006974:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	f107 0210 	add.w	r2, r7, #16
 800697e:	4413      	add	r3, r2
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	4818      	ldr	r0, [pc, #96]	; (80069e8 <ST25FTM_GetCrc+0x15c>)
 8006988:	f007 fdb8 	bl	800e4fc <memcpy>
  }

  if((crc_control == ST25FTM_CRC_END) || (crc_control == ST25FTM_CRC_ONESHOT))
 800698c:	1dfb      	adds	r3, r7, #7
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d003      	beq.n	800699c <ST25FTM_GetCrc+0x110>
 8006994:	1dfb      	adds	r3, r7, #7
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d11a      	bne.n	80069d2 <ST25FTM_GetCrc+0x146>
  {
	if(last_extra_bytes > 0)
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d016      	beq.n	80069d2 <ST25FTM_GetCrc+0x146>
	{
	   /* Complete the CRC computation with the remaining bytes padded with 0 */
       memset(&last_word[last_extra_bytes],0,sizeof(last_word) - last_extra_bytes);
 80069a4:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <ST25FTM_GetCrc+0x15c>)
 80069ac:	4413      	add	r3, r2
 80069ae:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	f1c2 0204 	rsb	r2, r2, #4
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f007 fdad 	bl	800e518 <memset>
	   crc = HAL_CRC_Accumulate(&hcrc, (uint32_t *)last_word,1);
 80069be:	2201      	movs	r2, #1
 80069c0:	4909      	ldr	r1, [pc, #36]	; (80069e8 <ST25FTM_GetCrc+0x15c>)
 80069c2:	4807      	ldr	r0, [pc, #28]	; (80069e0 <ST25FTM_GetCrc+0x154>)
 80069c4:	f7fb fd12 	bl	80023ec <HAL_CRC_Accumulate>
 80069c8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
	   last_extra_bytes = 0;
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <ST25FTM_GetCrc+0x158>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
	}
  }

  return crc;
 80069d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c

}
 80069d6:	4618      	mov	r0, r3
 80069d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20002284 	.word	0x20002284
 80069e4:	20002137 	.word	0x20002137
 80069e8:	20002138 	.word	0x20002138

080069ec <ST25FTM_Init>:
};
#endif

/*! Initialize the FTM state machines and the NFC device */
void ST25FTM_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  ST25FTM_State_Init();
 80069f0:	f7ff fcd6 	bl	80063a0 <ST25FTM_State_Init>

  (void)ST25FTM_DeviceInit();
 80069f4:	f7ff fd0d 	bl	8006412 <ST25FTM_DeviceInit>

  ST25FTM_UpdateFieldStatus();
 80069f8:	f7ff fdc4 	bl	8006584 <ST25FTM_UpdateFieldStatus>
}
 80069fc:	bf00      	nop
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <ST25FTM_SetTxFrameMaxLength>:

/*! Register the maximum frame length while transmitting
 *  @param len Maximum frame length in bytes
 */
void ST25FTM_SetTxFrameMaxLength(uint32_t len)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  gFtmState.tx.frameMaxLength = len;
 8006a08:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <ST25FTM_SetTxFrameMaxLength+0x1c>)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	61d3      	str	r3, [r2, #28]
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20002334 	.word	0x20002334

08006a20 <ST25FTM_SetRxFrameMaxLength>:

/*! Register the maximum frame length while receiving
 *  @param len Maximum frame length in bytes
 */
void ST25FTM_SetRxFrameMaxLength(uint32_t len)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  gFtmState.rx.frameMaxLength = len;
 8006a28:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <ST25FTM_SetRxFrameMaxLength+0x1c>)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	20002334 	.word	0x20002334

08006a40 <ST25FTM_SendCommand>:
  * @param length Number of bytes to be transmitted
  * @param ack Enables handchecks during the transfer
  * @param data_cb Optional callback function, called to request data to send (to be set to NULL if not used)
  */
void ST25FTM_SendCommand(uint8_t* data, uint32_t length, ST25FTM_Send_Ack_t ack, ftm_data_cb data_cb)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71fb      	strb	r3, [r7, #7]
  gFtmState.tx.cmdPtr = data;
 8006a50:	4a0c      	ldr	r2, [pc, #48]	; (8006a84 <ST25FTM_SendCommand+0x44>)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6113      	str	r3, [r2, #16]
  gFtmState.tx.cmdLen = length;
 8006a56:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <ST25FTM_SendCommand+0x44>)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	6153      	str	r3, [r2, #20]
  gFtmState.tx.state = ST25FTM_WRITE_IDLE;
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <ST25FTM_SendCommand+0x44>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	731a      	strb	r2, [r3, #12]
  gFtmState.state = ST25FTM_WRITE;
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <ST25FTM_SendCommand+0x44>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
  gFtmState.tx.sendAck = ack;
 8006a68:	4a06      	ldr	r2, [pc, #24]	; (8006a84 <ST25FTM_SendCommand+0x44>)
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
  gFtmState.tx.getdata_cb = data_cb;
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <ST25FTM_SendCommand+0x44>)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20002334 	.word	0x20002334

08006a88 <ST25FTM_ReceiveCommand>:
                  This parameter is also used to return the number of bytes actually read
  * @param ack Enables handchecks during the transfer
  * @param data_cb Optional callback function, called to write received datad (to be set to NULL if not used)
  */
void ST25FTM_ReceiveCommand(uint8_t* data, uint32_t *length, ftm_data_cb data_cb)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  gFtmState.rx.cmdPtr = data;
 8006a94:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <ST25FTM_ReceiveCommand+0x48>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
  gFtmState.rx.cmdLen = length;
 8006a9c:	4a0c      	ldr	r2, [pc, #48]	; (8006ad0 <ST25FTM_ReceiveCommand+0x48>)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
  gFtmState.rx.maxCmdLen = *length;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <ST25FTM_ReceiveCommand+0x48>)
 8006aaa:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
  gFtmState.rx.state = ST25FTM_READ_IDLE;
 8006aae:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <ST25FTM_ReceiveCommand+0x48>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  gFtmState.state = ST25FTM_READ;
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <ST25FTM_ReceiveCommand+0x48>)
 8006ab8:	2202      	movs	r2, #2
 8006aba:	701a      	strb	r2, [r3, #0]
  gFtmState.rx.recvdata_cb = data_cb;
 8006abc:	4a04      	ldr	r2, [pc, #16]	; (8006ad0 <ST25FTM_ReceiveCommand+0x48>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20002334 	.word	0x20002334

08006ad4 <ST25FTM_Runner>:

/*! Run the FTM state machine */
void ST25FTM_Runner(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
  static ST25FTM_Field_State_t lastRfField = ST25FTM_FIELD_OFF;
  if(gFtmState.state != gFtmState.lastState)
 8006ad8:	4b3e      	ldr	r3, [pc, #248]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	4b3d      	ldr	r3, [pc, #244]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d003      	beq.n	8006aec <ST25FTM_Runner+0x18>
  {
   // ST25FTM_LOG("State = %s\r\n",ST25FTM_State_Str[gFtmState.state]);
    gFtmState.lastState = gFtmState.state;
 8006ae4:	4b3b      	ldr	r3, [pc, #236]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006ae6:	781a      	ldrb	r2, [r3, #0]
 8006ae8:	4b3a      	ldr	r3, [pc, #232]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006aea:	705a      	strb	r2, [r3, #1]
  }

  ST25FTM_UpdateFieldStatus();
 8006aec:	f7ff fd4a 	bl	8006584 <ST25FTM_UpdateFieldStatus>
  /* Do nothing if field is off */
  if(gFtmState.rfField == ST25FTM_FIELD_OFF)
 8006af0:	4b38      	ldr	r3, [pc, #224]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006af2:	789b      	ldrb	r3, [r3, #2]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <ST25FTM_Runner+0x2c>
  {
    lastRfField = ST25FTM_FIELD_OFF;
 8006af8:	4b37      	ldr	r3, [pc, #220]	; (8006bd8 <ST25FTM_Runner+0x104>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
    } else {
      /* do nothing */
    }
    lastRfField = gFtmState.rfField;
  }
}
 8006afe:	e066      	b.n	8006bce <ST25FTM_Runner+0xfa>
    if((lastRfField == ST25FTM_FIELD_OFF) && (gFtmState.rfField == ST25FTM_FIELD_ON))
 8006b00:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <ST25FTM_Runner+0x104>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d113      	bne.n	8006b30 <ST25FTM_Runner+0x5c>
 8006b08:	4b32      	ldr	r3, [pc, #200]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b0a:	789b      	ldrb	r3, [r3, #2]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d10f      	bne.n	8006b30 <ST25FTM_Runner+0x5c>
      if((gFtmState.state == ST25FTM_WRITE) && (gFtmState.tx.state >= ST25FTM_WRITE_SEGMENT))
 8006b10:	4b30      	ldr	r3, [pc, #192]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d10b      	bne.n	8006b30 <ST25FTM_Runner+0x5c>
 8006b18:	4b2e      	ldr	r3, [pc, #184]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b1a:	7b1b      	ldrb	r3, [r3, #12]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d907      	bls.n	8006b30 <ST25FTM_Runner+0x5c>
        ST25FTM_TxResetSegment();
 8006b20:	f001 f9fc 	bl	8007f1c <ST25FTM_TxResetSegment>
        gFtmState.lastTick = ST25FTM_TICK();
 8006b24:	f7fb fabc 	bl	80020a0 <HAL_GetTick>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b2c:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
    if(gFtmState.state == ST25FTM_WRITE)
 8006b30:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d12c      	bne.n	8006b92 <ST25FTM_Runner+0xbe>
      if(gFtmState.tx.state != gFtmState.tx.lastState)
 8006b38:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b3a:	7b1a      	ldrb	r2, [r3, #12]
 8006b3c:	4b25      	ldr	r3, [pc, #148]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b3e:	7b5b      	ldrb	r3, [r3, #13]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d009      	beq.n	8006b58 <ST25FTM_Runner+0x84>
        gFtmState.tx.lastState = gFtmState.tx.state;
 8006b44:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b46:	7b1a      	ldrb	r2, [r3, #12]
 8006b48:	4b22      	ldr	r3, [pc, #136]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b4a:	735a      	strb	r2, [r3, #13]
        gFtmState.lastTick = ST25FTM_TICK();
 8006b4c:	f7fb faa8 	bl	80020a0 <HAL_GetTick>
 8006b50:	4603      	mov	r3, r0
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b54:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
      if((ST25FTM_CompareTime(ST25FTM_TICK(),gFtmState.lastTick) > ST25FTM_WAIT_TIMEOUT)
 8006b58:	f7fb faa2 	bl	80020a0 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b60:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f7ff fc3a 	bl	80063e0 <ST25FTM_CompareTime>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b72:	d90b      	bls.n	8006b8c <ST25FTM_Runner+0xb8>
         && (gFtmState.tx.state == ST25FTM_WRITE_READ_ACK))
 8006b74:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b76:	7b1b      	ldrb	r3, [r3, #12]
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	d107      	bne.n	8006b8c <ST25FTM_Runner+0xb8>
        ST25FTM_TxResetSegment();
 8006b7c:	f001 f9ce 	bl	8007f1c <ST25FTM_TxResetSegment>
        gFtmState.lastTick = ST25FTM_TICK();
 8006b80:	f7fb fa8e 	bl	80020a0 <HAL_GetTick>
 8006b84:	4603      	mov	r3, r0
 8006b86:	4a13      	ldr	r2, [pc, #76]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b88:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
      ST25FTM_Transmit();
 8006b8c:	f001 f97e 	bl	8007e8c <ST25FTM_Transmit>
 8006b90:	e019      	b.n	8006bc6 <ST25FTM_Runner+0xf2>
    } else if (gFtmState.state == ST25FTM_READ)
 8006b92:	4b10      	ldr	r3, [pc, #64]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d115      	bne.n	8006bc6 <ST25FTM_Runner+0xf2>
      if(gFtmState.rx.state != gFtmState.rx.lastState)
 8006b9a:	4b0e      	ldr	r3, [pc, #56]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006b9c:	f893 2158 	ldrb.w	r2, [r3, #344]	; 0x158
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006ba2:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00b      	beq.n	8006bc2 <ST25FTM_Runner+0xee>
        gFtmState.rx.lastState = gFtmState.rx.state;
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006bac:	f893 2158 	ldrb.w	r2, [r3, #344]	; 0x158
 8006bb0:	4b08      	ldr	r3, [pc, #32]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006bb2:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
        gFtmState.lastTick = ST25FTM_TICK();
 8006bb6:	f7fb fa73 	bl	80020a0 <HAL_GetTick>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006bbe:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
      ST25FTM_Receive();
 8006bc2:	f000 fd91 	bl	80076e8 <ST25FTM_Receive>
    lastRfField = gFtmState.rfField;
 8006bc6:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <ST25FTM_Runner+0x100>)
 8006bc8:	789a      	ldrb	r2, [r3, #2]
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <ST25FTM_Runner+0x104>)
 8006bcc:	701a      	strb	r2, [r3, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20002334 	.word	0x20002334
 8006bd8:	2000213c 	.word	0x2000213c

08006bdc <ST25FTM_IsNewFrame>:
/*! Detect that a new reception has started.
  * @retval 1 when a new recpetion has started since last call
  * @retval 0 otherwise
*/
uint8_t ST25FTM_IsNewFrame(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
  uint8_t status;
  if(gFtmState.rx.isNewFrame != 0U)
 8006be2:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <ST25FTM_IsNewFrame+0x30>)
 8006be4:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <ST25FTM_IsNewFrame+0x1e>
  {
    ST25FTM_LOG("*** Rx New Frame ***\r\n");
    gFtmState.rx.isNewFrame = 0U;
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <ST25FTM_IsNewFrame+0x30>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    status = 1U;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	71fb      	strb	r3, [r7, #7]
 8006bf8:	e001      	b.n	8006bfe <ST25FTM_IsNewFrame+0x22>
  } else {
    status = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	71fb      	strb	r3, [r7, #7]
  }
  return status;
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20002334 	.word	0x20002334

08006c10 <ST25FTM_IsReceptionComplete>:
/*! Check if the reception has been completed.
  * @retval 1 is the reception has completed.
  * @retval 0 otherwise.
*/
uint8_t ST25FTM_IsReceptionComplete(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
  uint8_t isRxCompleted;
  if ((gFtmState.state == ST25FTM_READ) && (gFtmState.rx.state == ST25FTM_READ_DONE))
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <ST25FTM_IsReceptionComplete+0x30>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d107      	bne.n	8006c2e <ST25FTM_IsReceptionComplete+0x1e>
 8006c1e:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <ST25FTM_IsReceptionComplete+0x30>)
 8006c20:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d102      	bne.n	8006c2e <ST25FTM_IsReceptionComplete+0x1e>
  {
    isRxCompleted = 1;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	71fb      	strb	r3, [r7, #7]
 8006c2c:	e001      	b.n	8006c32 <ST25FTM_IsReceptionComplete+0x22>
  } else {
    isRxCompleted = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	71fb      	strb	r3, [r7, #7]
  }
  return isRxCompleted;
 8006c32:	79fb      	ldrb	r3, [r7, #7]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20002334 	.word	0x20002334

08006c44 <ST25FTM_IsTransmissionComplete>:
/*! Check if the transmission has been completed.
  * @retval 1 is the transmission has completed.
  * @retval 0 otherwise.
*/
uint8_t ST25FTM_IsTransmissionComplete(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
  uint8_t isTxCompleted;
  if ((gFtmState.state == ST25FTM_WRITE) && (gFtmState.tx.state == ST25FTM_WRITE_DONE))
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <ST25FTM_IsTransmissionComplete+0x30>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d106      	bne.n	8006c60 <ST25FTM_IsTransmissionComplete+0x1c>
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <ST25FTM_IsTransmissionComplete+0x30>)
 8006c54:	7b1b      	ldrb	r3, [r3, #12]
 8006c56:	2b06      	cmp	r3, #6
 8006c58:	d102      	bne.n	8006c60 <ST25FTM_IsTransmissionComplete+0x1c>
  {
    isTxCompleted = 1;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	71fb      	strb	r3, [r7, #7]
 8006c5e:	e001      	b.n	8006c64 <ST25FTM_IsTransmissionComplete+0x20>
  } else {
    isTxCompleted = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	71fb      	strb	r3, [r7, #7]
  }
  return isTxCompleted;
 8006c64:	79fb      	ldrb	r3, [r7, #7]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20002334 	.word	0x20002334

08006c78 <ST25FTM_IsIdle>:
/*! Check if the ST25FTM state machine is idle.
  * @retval 1 The state machine is Idle.
  * @retval 0 otherwise.
*/
uint8_t ST25FTM_IsIdle(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
  uint8_t isIdle;
  if (gFtmState.state == ST25FTM_IDLE)
 8006c7e:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <ST25FTM_IsIdle+0x28>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d102      	bne.n	8006c8c <ST25FTM_IsIdle+0x14>
  {
    isIdle = 1;
 8006c86:	2301      	movs	r3, #1
 8006c88:	71fb      	strb	r3, [r7, #7]
 8006c8a:	e001      	b.n	8006c90 <ST25FTM_IsIdle+0x18>
  } else {
    isIdle = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	71fb      	strb	r3, [r7, #7]
  }
  return isIdle;
 8006c90:	79fb      	ldrb	r3, [r7, #7]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20002334 	.word	0x20002334

08006ca4 <ST25FTM_CheckError>:
/*! Check if an error occured.
  * @retval 1 An error occured.
  * @retval 0 otherwise.
*/
uint8_t ST25FTM_CheckError(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
  uint8_t isError;
  if((gFtmState.rx.state == ST25FTM_READ_ERROR)  || (gFtmState.tx.state == ST25FTM_WRITE_ERROR))
 8006caa:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <ST25FTM_CheckError+0x30>)
 8006cac:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006cb0:	2b09      	cmp	r3, #9
 8006cb2:	d003      	beq.n	8006cbc <ST25FTM_CheckError+0x18>
 8006cb4:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <ST25FTM_CheckError+0x30>)
 8006cb6:	7b1b      	ldrb	r3, [r3, #12]
 8006cb8:	2b07      	cmp	r3, #7
 8006cba:	d102      	bne.n	8006cc2 <ST25FTM_CheckError+0x1e>
  {
    isError = 1;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	71fb      	strb	r3, [r7, #7]
 8006cc0:	e001      	b.n	8006cc6 <ST25FTM_CheckError+0x22>
  } else {
    isError = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	71fb      	strb	r3, [r7, #7]
  }
  return isError;
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	20002334 	.word	0x20002334

08006cd8 <ST25FTM_Reset>:

/*! Reset the ST25FTM state machine.
  */
void ST25FTM_Reset(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  gFtmState.tx.cmdPtr = NULL;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <ST25FTM_Reset+0x30>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	611a      	str	r2, [r3, #16]
  gFtmState.tx.cmdLen = 0;
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <ST25FTM_Reset+0x30>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	615a      	str	r2, [r3, #20]
  gFtmState.tx.state = ST25FTM_WRITE_IDLE;
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <ST25FTM_Reset+0x30>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	731a      	strb	r2, [r3, #12]
  gFtmState.rx.state = ST25FTM_READ_IDLE;
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <ST25FTM_Reset+0x30>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  gFtmState.state = ST25FTM_IDLE;
 8006cf6:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <ST25FTM_Reset+0x30>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20002334 	.word	0x20002334

08006d0c <ST25FTM_SetData>:
#include "st25ftm_common.h"
#include "st25ftm_config.h"
#include <string.h>

static void ST25FTM_SetData(uint8_t* buf, uint8_t* src, uint32_t length)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  if(gFtmState.rx.recvdata_cb == NULL)
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <ST25FTM_SetData+0x38>)
 8006d1a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <ST25FTM_SetData+0x22>
  {
	/* Default case: simply copy packet data into destination buffer */
	  (void)memcpy(buf,src,length);
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f007 fbe8 	bl	800e4fc <memcpy>
  } else {
	/* Let's the application manage the received data */
    gFtmState.rx.recvdata_cb(buf,src,length);
  }
}
 8006d2c:	e006      	b.n	8006d3c <ST25FTM_SetData+0x30>
    gFtmState.rx.recvdata_cb(buf,src,length);
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <ST25FTM_SetData+0x38>)
 8006d30:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	4798      	blx	r3
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20002334 	.word	0x20002334

08006d48 <ST25FTM_RxStateInit>:


void ST25FTM_RxStateInit(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  gFtmState.rx.state = ST25FTM_READ_IDLE;
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  gFtmState.rx.lastState = ST25FTM_READ_IDLE;
 8006d54:	4b26      	ldr	r3, [pc, #152]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
  gFtmState.rx.frameMaxLength = 0xFF;
 8006d5c:	4b24      	ldr	r3, [pc, #144]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d5e:	22ff      	movs	r2, #255	; 0xff
 8006d60:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
  gFtmState.rx.isNewFrame = 0;
 8006d64:	4b22      	ldr	r3, [pc, #136]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
  gFtmState.rx.cmdPtr = NULL;
 8006d6c:	4b20      	ldr	r3, [pc, #128]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  gFtmState.rx.cmdLen = NULL;
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
  gFtmState.rx.maxCmdLen = 0;
 8006d7c:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
  gFtmState.rx.nbError = 0;
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
  gFtmState.rx.unrecoverableError=0;
 8006d8c:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
  gFtmState.rx.receivedLength = 0;
 8006d94:	4b16      	ldr	r3, [pc, #88]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
  gFtmState.rx.validReceivedLength = 0;
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
  gFtmState.rx.totalValidReceivedLength = 0;
 8006da4:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  gFtmState.rx.segmentPtr = NULL;
 8006dac:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  gFtmState.rx.dataPtr = NULL;
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  gFtmState.rx.validLength = 0;
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  gFtmState.rx.lastAck = 0;
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
  gFtmState.rx.rewriteOnFieldOff = 0;
 8006dcc:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
  gFtmState.rx.ignoreRetransSegment = 0;
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
  gFtmState.rx.segmentNumber = 0;
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <ST25FTM_RxStateInit+0xa8>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20002334 	.word	0x20002334

08006df4 <ST25FTM_Unpack>:

static ST25FTM_Packet_t ST25FTM_Unpack(uint8_t *msg)
{
 8006df4:	b4b0      	push	{r4, r5, r7}
 8006df6:	b08b      	sub	sp, #44	; 0x2c
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  ST25FTM_Packet_t pkt = {0};
 8006dfe:	f107 030c 	add.w	r3, r7, #12
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	605a      	str	r2, [r3, #4]
 8006e08:	609a      	str	r2, [r3, #8]
 8006e0a:	60da      	str	r2, [r3, #12]
 8006e0c:	611a      	str	r2, [r3, #16]
 8006e0e:	615a      	str	r2, [r3, #20]
  uint32_t hdr_len = sizeof(pkt.ctrl);
 8006e10:	2301      	movs	r3, #1
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
  pkt.ctrl.byte = msg[0];
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	733b      	strb	r3, [r7, #12]

  if(ST25FTM_CTRL_HAS_PKT_LEN(pkt.ctrl))
 8006e1a:	7b3b      	ldrb	r3, [r7, #12]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d013      	beq.n	8006e4e <ST25FTM_Unpack+0x5a>
  {
    pkt.length = ST25FTM_GET_PKT_LEN(msg);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	613b      	str	r3, [r7, #16]
    hdr_len += sizeof(ST25FTM_Packet_Length_t);
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	3301      	adds	r3, #1
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24

    if(ST25FTM_CTRL_HAS_TOTAL_LEN(pkt.ctrl))
 8006e32:	7b3b      	ldrb	r3, [r7, #12]
 8006e34:	f003 030c 	and.w	r3, r3, #12
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d12f      	bne.n	8006e9e <ST25FTM_Unpack+0xaa>
    {
      pkt.totalLength = ST25FTM_GET_TOTAL_LEN_WITH_LEN(msg);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006e44:	617b      	str	r3, [r7, #20]
      hdr_len +=sizeof(pkt.totalLength);
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	3304      	adds	r3, #4
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4c:	e027      	b.n	8006e9e <ST25FTM_Unpack+0xaa>
    }

  } else {
    if(ST25FTM_CTRL_HAS_TOTAL_LEN(pkt.ctrl))
 8006e4e:	7b3b      	ldrb	r3, [r7, #12]
 8006e50:	f003 030c 	and.w	r3, r3, #12
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d11b      	bne.n	8006e92 <ST25FTM_Unpack+0x9e>
    {
      pkt.totalLength = msg[1];
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	617b      	str	r3, [r7, #20]
      pkt.totalLength = (pkt.totalLength << 8U) + msg[2];
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	3202      	adds	r2, #2
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
      pkt.totalLength = (pkt.totalLength << 8U) + msg[3];
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	3203      	adds	r2, #3
 8006e78:	7812      	ldrb	r2, [r2, #0]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]
      pkt.totalLength = (pkt.totalLength << 8U) + msg[4];
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	3204      	adds	r2, #4
 8006e86:	7812      	ldrb	r2, [r2, #0]
 8006e88:	4413      	add	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]
      hdr_len +=sizeof(pkt.totalLength);
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	3304      	adds	r3, #4
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
    }
    pkt.length = gFtmState.rx.frameMaxLength - hdr_len;
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <ST25FTM_Unpack+0xf4>)
 8006e94:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	613b      	str	r3, [r7, #16]
  }
  if(ST25FTM_CTRL_HAS_CRC(pkt.ctrl))
 8006e9e:	7b3b      	ldrb	r3, [r7, #12]
 8006ea0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b30      	cmp	r3, #48	; 0x30
 8006ea8:	d005      	beq.n	8006eb6 <ST25FTM_Unpack+0xc2>
 8006eaa:	7b3b      	ldrb	r3, [r7, #12]
 8006eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d102      	bne.n	8006ebc <ST25FTM_Unpack+0xc8>
  {
    /* The pkt.length count the crc bytes, remove them */
    pkt.length -= 4;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3b04      	subs	r3, #4
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* compute the begining of the payload */
  pkt.data = msg;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	61fb      	str	r3, [r7, #28]
  pkt.data += hdr_len;
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	4413      	add	r3, r2
 8006ec6:	61fb      	str	r3, [r7, #28]
  return pkt;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	461d      	mov	r5, r3
 8006ecc:	f107 040c 	add.w	r4, r7, #12
 8006ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ed8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	372c      	adds	r7, #44	; 0x2c
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bcb0      	pop	{r4, r5, r7}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	20002334 	.word	0x20002334

08006eec <ST25FTM_RewindSegment>:

static void ST25FTM_RewindSegment(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  gFtmState.rx.dataPtr -= gFtmState.rx.segmentLength;
 8006ef0:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006ef2:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8006ef6:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006ef8:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006efc:	425b      	negs	r3, r3
 8006efe:	4413      	add	r3, r2
 8006f00:	4a10      	ldr	r2, [pc, #64]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f02:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
  gFtmState.rx.receivedLength -= gFtmState.rx.segmentLength;
 8006f06:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f08:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f0e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	4a0b      	ldr	r2, [pc, #44]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f16:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
  gFtmState.rx.segmentLength = 0;
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  if(gFtmState.rx.dataPtr < gFtmState.rx.cmdPtr)
 8006f22:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f24:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f2a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d203      	bcs.n	8006f3a <ST25FTM_RewindSegment+0x4e>
  {
    gFtmState.rx.lastError = 11;
 8006f32:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <ST25FTM_RewindSegment+0x58>)
 8006f34:	220b      	movs	r2, #11
 8006f36:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    ST25FTM_LOG("FtmRxError11: data pointer out of band\r\n");
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	20002334 	.word	0x20002334

08006f48 <ST25FTM_StateRxIdle>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateRxIdle(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  gFtmState.rx.segmentPtr = gFtmState.rx.cmdPtr;
 8006f4c:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f4e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006f52:	4a1a      	ldr	r2, [pc, #104]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f54:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  gFtmState.rx.dataPtr = gFtmState.rx.cmdPtr;
 8006f58:	4b18      	ldr	r3, [pc, #96]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f5a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006f5e:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f60:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
  gFtmState.rx.segmentLength = 0;
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  gFtmState.rx.receivedLength = 0;
 8006f6c:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
  gFtmState.rx.validReceivedLength = 0;
 8006f74:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
  gFtmState.rx.totalValidReceivedLength = 0;
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  ST25FTM_CRC_Initialize();
 8006f84:	f7ff fc48 	bl	8006818 <ST25FTM_CRC_Initialize>
  gFtmState.rx.state = ST25FTM_READ_CMD;
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  gFtmState.totalDataLength=0;
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	605a      	str	r2, [r3, #4]
  gFtmState.retryLength = 0;
 8006f96:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	609a      	str	r2, [r3, #8]
  gFtmState.rx.state = ST25FTM_READ_CMD;
 8006f9c:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  gFtmState.rx.segmentNumber = 0;
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  gFtmState.rx.readBufferOffset = 0;
 8006fac:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <ST25FTM_StateRxIdle+0x74>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  return ST25FTM_STATE_MACHINE_CONTINUE;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20002334 	.word	0x20002334

08006fc0 <ST25FTM_StateRxCommand>:


static ST25FTM_StateMachineCtrl_t ST25FTM_StateRxCommand(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_RELEASE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	71fb      	strb	r3, [r7, #7]

  if(gFtmState.rx.receivedLength >= (gFtmState.rx.maxCmdLen))
 8006fca:	4b19      	ldr	r3, [pc, #100]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8006fcc:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8006fd0:	4b17      	ldr	r3, [pc, #92]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8006fd2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d315      	bcc.n	8007006 <ST25FTM_StateRxCommand+0x46>
  {
    /* ERROR: receive more data than we can handle */
    gFtmState.rx.nbError++;
 8006fda:	4b15      	ldr	r3, [pc, #84]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8006fdc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	4a13      	ldr	r2, [pc, #76]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8006fe4:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
    gFtmState.rx.unrecoverableError=1;
 8006fe8:	4b11      	ldr	r3, [pc, #68]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
    gFtmState.rx.state = ST25FTM_READ_CMD;
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    gFtmState.rx.lastError = 0;
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    ST25FTM_LOG("FtmRxError0 too much data received\r\n");
    ST25FTM_LOG("gFtmState.rx.receivedLength=%d\r\n",gFtmState.rx.receivedLength);
    ST25FTM_LOG("gFtmState.rx.maxCmdLen=%d\r\n",gFtmState.rx.maxCmdLen);
    ST25FTM_RewindSegment();
 8007000:	f7ff ff74 	bl	8006eec <ST25FTM_RewindSegment>
 8007004:	e00e      	b.n	8007024 <ST25FTM_StateRxCommand+0x64>
  } else if(ST25FTM_GetMessageOwner() == ST25FTM_MESSAGE_PEER) {
 8007006:	f7ff fab3 	bl	8006570 <ST25FTM_GetMessageOwner>
 800700a:	4603      	mov	r3, r0
 800700c:	2b02      	cmp	r3, #2
 800700e:	d109      	bne.n	8007024 <ST25FTM_StateRxCommand+0x64>
    gFtmState.rx.rewriteOnFieldOff = 0;
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
    gFtmState.rx.state = ST25FTM_READ_PKT;
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <ST25FTM_StateRxCommand+0x70>)
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

    control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007020:	2300      	movs	r3, #0
 8007022:	71fb      	strb	r3, [r7, #7]
  } else {
    /* no error, do nothing */
  }
  return control;
 8007024:	79fb      	ldrb	r3, [r7, #7]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20002334 	.word	0x20002334

08007034 <ST25FTM_StateRxPacket>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateRxPacket(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b0cc      	sub	sp, #304	; 0x130
 8007038:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_RELEASE;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  uint8_t msg[ST25FTM_BUFFER_LENGTH];
  uint32_t msg_len = 0;
 8007040:	f107 031c 	add.w	r3, r7, #28
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
  ST25FTM_Packet_t pkt;

  (void)memset(msg,0,sizeof(msg));
 8007048:	f107 0320 	add.w	r3, r7, #32
 800704c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f007 fa60 	bl	800e518 <memset>
  if(ST25FTM_ReadMessage(msg, &msg_len) != ST25FTM_MSG_OK)
 8007058:	f107 021c 	add.w	r2, r7, #28
 800705c:	f107 0320 	add.w	r3, r7, #32
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff fa3e 	bl	80064e4 <ST25FTM_ReadMessage>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d007      	beq.n	800707e <ST25FTM_StateRxPacket+0x4a>
  {
    /* Cannot read MB, retry later */
    gFtmState.rx.state = ST25FTM_READ_PKT;
 800706e:	4bad      	ldr	r3, [pc, #692]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007070:	2202      	movs	r2, #2
 8007072:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    control = ST25FTM_STATE_MACHINE_RELEASE;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800707c:	e21d      	b.n	80074ba <ST25FTM_StateRxPacket+0x486>
  } else {

    ST25FTM_LOG("Rx ");
    logHexBuf(msg,msg_len);
 800707e:	f107 031c 	add.w	r3, r7, #28
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	f107 0320 	add.w	r3, r7, #32
 8007088:	4611      	mov	r1, r2
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff f946 	bl	800631c <logHexBuf>
    if(msg_len == 0U)
 8007090:	f107 031c 	add.w	r3, r7, #28
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d112      	bne.n	80070c0 <ST25FTM_StateRxPacket+0x8c>
    {
      gFtmState.rx.lastError = 5;
 800709a:	4ba2      	ldr	r3, [pc, #648]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800709c:	2205      	movs	r2, #5
 800709e:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
      ST25FTM_LOG("FtmRxError5 len = 0\r\n");
      gFtmState.rx.nbError++;
 80070a2:	4ba0      	ldr	r3, [pc, #640]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80070a4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80070a8:	3301      	adds	r3, #1
 80070aa:	4a9e      	ldr	r2, [pc, #632]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80070ac:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
      gFtmState.rx.state = ST25FTM_READ_ERROR;
 80070b0:	4b9c      	ldr	r3, [pc, #624]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80070b2:	2209      	movs	r2, #9
 80070b4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
      control =  ST25FTM_STATE_MACHINE_RELEASE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80070be:	e1fc      	b.n	80074ba <ST25FTM_StateRxPacket+0x486>
    } else {

      pkt = ST25FTM_Unpack(msg);
 80070c0:	1d3b      	adds	r3, r7, #4
 80070c2:	f107 0220 	add.w	r2, r7, #32
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fe93 	bl	8006df4 <ST25FTM_Unpack>
      
      gFtmState.rx.pktPosition = (ST25FTM_Packet_Position_t)pkt.ctrl.b.position; 
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	4b92      	ldr	r3, [pc, #584]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80070dc:	f883 2193 	strb.w	r2, [r3, #403]	; 0x193
      if((pkt.ctrl.b.position == (uint8_t)ST25FTM_SINGLE_PACKET) || (pkt.ctrl.b.position == (uint8_t)ST25FTM_FIRST_PACKET))
 80070e0:	1d3b      	adds	r3, r7, #4
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	f003 030c 	and.w	r3, r3, #12
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d006      	beq.n	80070fc <ST25FTM_StateRxPacket+0xc8>
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f003 030c 	and.w	r3, r3, #12
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d169      	bne.n	80071d0 <ST25FTM_StateRxPacket+0x19c>
      {
        gFtmState.rx.segmentNumber = 0;
 80070fc:	4b89      	ldr	r3, [pc, #548]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        if (pkt.ctrl.b.position == (uint8_t)ST25FTM_SINGLE_PACKET)
 8007104:	1d3b      	adds	r3, r7, #4
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	f003 030c 	and.w	r3, r3, #12
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <ST25FTM_StateRxPacket+0xec>
        {
          /* pkt length represents the sent data including encryption (but not crc) */
          *gFtmState.rx.cmdLen = pkt.length;
 8007112:	4b84      	ldr	r3, [pc, #528]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007114:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007118:	1d3a      	adds	r2, r7, #4
 800711a:	6852      	ldr	r2, [r2, #4]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	e005      	b.n	800712c <ST25FTM_StateRxPacket+0xf8>
        } else {
          /* this represents the payload (unencrypted) length */
          *gFtmState.rx.cmdLen = pkt.totalLength;
 8007120:	4b80      	ldr	r3, [pc, #512]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007122:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007126:	1d3a      	adds	r2, r7, #4
 8007128:	6892      	ldr	r2, [r2, #8]
 800712a:	601a      	str	r2, [r3, #0]
        }

        if(*gFtmState.rx.cmdLen >= (gFtmState.rx.maxCmdLen))
 800712c:	4b7d      	ldr	r3, [pc, #500]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800712e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	4b7b      	ldr	r3, [pc, #492]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007136:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800713a:	429a      	cmp	r2, r3
 800713c:	d30e      	bcc.n	800715c <ST25FTM_StateRxPacket+0x128>
        {
            gFtmState.rx.lastError = 17;
 800713e:	4b79      	ldr	r3, [pc, #484]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007140:	2211      	movs	r2, #17
 8007142:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
            gFtmState.rx.nbError++;
 8007146:	4b77      	ldr	r3, [pc, #476]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007148:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800714c:	3301      	adds	r3, #1
 800714e:	4a75      	ldr	r2, [pc, #468]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007150:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
            gFtmState.rx.unrecoverableError=1;
 8007154:	4b73      	ldr	r3, [pc, #460]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007156:	2201      	movs	r2, #1
 8007158:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
            ST25FTM_LOG("FtmRxError17 Transfer is bigger than reception buffer\r\n");
        }

        if(gFtmState.totalDataLength > 0U)
 800715c:	4b71      	ldr	r3, [pc, #452]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d006      	beq.n	8007172 <ST25FTM_StateRxPacket+0x13e>
        {
          gFtmState.retryLength += gFtmState.totalDataLength;
 8007164:	4b6f      	ldr	r3, [pc, #444]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	4b6e      	ldr	r3, [pc, #440]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4413      	add	r3, r2
 800716e:	4a6d      	ldr	r2, [pc, #436]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007170:	6093      	str	r3, [r2, #8]
          ST25FTM_LOG("FtmRxWarning0 Command restarted, length=%d\r\n",gFtmState.retryLength);
        }
        gFtmState.totalDataLength = msg_len;
 8007172:	f107 031c 	add.w	r3, r7, #28
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a6a      	ldr	r2, [pc, #424]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800717a:	6053      	str	r3, [r2, #4]
        gFtmState.rx.isNewFrame = 1;
 800717c:	4b69      	ldr	r3, [pc, #420]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800717e:	2201      	movs	r2, #1
 8007180:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
        if(gFtmState.rx.receivedLength != 0U)
 8007184:	4b67      	ldr	r3, [pc, #412]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007186:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800718a:	2b00      	cmp	r3, #0
 800718c:	d037      	beq.n	80071fe <ST25FTM_StateRxPacket+0x1ca>
        {
          /* the transmitter started a new command without completing the last one */
          gFtmState.rx.dataPtr = gFtmState.rx.cmdPtr;
 800718e:	4b65      	ldr	r3, [pc, #404]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007190:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007194:	4a63      	ldr	r2, [pc, #396]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007196:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
          gFtmState.rx.segmentPtr = gFtmState.rx.cmdPtr;
 800719a:	4b62      	ldr	r3, [pc, #392]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800719c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80071a0:	4a60      	ldr	r2, [pc, #384]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071a2:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
          gFtmState.rx.segmentLength = 0U;
 80071a6:	4b5f      	ldr	r3, [pc, #380]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
          gFtmState.rx.receivedLength = 0U;
 80071ae:	4b5d      	ldr	r3, [pc, #372]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
          gFtmState.rx.validReceivedLength = 0U;
 80071b6:	4b5b      	ldr	r3, [pc, #364]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
          gFtmState.rx.totalValidReceivedLength = 0U;
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
          gFtmState.rx.readBufferOffset = 0U;
 80071c6:	4b57      	ldr	r3, [pc, #348]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        if(gFtmState.rx.receivedLength != 0U)
 80071ce:	e016      	b.n	80071fe <ST25FTM_StateRxPacket+0x1ca>
        }
      } else {
        if (gFtmState.totalDataLength == 0U)
 80071d0:	4b54      	ldr	r3, [pc, #336]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <ST25FTM_StateRxPacket+0x1ba>
        {
          /* we missed first packet: continue the reception and ask for retransmission */
          gFtmState.rx.nbError++;
 80071d8:	4b52      	ldr	r3, [pc, #328]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071da:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80071de:	3301      	adds	r3, #1
 80071e0:	4a50      	ldr	r2, [pc, #320]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071e2:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
          gFtmState.rx.lastError = 13;
 80071e6:	4b4f      	ldr	r3, [pc, #316]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071e8:	220d      	movs	r2, #13
 80071ea:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
          ST25FTM_LOG("FtmRxError13 First packet missed\r\n");
        } else {
          /* no error, so do nothing */
        }
        gFtmState.totalDataLength += msg_len;
 80071ee:	4b4d      	ldr	r3, [pc, #308]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	f107 031c 	add.w	r3, r7, #28
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4413      	add	r3, r2
 80071fa:	4a4a      	ldr	r2, [pc, #296]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80071fc:	6053      	str	r3, [r2, #4]

      }

      if(((pkt.ctrl.b.ackCtrl & (uint8_t)ST25FTM_SEGMENT_START) != 0U)
 80071fe:	1d3b      	adds	r3, r7, #4
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d106      	bne.n	800721e <ST25FTM_StateRxPacket+0x1ea>
         || (pkt.ctrl.b.ackCtrl == (uint8_t)ST25FTM_ACK_SINGLE_PKT))
 8007210:	1d3b      	adds	r3, r7, #4
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b30      	cmp	r3, #48	; 0x30
 800721c:	d123      	bne.n	8007266 <ST25FTM_StateRxPacket+0x232>
      {
        ST25FTM_LOG("Starting Segment %d\r\n", gFtmState.rx.segmentNumber);
        /* detect retransmission */
        gFtmState.rx.ignoreRetransSegment = 0U;
 800721e:	4b41      	ldr	r3, [pc, #260]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
        if(pkt.ctrl.b.segId != (gFtmState.rx.segmentNumber % 2U))
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800722e:	b2db      	uxtb	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	4b3c      	ldr	r3, [pc, #240]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007234:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	429a      	cmp	r2, r3
 800723e:	d003      	beq.n	8007248 <ST25FTM_StateRxPacket+0x214>
        {
          ST25FTM_LOG("Retransmission %d\r\n", pkt.ctrl.b.segId );
          /* segment is retransmitted, so don't take it into account */
          gFtmState.rx.ignoreRetransSegment = 1;
 8007240:	4b38      	ldr	r3, [pc, #224]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
        }

        if(gFtmState.rx.segmentLength > 0U)
 8007248:	4b36      	ldr	r3, [pc, #216]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800724a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <ST25FTM_StateRxPacket+0x22e>
        {
          gFtmState.retryLength += gFtmState.rx.segmentLength;
 8007252:	4b34      	ldr	r3, [pc, #208]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007258:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800725c:	4413      	add	r3, r2
 800725e:	4a31      	ldr	r2, [pc, #196]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007260:	6093      	str	r3, [r2, #8]
          ST25FTM_LOG("totalValidReceivedLength=%d\r\n",gFtmState.rx.totalValidReceivedLength);
        }

        /* rewind if necessary (i.e. when segment_data > 0)
           means that segment has been restarted */
        ST25FTM_RewindSegment();
 8007262:	f7ff fe43 	bl	8006eec <ST25FTM_RewindSegment>
      }
      if((gFtmState.rx.receivedLength + pkt.length) > gFtmState.rx.maxCmdLen)
 8007266:	4b2f      	ldr	r3, [pc, #188]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007268:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800726c:	1d3b      	adds	r3, r7, #4
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	441a      	add	r2, r3
 8007272:	4b2c      	ldr	r3, [pc, #176]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007274:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8007278:	429a      	cmp	r2, r3
 800727a:	d914      	bls.n	80072a6 <ST25FTM_StateRxPacket+0x272>
      {
        /* ERROR: receive more data than we can handle
           this may happen if we miss several start of segment, restart segment */
        gFtmState.rx.nbError++;
 800727c:	4b29      	ldr	r3, [pc, #164]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800727e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007282:	3301      	adds	r3, #1
 8007284:	4a27      	ldr	r2, [pc, #156]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007286:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
        gFtmState.rx.state = ST25FTM_READ_CMD;
 800728a:	4b26      	ldr	r3, [pc, #152]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        gFtmState.rx.lastError = 14;
 8007292:	4b24      	ldr	r3, [pc, #144]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 8007294:	220e      	movs	r2, #14
 8007296:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
        ST25FTM_LOG("FtmRxError14 too much data received\r\n");
        ST25FTM_LOG("gFtmState.rx.receivedLength=%d\r\n",gFtmState.rx.receivedLength);
        ST25FTM_LOG("gFtmState.rx.maxCmdLen=%d\r\n",gFtmState.rx.maxCmdLen);
        ST25FTM_RewindSegment();
 800729a:	f7ff fe27 	bl	8006eec <ST25FTM_RewindSegment>
        control = ST25FTM_STATE_MACHINE_RELEASE;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80072a4:	e109      	b.n	80074ba <ST25FTM_StateRxPacket+0x486>
      } else {

        //(void)memcpy(gFtmState.rx.dataPtr,pkt.data,pkt.length);
        /* don't register the data, if it has already been successfully transmitted */
        if(gFtmState.rx.ignoreRetransSegment == 0)
 80072a6:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072a8:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d109      	bne.n	80072c4 <ST25FTM_StateRxPacket+0x290>
        {
        	ST25FTM_SetData(gFtmState.rx.dataPtr,pkt.data,pkt.length);
 80072b0:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072b2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
 80072b6:	1d3b      	adds	r3, r7, #4
 80072b8:	6919      	ldr	r1, [r3, #16]
 80072ba:	1d3b      	adds	r3, r7, #4
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	461a      	mov	r2, r3
 80072c0:	f7ff fd24 	bl	8006d0c <ST25FTM_SetData>
        }
        gFtmState.rx.dataPtr += pkt.length;
 80072c4:	4b17      	ldr	r3, [pc, #92]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072c6:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 80072ca:	1d3b      	adds	r3, r7, #4
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	4413      	add	r3, r2
 80072d0:	4a14      	ldr	r2, [pc, #80]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072d2:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
        gFtmState.rx.segmentLength += pkt.length;
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072d8:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80072dc:	1d3b      	adds	r3, r7, #4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4413      	add	r3, r2
 80072e2:	4a10      	ldr	r2, [pc, #64]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072e4:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        gFtmState.rx.receivedLength += pkt.length;
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072ea:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 80072ee:	1d3b      	adds	r3, r7, #4
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	4413      	add	r3, r2
 80072f4:	4a0b      	ldr	r2, [pc, #44]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 80072f6:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174

        if(pkt.ctrl.b.ackCtrl == (uint8_t)(ST25FTM_SEGMENT_START))
 80072fa:	1d3b      	adds	r3, r7, #4
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b10      	cmp	r3, #16
 8007306:	d10f      	bne.n	8007328 <ST25FTM_StateRxPacket+0x2f4>
        {
      	  ST25FTM_GetCrc(pkt.data,pkt.length,ST25FTM_CRC_START);
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	6918      	ldr	r0, [r3, #16]
 800730c:	1d3b      	adds	r3, r7, #4
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	4619      	mov	r1, r3
 8007314:	f7ff faba 	bl	800688c <ST25FTM_GetCrc>
          gFtmState.rx.state = ST25FTM_READ_CMD;
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <ST25FTM_StateRxPacket+0x2f0>)
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8007320:	e0cb      	b.n	80074ba <ST25FTM_StateRxPacket+0x486>
 8007322:	bf00      	nop
 8007324:	20002334 	.word	0x20002334
        } else if ((pkt.ctrl.b.ackCtrl == (uint8_t)ST25FTM_SEGMENT_END) || (pkt.ctrl.b.ackCtrl == (uint8_t)ST25FTM_ACK_SINGLE_PKT))
 8007328:	1d3b      	adds	r3, r7, #4
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b20      	cmp	r3, #32
 8007334:	d006      	beq.n	8007344 <ST25FTM_StateRxPacket+0x310>
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b30      	cmp	r3, #48	; 0x30
 8007342:	d168      	bne.n	8007416 <ST25FTM_StateRxPacket+0x3e2>
        {
          ST25FTM_Crc_t computed_crc = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          if(pkt.ctrl.b.ackCtrl == (uint8_t)ST25FTM_ACK_SINGLE_PKT)
 800734a:	1d3b      	adds	r3, r7, #4
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b30      	cmp	r3, #48	; 0x30
 8007356:	d10a      	bne.n	800736e <ST25FTM_StateRxPacket+0x33a>
          {
            computed_crc = ST25FTM_GetCrc(pkt.data,pkt.length,ST25FTM_CRC_ONESHOT);
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	6918      	ldr	r0, [r3, #16]
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2203      	movs	r2, #3
 8007362:	4619      	mov	r1, r3
 8007364:	f7ff fa92 	bl	800688c <ST25FTM_GetCrc>
 8007368:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 800736c:	e010      	b.n	8007390 <ST25FTM_StateRxPacket+0x35c>
          } else if (pkt.ctrl.b.ackCtrl == (uint8_t)ST25FTM_SEGMENT_END) {
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b20      	cmp	r3, #32
 800737a:	d109      	bne.n	8007390 <ST25FTM_StateRxPacket+0x35c>
            computed_crc = ST25FTM_GetCrc(pkt.data,pkt.length,ST25FTM_CRC_END);
 800737c:	1d3b      	adds	r3, r7, #4
 800737e:	6918      	ldr	r0, [r3, #16]
 8007380:	1d3b      	adds	r3, r7, #4
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	4619      	mov	r1, r3
 8007388:	f7ff fa80 	bl	800688c <ST25FTM_GetCrc>
 800738c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
          }
          gFtmState.rx.validLength = gFtmState.rx.segmentLength;
 8007390:	4b4d      	ldr	r3, [pc, #308]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007392:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007396:	4a4c      	ldr	r2, [pc, #304]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007398:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
          uint8_t* crc_p = pkt.data + pkt.length;
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	1d3b      	adds	r3, r7, #4
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4413      	add	r3, r2
 80073a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
          uint32_t segment_crc = crc_p[0];
 80073aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
          segment_crc = (segment_crc << 8) + crc_p[1];
 80073b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80073be:	3201      	adds	r2, #1
 80073c0:	7812      	ldrb	r2, [r2, #0]
 80073c2:	4413      	add	r3, r2
 80073c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
          segment_crc = (segment_crc << 8) + crc_p[2];
 80073c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80073d2:	3202      	adds	r2, #2
 80073d4:	7812      	ldrb	r2, [r2, #0]
 80073d6:	4413      	add	r3, r2
 80073d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
          segment_crc = (segment_crc << 8) + crc_p[3];
 80073dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80073e6:	3203      	adds	r2, #3
 80073e8:	7812      	ldrb	r2, [r2, #0]
 80073ea:	4413      	add	r3, r2
 80073ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
          if(segment_crc == computed_crc)
 80073f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80073f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d104      	bne.n	8007406 <ST25FTM_StateRxPacket+0x3d2>
          {
            gFtmState.rx.state = ST25FTM_READ_WRITE_ACK;
 80073fc:	4b32      	ldr	r3, [pc, #200]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 80073fe:	2203      	movs	r2, #3
 8007400:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8007404:	e003      	b.n	800740e <ST25FTM_StateRxPacket+0x3da>
          } else {
            gFtmState.rx.state = ST25FTM_READ_WRITE_NACK;
 8007406:	4b30      	ldr	r3, [pc, #192]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007408:	2204      	movs	r2, #4
 800740a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
          }
          control = ST25FTM_STATE_MACHINE_CONTINUE;
 800740e:	2300      	movs	r3, #0
 8007410:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        {
 8007414:	e051      	b.n	80074ba <ST25FTM_StateRxPacket+0x486>
        } else {
          /* not beginning or end ofa segment */
          if(pkt.ctrl.b.inSegment)
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <ST25FTM_StateRxPacket+0x402>
          {
            /* Accumulate CRC */
            ST25FTM_GetCrc(pkt.data,pkt.length,ST25FTM_CRC_ACCUMULATE);
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	6918      	ldr	r0, [r3, #16]
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	4619      	mov	r1, r3
 8007430:	f7ff fa2c 	bl	800688c <ST25FTM_GetCrc>
 8007434:	e011      	b.n	800745a <ST25FTM_StateRxPacket+0x426>
          } else {
            /* No segment is used, consider the data as valid */
            gFtmState.rx.totalValidReceivedLength += pkt.length;
 8007436:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007438:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	4413      	add	r3, r2
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007444:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
            gFtmState.rx.validReceivedLength += pkt.length;
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 800744a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800744e:	1d3b      	adds	r3, r7, #4
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4413      	add	r3, r2
 8007454:	4a1c      	ldr	r2, [pc, #112]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007456:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
          }
          if((ST25FTM_CTRL_IS_SINGLE_PACKET(pkt.ctrl.b.position)) || (ST25FTM_CTRL_IS_LAST_PACKET(pkt.ctrl.b.position)))
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	f003 030c 	and.w	r3, r3, #12
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d006      	beq.n	8007476 <ST25FTM_StateRxPacket+0x442>
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	f003 030c 	and.w	r3, r3, #12
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b0c      	cmp	r3, #12
 8007474:	d11d      	bne.n	80074b2 <ST25FTM_StateRxPacket+0x47e>
          {
            if(gFtmState.rx.totalValidReceivedLength == *gFtmState.rx.cmdLen)
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007478:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800747c:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 800747e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d104      	bne.n	8007492 <ST25FTM_StateRxPacket+0x45e>
            {
              gFtmState.rx.state = ST25FTM_READ_DONE;
 8007488:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 800748a:	2208      	movs	r2, #8
 800748c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
            if(gFtmState.rx.totalValidReceivedLength == *gFtmState.rx.cmdLen)
 8007490:	e013      	b.n	80074ba <ST25FTM_StateRxPacket+0x486>
            } else {
              /* inconsistent data length */
              gFtmState.rx.nbError++;
 8007492:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 8007494:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007498:	3301      	adds	r3, #1
 800749a:	4a0b      	ldr	r2, [pc, #44]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 800749c:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
              gFtmState.rx.state = ST25FTM_READ_ERROR;         
 80074a0:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 80074a2:	2209      	movs	r2, #9
 80074a4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
              gFtmState.rx.lastError = 2;
 80074a8:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
            if(gFtmState.rx.totalValidReceivedLength == *gFtmState.rx.cmdLen)
 80074b0:	e003      	b.n	80074ba <ST25FTM_StateRxPacket+0x486>
              ST25FTM_LOG("FtmRxError2 Inconsistent length\r\n");
            }
          } else {
            /* this is a start/middle frame, continue reception */
            gFtmState.rx.state = ST25FTM_READ_CMD;
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <ST25FTM_StateRxPacket+0x494>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
          }
        }
      }
    }
  }
  return control;
 80074ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
}
 80074be:	4618      	mov	r0, r3
 80074c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20002334 	.word	0x20002334

080074cc <ST25FTM_StateRxWriteAck>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateRxWriteAck(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b0c4      	sub	sp, #272	; 0x110
 80074d0:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_RELEASE;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  ST25FTM_MessageStatus_t status;
  uint8_t msg[ST25FTM_BUFFER_LENGTH];
  int32_t msg_len = 1;
 80074d8:	2301      	movs	r3, #1
 80074da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  (void)memset(msg,0,sizeof(msg));
 80074de:	1d3b      	adds	r3, r7, #4
 80074e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f007 f816 	bl	800e518 <memset>
  if(gFtmState.rx.unrecoverableError)
 80074ec:	4b2f      	ldr	r3, [pc, #188]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 80074ee:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <ST25FTM_StateRxWriteAck+0x42>
  {
	ST25FTM_LOG("FtmRx TxStop\r\n");
	gFtmState.rx.lastAck = 1;
 80074f6:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	msg[0] = ((uint8_t)ST25FTM_STATUS_BYTE | (uint8_t)ST25FTM_ABORT_TRANSFER);
 80074fe:	1d3b      	adds	r3, r7, #4
 8007500:	2283      	movs	r2, #131	; 0x83
 8007502:	701a      	strb	r2, [r3, #0]
	gFtmState.rx.unrecoverableError = 0;
 8007504:	4b29      	ldr	r3, [pc, #164]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007506:	2200      	movs	r2, #0
 8007508:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
 800750c:	e01d      	b.n	800754a <ST25FTM_StateRxWriteAck+0x7e>
  } else if(gFtmState.rx.state == ST25FTM_READ_WRITE_ACK)
 800750e:	4b27      	ldr	r3, [pc, #156]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007510:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007514:	2b03      	cmp	r3, #3
 8007516:	d107      	bne.n	8007528 <ST25FTM_StateRxWriteAck+0x5c>
  {
    ST25FTM_LOG("FtmRx TxAck\r\n");
    gFtmState.rx.lastAck = 1;
 8007518:	4b24      	ldr	r3, [pc, #144]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
    msg[0] = ((uint8_t)ST25FTM_STATUS_BYTE | (uint8_t)ST25FTM_SEGMENT_OK);
 8007520:	1d3b      	adds	r3, r7, #4
 8007522:	2280      	movs	r2, #128	; 0x80
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e010      	b.n	800754a <ST25FTM_StateRxWriteAck+0x7e>
  } else if (gFtmState.rx.state == ST25FTM_READ_WRITE_NACK)
 8007528:	4b20      	ldr	r3, [pc, #128]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 800752a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800752e:	2b04      	cmp	r3, #4
 8007530:	d107      	bne.n	8007542 <ST25FTM_StateRxWriteAck+0x76>
  {
    ST25FTM_LOG("FtmRx TxNack\r\n");
    gFtmState.rx.lastAck = 0;
 8007532:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
    msg[0] = ((uint8_t)ST25FTM_STATUS_BYTE | (uint8_t)ST25FTM_CRC_ERROR);
 800753a:	1d3b      	adds	r3, r7, #4
 800753c:	2281      	movs	r2, #129	; 0x81
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	e003      	b.n	800754a <ST25FTM_StateRxWriteAck+0x7e>
  } else {
    /* Undefined Ack response */
    gFtmState.rx.lastError = 8;
 8007542:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007544:	2208      	movs	r2, #8
 8007546:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    ST25FTM_LOG("FtmRxError8 Unknown ack state %d\r\n",gFtmState.rx.state);
  }
  status = ST25FTM_WriteMessage(msg,msg_len);
 800754a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	4611      	mov	r1, r2
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe ff8c 	bl	8006470 <ST25FTM_WriteMessage>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
  if(status == ST25FTM_MSG_OK)
 800755e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8007562:	2b00      	cmp	r3, #0
 8007564:	d107      	bne.n	8007576 <ST25FTM_StateRxWriteAck+0xaa>
  {
    gFtmState.rx.state = ST25FTM_READ_WAIT_ACK_READ;
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007568:	2206      	movs	r2, #6
 800756a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    control = ST25FTM_STATE_MACHINE_CONTINUE;
 800756e:	2300      	movs	r3, #0
 8007570:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007574:	e012      	b.n	800759c <ST25FTM_StateRxWriteAck+0xd0>
  } else if (status == ST25FTM_MSG_BUSY) {
 8007576:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800757a:	2b02      	cmp	r3, #2
 800757c:	d10e      	bne.n	800759c <ST25FTM_StateRxWriteAck+0xd0>
    /* If Mailbox is busy there is a message in the mailbox
    a timeout may have occured */
    gFtmState.rx.nbError++;
 800757e:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007580:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007584:	3301      	adds	r3, #1
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007588:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
    gFtmState.rx.lastError = 7;
 800758c:	4b07      	ldr	r3, [pc, #28]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 800758e:	2207      	movs	r2, #7
 8007590:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    ST25FTM_LOG("FtmRxError7 Mailbox not empty\r\n");
    gFtmState.rx.state = ST25FTM_READ_CMD;
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <ST25FTM_StateRxWriteAck+0xe0>)
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  }  else {
    /* If a RF operation is on-going, the I2C is NACKED: retry later! */
  }
  return control;
 800759c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20002334 	.word	0x20002334

080075b0 <ST25FTM_StateRxWaitAckRead>:


static ST25FTM_StateMachineCtrl_t ST25FTM_StateRxWaitAckRead(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_RELEASE;
 80075b6:	2301      	movs	r3, #1
 80075b8:	71fb      	strb	r3, [r7, #7]
  ST25FTM_MessageOwner_t msgOwner = ST25FTM_GetMessageOwner();
 80075ba:	f7fe ffd9 	bl	8006570 <ST25FTM_GetMessageOwner>
 80075be:	4603      	mov	r3, r0
 80075c0:	71bb      	strb	r3, [r7, #6]
  if((msgOwner == ST25FTM_MESSAGE_EMPTY) || (msgOwner == ST25FTM_MESSAGE_PEER))
 80075c2:	79bb      	ldrb	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <ST25FTM_StateRxWaitAckRead+0x20>
 80075c8:	79bb      	ldrb	r3, [r7, #6]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	f040 8084 	bne.w	80076d8 <ST25FTM_StateRxWaitAckRead+0x128>
  {
    ST25FTM_LOG("lastAck=%d\r\n",gFtmState.rx.lastAck);
    if(gFtmState.rx.lastAck != 0U)
 80075d0:	4b44      	ldr	r3, [pc, #272]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80075d2:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d03a      	beq.n	8007650 <ST25FTM_StateRxWaitAckRead+0xa0>
    {
     /* only consider the data valid once the ack has been read */
      ST25FTM_LOG("ignoreRetrans=%d\r\n",gFtmState.rx.ignoreRetransSegment);
      if(gFtmState.rx.ignoreRetransSegment == 0U)
 80075da:	4b42      	ldr	r3, [pc, #264]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80075dc:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d121      	bne.n	8007628 <ST25FTM_StateRxWaitAckRead+0x78>
      {
        ST25FTM_LOG("Ending Segment %d\r\n", gFtmState.rx.segmentNumber);
        gFtmState.rx.segmentPtr = gFtmState.rx.dataPtr;
 80075e4:	4b3f      	ldr	r3, [pc, #252]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80075e6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80075ea:	4a3e      	ldr	r2, [pc, #248]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80075ec:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
        gFtmState.rx.validReceivedLength += gFtmState.rx.validLength;
 80075f0:	4b3c      	ldr	r3, [pc, #240]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80075f2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80075f6:	4b3b      	ldr	r3, [pc, #236]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80075f8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80075fc:	4413      	add	r3, r2
 80075fe:	4a39      	ldr	r2, [pc, #228]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007600:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
        gFtmState.rx.totalValidReceivedLength += gFtmState.rx.validLength;
 8007604:	4b37      	ldr	r3, [pc, #220]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007606:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800760a:	4b36      	ldr	r3, [pc, #216]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800760c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007610:	4413      	add	r3, r2
 8007612:	4a34      	ldr	r2, [pc, #208]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007614:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        gFtmState.rx.segmentNumber++;
 8007618:	4b32      	ldr	r3, [pc, #200]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800761a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800761e:	3301      	adds	r3, #1
 8007620:	4a30      	ldr	r2, [pc, #192]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007622:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
 8007626:	e00f      	b.n	8007648 <ST25FTM_StateRxWaitAckRead+0x98>
      } else {
        ST25FTM_LOG("Dropping retrans %d\r\n", gFtmState.rx.segmentNumber);
        gFtmState.rx.dataPtr = gFtmState.rx.segmentPtr;
 8007628:	4b2e      	ldr	r3, [pc, #184]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800762a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800762e:	4a2d      	ldr	r2, [pc, #180]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007630:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
        gFtmState.rx.receivedLength -= gFtmState.rx.segmentLength;
 8007634:	4b2b      	ldr	r3, [pc, #172]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007636:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800763a:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800763c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	4a28      	ldr	r2, [pc, #160]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007644:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
      }
      gFtmState.rx.segmentLength = 0U;
 8007648:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

      ST25FTM_LOG("receivedLen=%d\r\n",gFtmState.rx.receivedLength);
      ST25FTM_LOG("validLen=%d\r\n",gFtmState.rx.validLength);
      ST25FTM_LOG("totalvalid=%d\r\n",gFtmState.rx.totalValidReceivedLength);
    }
    if((ST25FTM_CTRL_IS_SINGLE_PACKET(gFtmState.rx.pktPosition) ||
 8007650:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007652:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <ST25FTM_StateRxWaitAckRead+0xb4>
        ST25FTM_CTRL_IS_LAST_PACKET(gFtmState.rx.pktPosition)) &&
 800765a:	4b22      	ldr	r3, [pc, #136]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800765c:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
    if((ST25FTM_CTRL_IS_SINGLE_PACKET(gFtmState.rx.pktPosition) ||
 8007660:	2b03      	cmp	r3, #3
 8007662:	d135      	bne.n	80076d0 <ST25FTM_StateRxWaitAckRead+0x120>
        (gFtmState.rx.lastAck != 0U))
 8007664:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007666:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
        ST25FTM_CTRL_IS_LAST_PACKET(gFtmState.rx.pktPosition)) &&
 800766a:	2b00      	cmp	r3, #0
 800766c:	d030      	beq.n	80076d0 <ST25FTM_StateRxWaitAckRead+0x120>
    {
      if(ST25FTM_CTRL_IS_LAST_PACKET(gFtmState.rx.pktPosition) &&
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007670:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 8007674:	2b03      	cmp	r3, #3
 8007676:	d11a      	bne.n	80076ae <ST25FTM_StateRxWaitAckRead+0xfe>
          (gFtmState.rx.totalValidReceivedLength != *gFtmState.rx.cmdLen))
 8007678:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800767a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800767e:	4b19      	ldr	r3, [pc, #100]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007680:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007684:	681b      	ldr	r3, [r3, #0]
      if(ST25FTM_CTRL_IS_LAST_PACKET(gFtmState.rx.pktPosition) &&
 8007686:	429a      	cmp	r2, r3
 8007688:	d011      	beq.n	80076ae <ST25FTM_StateRxWaitAckRead+0xfe>
      {
        /* inconsistent data length -> error */
        gFtmState.rx.lastError = 3U;
 800768a:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800768c:	2203      	movs	r2, #3
 800768e:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
        ST25FTM_LOG("FtmRxError3: Inconsistent length\r\n");
        gFtmState.rx.nbError++;
 8007692:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 8007694:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007698:	3301      	adds	r3, #1
 800769a:	4a12      	ldr	r2, [pc, #72]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 800769c:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
        gFtmState.rx.state = ST25FTM_READ_ERROR;
 80076a0:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80076a2:	2209      	movs	r2, #9
 80076a4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        control =  ST25FTM_STATE_MACHINE_RELEASE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	71fb      	strb	r3, [r7, #7]
      if(ST25FTM_CTRL_IS_LAST_PACKET(gFtmState.rx.pktPosition) &&
 80076ac:	e014      	b.n	80076d8 <ST25FTM_StateRxWaitAckRead+0x128>
      } else {
        /* no need to check received length in single packet */
        if(ST25FTM_CTRL_IS_SINGLE_PACKET(gFtmState.rx.pktPosition))
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80076b0:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <ST25FTM_StateRxWaitAckRead+0x116>
        {
          *gFtmState.rx.cmdLen = gFtmState.rx.totalValidReceivedLength;
 80076b8:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80076ba:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80076be:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80076c0:	f8d2 2180 	ldr.w	r2, [r2, #384]	; 0x180
 80076c4:	601a      	str	r2, [r3, #0]
        }
        ST25FTM_LOG("FtmRx Ack has been read\r\n");
        gFtmState.rx.state = ST25FTM_READ_DONE;
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80076c8:	2208      	movs	r2, #8
 80076ca:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
      if(ST25FTM_CTRL_IS_LAST_PACKET(gFtmState.rx.pktPosition) &&
 80076ce:	e003      	b.n	80076d8 <ST25FTM_StateRxWaitAckRead+0x128>
      }
    } else {
      /* continue reception if this is not the last packet or this was a NACK */
      ST25FTM_LOG("FtmRx Continue reception\r\n");
      gFtmState.rx.state = ST25FTM_READ_CMD;
 80076d0:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <ST25FTM_StateRxWaitAckRead+0x134>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    }
  }
  return control;
 80076d8:	79fb      	ldrb	r3, [r7, #7]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20002334 	.word	0x20002334

080076e8 <ST25FTM_Receive>:


void ST25FTM_Receive(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_CONTINUE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	71fb      	strb	r3, [r7, #7]
  while(control == ST25FTM_STATE_MACHINE_CONTINUE)
 80076f2:	e031      	b.n	8007758 <ST25FTM_Receive+0x70>
  {
    switch (gFtmState.rx.state)
 80076f4:	4b1c      	ldr	r3, [pc, #112]	; (8007768 <ST25FTM_Receive+0x80>)
 80076f6:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80076fa:	2b06      	cmp	r3, #6
 80076fc:	d829      	bhi.n	8007752 <ST25FTM_Receive+0x6a>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <ST25FTM_Receive+0x1c>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007721 	.word	0x08007721
 8007708:	0800772b 	.word	0x0800772b
 800770c:	08007735 	.word	0x08007735
 8007710:	0800773f 	.word	0x0800773f
 8007714:	0800773f 	.word	0x0800773f
 8007718:	0800773f 	.word	0x0800773f
 800771c:	08007749 	.word	0x08007749
    {
      case ST25FTM_READ_IDLE:
        control = ST25FTM_StateRxIdle();
 8007720:	f7ff fc12 	bl	8006f48 <ST25FTM_StateRxIdle>
 8007724:	4603      	mov	r3, r0
 8007726:	71fb      	strb	r3, [r7, #7]
      break;
 8007728:	e016      	b.n	8007758 <ST25FTM_Receive+0x70>
      case ST25FTM_READ_CMD:
        control = ST25FTM_StateRxCommand();
 800772a:	f7ff fc49 	bl	8006fc0 <ST25FTM_StateRxCommand>
 800772e:	4603      	mov	r3, r0
 8007730:	71fb      	strb	r3, [r7, #7]
      break;
 8007732:	e011      	b.n	8007758 <ST25FTM_Receive+0x70>
      case ST25FTM_READ_PKT:
        control = ST25FTM_StateRxPacket();
 8007734:	f7ff fc7e 	bl	8007034 <ST25FTM_StateRxPacket>
 8007738:	4603      	mov	r3, r0
 800773a:	71fb      	strb	r3, [r7, #7]
      break;
 800773c:	e00c      	b.n	8007758 <ST25FTM_Receive+0x70>
      case ST25FTM_READ_WRITE_ACK:
      case ST25FTM_READ_WRITE_NACK:
      case ST25FTM_READ_WRITE_ERR:
        control = ST25FTM_StateRxWriteAck();
 800773e:	f7ff fec5 	bl	80074cc <ST25FTM_StateRxWriteAck>
 8007742:	4603      	mov	r3, r0
 8007744:	71fb      	strb	r3, [r7, #7]
      break;
 8007746:	e007      	b.n	8007758 <ST25FTM_Receive+0x70>
      case ST25FTM_READ_WAIT_ACK_READ:
        control = ST25FTM_StateRxWaitAckRead();
 8007748:	f7ff ff32 	bl	80075b0 <ST25FTM_StateRxWaitAckRead>
 800774c:	4603      	mov	r3, r0
 800774e:	71fb      	strb	r3, [r7, #7]
      break;
 8007750:	e002      	b.n	8007758 <ST25FTM_Receive+0x70>
      default:
        control = ST25FTM_STATE_MACHINE_RELEASE;
 8007752:	2301      	movs	r3, #1
 8007754:	71fb      	strb	r3, [r7, #7]
      break;
 8007756:	bf00      	nop
  while(control == ST25FTM_STATE_MACHINE_CONTINUE)
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0ca      	beq.n	80076f4 <ST25FTM_Receive+0xc>
    }
  }
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20002334 	.word	0x20002334

0800776c <ST25FTM_GetData>:
#include "st25ftm_common.h"
#include "st25ftm_config.h"
#include <string.h>

static void ST25FTM_GetData(uint8_t* buf, uint8_t* src, uint32_t length)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  if(gFtmState.tx.getdata_cb == NULL)
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <ST25FTM_GetData+0x38>)
 800777a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800777e:	2b00      	cmp	r3, #0
 8007780:	d105      	bne.n	800778e <ST25FTM_GetData+0x22>
  {
	/* Default case: simply copy source data into packed buffer */
    (void)memcpy(buf,src, length);
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f006 feb8 	bl	800e4fc <memcpy>
  } else {
	/* Let's the application manage the input data */
    gFtmState.tx.getdata_cb(buf, src, length);
  }
}
 800778c:	e006      	b.n	800779c <ST25FTM_GetData+0x30>
    gFtmState.tx.getdata_cb(buf, src, length);
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <ST25FTM_GetData+0x38>)
 8007790:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	4798      	blx	r3
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20002334 	.word	0x20002334

080077a8 <ST25FTM_Pack>:

static uint32_t  ST25FTM_Pack(ST25FTM_Packet_t *pkt, uint8_t *msg)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
  uint32_t data_index = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
  uint32_t data_payload = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]

  msg[index] = pkt->ctrl.byte;
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4413      	add	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	701a      	strb	r2, [r3, #0]
  index++;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3301      	adds	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
  if(pkt->ctrl.b.pktLen != 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <ST25FTM_Pack+0x4a>
  {
    msg[index] = (uint8_t)pkt->length;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6859      	ldr	r1, [r3, #4]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	4413      	add	r3, r2
 80077e8:	b2ca      	uxtb	r2, r1
 80077ea:	701a      	strb	r2, [r3, #0]
    index++;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	3301      	adds	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
  }

  if(ST25FTM_CTRL_HAS_TOTAL_LEN(pkt->ctrl))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 030c 	and.w	r3, r3, #12
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d11a      	bne.n	8007836 <ST25FTM_Pack+0x8e>
  {
    uint32_t txTotalLen = pkt->totalLength;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60bb      	str	r3, [r7, #8]
    ST25FTM_CHANGE_ENDIANESS(txTotalLen);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	0e1a      	lsrs	r2, r3, #24
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	0a1b      	lsrs	r3, r3, #8
 800780e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007812:	431a      	orrs	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800781c:	431a      	orrs	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	061b      	lsls	r3, r3, #24
 8007822:	4313      	orrs	r3, r2
 8007824:	60bb      	str	r3, [r7, #8]
    (void)memcpy(&msg[index],&txTotalLen,sizeof(txTotalLen));
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	4413      	add	r3, r2
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	601a      	str	r2, [r3, #0]
    index += sizeof(pkt->totalLength);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	3304      	adds	r3, #4
 8007834:	617b      	str	r3, [r7, #20]
  }

  /* Save data index for Crc computation */
  data_index = index;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	613b      	str	r3, [r7, #16]
  data_payload = pkt->length - ( pkt->has_crc ? 4 : 0);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7d1b      	ldrb	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <ST25FTM_Pack+0xa2>
 8007846:	2304      	movs	r3, #4
 8007848:	e000      	b.n	800784c <ST25FTM_Pack+0xa4>
 800784a:	2300      	movs	r3, #0
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	60fb      	str	r3, [r7, #12]
  ST25FTM_GetData(&msg[index],pkt->data, data_payload);
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	18d0      	adds	r0, r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4619      	mov	r1, r3
 800785e:	f7ff ff85 	bl	800776c <ST25FTM_GetData>
  index += data_payload;
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	617b      	str	r3, [r7, #20]

  /* compute CRC */
  if(gFtmState.tx.sendAck == ST25FTM_SEND_WITH_ACK)
 800786a:	4b37      	ldr	r3, [pc, #220]	; (8007948 <ST25FTM_Pack+0x1a0>)
 800786c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007870:	2b01      	cmp	r3, #1
 8007872:	d163      	bne.n	800793c <ST25FTM_Pack+0x194>
  {
    pkt->crc = 0;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	60da      	str	r2, [r3, #12]
    if(pkt->ctrl.b.ackCtrl == ST25FTM_SEGMENT_START)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b10      	cmp	r3, #16
 8007886:	d108      	bne.n	800789a <ST25FTM_Pack+0xf2>
    {
      ST25FTM_GetCrc(&msg[data_index],data_payload,ST25FTM_CRC_START);
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4413      	add	r3, r2
 800788e:	2200      	movs	r2, #0
 8007890:	68f9      	ldr	r1, [r7, #12]
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fffa 	bl	800688c <ST25FTM_GetCrc>
 8007898:	e02d      	b.n	80078f6 <ST25FTM_Pack+0x14e>
    } else if (pkt->ctrl.b.ackCtrl == ST25FTM_SEGMENT_END)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d10b      	bne.n	80078c0 <ST25FTM_Pack+0x118>
    {
      /* pkt.length contains the CRC length, remove it */
      pkt->crc = ST25FTM_GetCrc(&msg[data_index],data_payload,ST25FTM_CRC_END);
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	4413      	add	r3, r2
 80078ae:	2201      	movs	r2, #1
 80078b0:	68f9      	ldr	r1, [r7, #12]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe ffea 	bl	800688c <ST25FTM_GetCrc>
 80078b8:	4602      	mov	r2, r0
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	e01a      	b.n	80078f6 <ST25FTM_Pack+0x14e>
    } else if (pkt->ctrl.b.ackCtrl == ST25FTM_ACK_SINGLE_PKT) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b30      	cmp	r3, #48	; 0x30
 80078cc:	d10b      	bne.n	80078e6 <ST25FTM_Pack+0x13e>
      /* Single frame segment */
      pkt->crc = ST25FTM_GetCrc(&msg[data_index],data_payload,ST25FTM_CRC_ONESHOT);
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	2203      	movs	r2, #3
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe ffd7 	bl	800688c <ST25FTM_GetCrc>
 80078de:	4602      	mov	r2, r0
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]
 80078e4:	e007      	b.n	80078f6 <ST25FTM_Pack+0x14e>
    } else {
      /* middle of a segment */
      ST25FTM_GetCrc(&msg[data_index],data_payload,ST25FTM_CRC_ACCUMULATE);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4413      	add	r3, r2
 80078ec:	2202      	movs	r2, #2
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe ffcb 	bl	800688c <ST25FTM_GetCrc>
    }
    if(pkt->has_crc)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7d1b      	ldrb	r3, [r3, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01e      	beq.n	800793c <ST25FTM_Pack+0x194>
    {
      ST25FTM_CHANGE_ENDIANESS(pkt->crc);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	0e1a      	lsrs	r2, r3, #24
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	061b      	lsls	r3, r3, #24
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60da      	str	r2, [r3, #12]
     (void)memcpy(&msg[index],&pkt->crc, 4);
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4413      	add	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	320c      	adds	r2, #12
 8007932:	6812      	ldr	r2, [r2, #0]
 8007934:	601a      	str	r2, [r3, #0]
      index += 4;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3304      	adds	r3, #4
 800793a:	617b      	str	r3, [r7, #20]
    }
  }

  return index;
 800793c:	697b      	ldr	r3, [r7, #20]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20002334 	.word	0x20002334

0800794c <ST25FTM_TxStateInit>:

void ST25FTM_TxStateInit(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  gFtmState.tx.state = ST25FTM_WRITE_IDLE;
 8007950:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007952:	2200      	movs	r2, #0
 8007954:	731a      	strb	r2, [r3, #12]
  gFtmState.tx.lastState = ST25FTM_WRITE_IDLE;
 8007956:	4b23      	ldr	r3, [pc, #140]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007958:	2200      	movs	r2, #0
 800795a:	735a      	strb	r2, [r3, #13]
  gFtmState.tx.frameMaxLength = 0xFF;
 800795c:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 800795e:	22ff      	movs	r2, #255	; 0xff
 8007960:	61da      	str	r2, [r3, #28]
  gFtmState.tx.cmdPtr = NULL;
 8007962:	4b20      	ldr	r3, [pc, #128]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007964:	2200      	movs	r2, #0
 8007966:	611a      	str	r2, [r3, #16]
  gFtmState.tx.cmdLen = 0;
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 800796a:	2200      	movs	r2, #0
 800796c:	615a      	str	r2, [r3, #20]
  gFtmState.tx.remainingData = 0;
 800796e:	4b1d      	ldr	r3, [pc, #116]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007970:	2200      	movs	r2, #0
 8007972:	619a      	str	r2, [r3, #24]
  gFtmState.tx.nbError = 0;
 8007974:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007976:	2200      	movs	r2, #0
 8007978:	621a      	str	r2, [r3, #32]
  gFtmState.tx.sendAck = ST25FTM_SEND_WITH_ACK;
 800797a:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  gFtmState.tx.dataPtr = NULL;
 8007982:	4b18      	ldr	r3, [pc, #96]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007984:	2200      	movs	r2, #0
 8007986:	629a      	str	r2, [r3, #40]	; 0x28
  gFtmState.tx.segmentPtr = NULL;
 8007988:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 800798a:	2200      	movs	r2, #0
 800798c:	62da      	str	r2, [r3, #44]	; 0x2c
  gFtmState.tx.segmentStart = NULL;
 800798e:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007990:	2200      	movs	r2, #0
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
  gFtmState.tx.segmentLength = 0;
 8007994:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 8007996:	2200      	movs	r2, #0
 8007998:	635a      	str	r2, [r3, #52]	; 0x34
  gFtmState.tx.segmentRemainingData = 0;
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 800799c:	2200      	movs	r2, #0
 800799e:	639a      	str	r2, [r3, #56]	; 0x38
  gFtmState.tx.segmentMaxLength = ST25FTM_SEGMENT_LEN;
 80079a0:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 80079a2:	f241 62a3 	movw	r2, #5795	; 0x16a3
 80079a6:	63da      	str	r2, [r3, #60]	; 0x3c
  gFtmState.tx.retransmit = 0;
 80079a8:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  gFtmState.tx.pktIndex = 0;
 80079b0:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	645a      	str	r2, [r3, #68]	; 0x44
  gFtmState.tx.segmentIndex = 0;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	649a      	str	r2, [r3, #72]	; 0x48
  gFtmState.tx.packetLength = 0;
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  gFtmState.tx.segmentNumber = 0;
 80079c4:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  gFtmState.tx.getdata_cb = NULL;
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <ST25FTM_TxStateInit+0x98>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  (void)memset(gFtmState.tx.packetBuf, 0, sizeof(gFtmState.tx.packetBuf));
 80079d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079d8:	2100      	movs	r1, #0
 80079da:	4803      	ldr	r0, [pc, #12]	; (80079e8 <ST25FTM_TxStateInit+0x9c>)
 80079dc:	f006 fd9c 	bl	800e518 <memset>
}
 80079e0:	bf00      	nop
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20002334 	.word	0x20002334
 80079e8:	20002380 	.word	0x20002380

080079ec <ST25FTM_StateTxIdle>:


/************** Ftm Tx States ***************/
static ST25FTM_StateMachineCtrl_t ST25FTM_StateTxIdle(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  ST25FTM_LOG("Tx Length %d\r\n",  gFtmState.tx.cmdLen);
  gFtmState.tx.remainingData =   gFtmState.tx.cmdLen;
 80079f0:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 80079f6:	6193      	str	r3, [r2, #24]
  gFtmState.tx.state = ST25FTM_WRITE_CMD;
 80079f8:	4b12      	ldr	r3, [pc, #72]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	731a      	strb	r2, [r3, #12]
  gFtmState.tx.dataPtr = gFtmState.tx.cmdPtr;
 80079fe:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	4a10      	ldr	r2, [pc, #64]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a04:	6293      	str	r3, [r2, #40]	; 0x28
  gFtmState.tx.segmentLength = 0;
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	635a      	str	r2, [r3, #52]	; 0x34
  gFtmState.tx.segmentRemainingData = 0;
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	639a      	str	r2, [r3, #56]	; 0x38
  gFtmState.tx.retransmit = 0;
 8007a12:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  gFtmState.tx.pktIndex = 0;
 8007a1a:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	645a      	str	r2, [r3, #68]	; 0x44
  gFtmState.tx.segmentIndex = 0;
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	649a      	str	r2, [r3, #72]	; 0x48
  gFtmState.totalDataLength = 0;
 8007a26:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]
  gFtmState.retryLength = 0;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	609a      	str	r2, [r3, #8]
  gFtmState.tx.segmentNumber = 0;
 8007a32:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <ST25FTM_StateTxIdle+0x58>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  ST25FTM_CRC_Initialize();
 8007a3a:	f7fe feed 	bl	8006818 <ST25FTM_CRC_Initialize>
  return ST25FTM_STATE_MACHINE_CONTINUE;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20002334 	.word	0x20002334

08007a48 <ST25FTM_StateTxCommand>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateTxCommand(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
  if (gFtmState.tx.remainingData > 0U)
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d039      	beq.n	8007aca <ST25FTM_StateTxCommand+0x82>
    uint32_t data_processed;

    ST25FTM_LOG("Starting Segment %d\r\n", gFtmState.tx.segmentNumber);

    /* prepare next segment */
    if (gFtmState.tx.sendAck == ST25FTM_SEND_WITH_ACK) {
 8007a56:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d111      	bne.n	8007a84 <ST25FTM_StateTxCommand+0x3c>
      data_processed = (gFtmState.tx.remainingData > (gFtmState.tx.segmentMaxLength - 4U)) ?
 8007a60:	4b1f      	ldr	r3, [pc, #124]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	4b1e      	ldr	r3, [pc, #120]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a68:	3b04      	subs	r3, #4
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	bf28      	it	cs
 8007a6e:	4613      	movcs	r3, r2
 8007a70:	607b      	str	r3, [r7, #4]
                         (gFtmState.tx.segmentMaxLength - 4U) :
                          gFtmState.tx.remainingData;
      gFtmState.tx.segmentLength = data_processed + 4;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4a1a      	ldr	r2, [pc, #104]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a78:	6353      	str	r3, [r2, #52]	; 0x34
      gFtmState.tx.segmentPtr = gFtmState.tx.dataPtr;
 8007a7a:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a82:	e009      	b.n	8007a98 <ST25FTM_StateTxCommand+0x50>
    } else {
      data_processed = gFtmState.tx.remainingData;
 8007a84:	4b16      	ldr	r3, [pc, #88]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	607b      	str	r3, [r7, #4]
      gFtmState.tx.segmentLength = data_processed;
 8007a8a:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6353      	str	r3, [r2, #52]	; 0x34
      gFtmState.tx.segmentPtr = gFtmState.tx.dataPtr;
 8007a90:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	4a12      	ldr	r2, [pc, #72]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a96:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    gFtmState.tx.segmentStart = gFtmState.tx.segmentPtr;
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4a10      	ldr	r2, [pc, #64]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007a9e:	6313      	str	r3, [r2, #48]	; 0x30
    gFtmState.tx.remainingData -= data_processed;
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007aa2:	699a      	ldr	r2, [r3, #24]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	4a0d      	ldr	r2, [pc, #52]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007aaa:	6193      	str	r3, [r2, #24]
    gFtmState.tx.dataPtr += data_processed;
 8007aac:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	4a0a      	ldr	r2, [pc, #40]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007ab6:	6293      	str	r3, [r2, #40]	; 0x28
    gFtmState.tx.segmentRemainingData = gFtmState.tx.segmentLength;
 8007ab8:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abc:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007abe:	6393      	str	r3, [r2, #56]	; 0x38
    gFtmState.tx.state = ST25FTM_WRITE_SEGMENT;
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	731a      	strb	r2, [r3, #12]
  } else {
    gFtmState.tx.state = ST25FTM_WRITE_DONE;
    return ST25FTM_STATE_MACHINE_RELEASE;
  }
  return ST25FTM_STATE_MACHINE_CONTINUE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e003      	b.n	8007ad2 <ST25FTM_StateTxCommand+0x8a>
    gFtmState.tx.state = ST25FTM_WRITE_DONE;
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <ST25FTM_StateTxCommand+0x98>)
 8007acc:	2206      	movs	r2, #6
 8007ace:	731a      	strb	r2, [r3, #12]
    return ST25FTM_STATE_MACHINE_RELEASE;
 8007ad0:	2301      	movs	r3, #1
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20002334 	.word	0x20002334

08007ae4 <ST25FTM_StateTxSegment>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateTxSegment(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
  ST25FTM_Packet_t pkt = {0};
 8007aea:	463b      	mov	r3, r7
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	605a      	str	r2, [r3, #4]
 8007af2:	609a      	str	r2, [r3, #8]
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	611a      	str	r2, [r3, #16]
 8007af8:	615a      	str	r2, [r3, #20]
  pkt.length = gFtmState.tx.frameMaxLength - sizeof(ST25FTM_Ctrl_Byte_t);
 8007afa:	4b79      	ldr	r3, [pc, #484]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
  pkt.has_crc = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	753b      	strb	r3, [r7, #20]

  pkt.data = gFtmState.tx.segmentPtr;
 8007b06:	4b76      	ldr	r3, [pc, #472]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	613b      	str	r3, [r7, #16]
  pkt.ctrl.b.segId = (uint8_t)(gFtmState.tx.segmentNumber % 2U);
 8007b0c:	4b74      	ldr	r3, [pc, #464]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b0e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	783b      	ldrb	r3, [r7, #0]
 8007b1a:	f362 0341 	bfi	r3, r2, #1, #1
 8007b1e:	703b      	strb	r3, [r7, #0]
  pkt.ctrl.b.ackCtrl = 0;
 8007b20:	783b      	ldrb	r3, [r7, #0]
 8007b22:	f36f 1305 	bfc	r3, #4, #2
 8007b26:	703b      	strb	r3, [r7, #0]
  pkt.ctrl.b.inSegment = gFtmState.tx.sendAck == ST25FTM_SEND_WITH_ACK;
 8007b28:	4b6d      	ldr	r3, [pc, #436]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	bf0c      	ite	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	2300      	movne	r3, #0
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	783b      	ldrb	r3, [r7, #0]
 8007b3a:	f362 0300 	bfi	r3, r2, #0, #1
 8007b3e:	703b      	strb	r3, [r7, #0]

  ST25FTM_LOG("SegmentLen %d\r\n",gFtmState.tx.segmentLength);
  /* Segment has to be sent over several packets */
  if(gFtmState.tx.segmentRemainingData > ST25FTM_MAX_DATA_IN_SINGLE_PACKET())
 8007b40:	4b67      	ldr	r3, [pc, #412]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b44:	4b66      	ldr	r3, [pc, #408]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d93f      	bls.n	8007bce <ST25FTM_StateTxSegment+0xea>
  {

    if(gFtmState.tx.pktIndex == 0U)
 8007b4e:	4b64      	ldr	r3, [pc, #400]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10f      	bne.n	8007b76 <ST25FTM_StateTxSegment+0x92>
    {
      /* First Packet
         don't mention packet length if the whole buffer is used */
      pkt.ctrl.b.pktLen = 0;
 8007b56:	783b      	ldrb	r3, [r7, #0]
 8007b58:	f36f 1386 	bfc	r3, #6, #1
 8007b5c:	703b      	strb	r3, [r7, #0]
      pkt.totalLength = gFtmState.tx.cmdLen;
 8007b5e:	4b60      	ldr	r3, [pc, #384]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	60bb      	str	r3, [r7, #8]
      pkt.ctrl.b.position = (uint8_t)(ST25FTM_FIRST_PACKET);
 8007b64:	783b      	ldrb	r3, [r7, #0]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f362 0383 	bfi	r3, r2, #2, #2
 8007b6c:	703b      	strb	r3, [r7, #0]
      pkt.length -= sizeof(pkt.totalLength);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3b04      	subs	r3, #4
 8007b72:	607b      	str	r3, [r7, #4]
 8007b74:	e008      	b.n	8007b88 <ST25FTM_StateTxSegment+0xa4>
    } else {
      /* Middle Packet
         don't mention packet length if the whole buffer is used */
      pkt.ctrl.b.pktLen = 0U;
 8007b76:	783b      	ldrb	r3, [r7, #0]
 8007b78:	f36f 1386 	bfc	r3, #6, #1
 8007b7c:	703b      	strb	r3, [r7, #0]
      pkt.ctrl.b.position = (uint8_t)(ST25FTM_MIDDLE_PACKET);
 8007b7e:	783b      	ldrb	r3, [r7, #0]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f362 0383 	bfi	r3, r2, #2, #2
 8007b86:	703b      	strb	r3, [r7, #0]
    }
    if(gFtmState.tx.sendAck == ST25FTM_SEND_WITH_ACK)
 8007b88:	4b55      	ldr	r3, [pc, #340]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d16d      	bne.n	8007c6e <ST25FTM_StateTxSegment+0x18a>
    {
      if(gFtmState.tx.segmentIndex == 0U)
 8007b92:	4b53      	ldr	r3, [pc, #332]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10a      	bne.n	8007bb0 <ST25FTM_StateTxSegment+0xcc>
      {
        pkt.ctrl.b.ackCtrl |= (uint8_t)(ST25FTM_SEGMENT_START);
 8007b9a:	783b      	ldrb	r3, [r7, #0]
 8007b9c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	783b      	ldrb	r3, [r7, #0]
 8007baa:	f362 1305 	bfi	r3, r2, #4, #2
 8007bae:	703b      	strb	r3, [r7, #0]
      }
      if((gFtmState.tx.segmentRemainingData - pkt.length) < sizeof(pkt.crc))
 8007bb0:	4b4b      	ldr	r3, [pc, #300]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d858      	bhi.n	8007c6e <ST25FTM_StateTxSegment+0x18a>
      {
        /* This is to make sure that CRC is not split between 2 packets */
        pkt.ctrl.b.pktLen = 1U;
 8007bbc:	783b      	ldrb	r3, [r7, #0]
 8007bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc2:	703b      	strb	r3, [r7, #0]
        pkt.length = gFtmState.tx.segmentRemainingData - sizeof(pkt.crc);
 8007bc4:	4b46      	ldr	r3, [pc, #280]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	3b04      	subs	r3, #4
 8007bca:	607b      	str	r3, [r7, #4]
 8007bcc:	e04f      	b.n	8007c6e <ST25FTM_StateTxSegment+0x18a>
      }
    }
  } else {
    /* Single or last Packet command */
    pkt.length = gFtmState.tx.segmentRemainingData;
 8007bce:	4b44      	ldr	r3, [pc, #272]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	607b      	str	r3, [r7, #4]
    if(gFtmState.tx.segmentRemainingData == ST25FTM_MAX_DATA_IN_SINGLE_PACKET())
 8007bd4:	4b42      	ldr	r3, [pc, #264]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd8:	4b41      	ldr	r3, [pc, #260]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d104      	bne.n	8007bec <ST25FTM_StateTxSegment+0x108>
    {
      /* exact fit */
      pkt.ctrl.b.pktLen = 0U;
 8007be2:	783b      	ldrb	r3, [r7, #0]
 8007be4:	f36f 1386 	bfc	r3, #6, #1
 8007be8:	703b      	strb	r3, [r7, #0]
 8007bea:	e003      	b.n	8007bf4 <ST25FTM_StateTxSegment+0x110>
    } else {
      /* smaller than data buffer */
      pkt.ctrl.b.pktLen = 1U;
 8007bec:	783b      	ldrb	r3, [r7, #0]
 8007bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf2:	703b      	strb	r3, [r7, #0]
    }
    if(gFtmState.tx.remainingData == 0U)
 8007bf4:	4b3a      	ldr	r3, [pc, #232]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10d      	bne.n	8007c18 <ST25FTM_StateTxSegment+0x134>
    {
      if(gFtmState.tx.pktIndex == 0U)
 8007bfc:	4b38      	ldr	r3, [pc, #224]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <ST25FTM_StateTxSegment+0x12a>
      {
        pkt.ctrl.b.position = (uint8_t)(ST25FTM_SINGLE_PACKET);
 8007c04:	783b      	ldrb	r3, [r7, #0]
 8007c06:	f36f 0383 	bfc	r3, #2, #2
 8007c0a:	703b      	strb	r3, [r7, #0]
 8007c0c:	e00d      	b.n	8007c2a <ST25FTM_StateTxSegment+0x146>
      } else {
        pkt.ctrl.b.position = (uint8_t)(ST25FTM_LAST_PACKET);
 8007c0e:	783b      	ldrb	r3, [r7, #0]
 8007c10:	f043 030c 	orr.w	r3, r3, #12
 8007c14:	703b      	strb	r3, [r7, #0]
 8007c16:	e008      	b.n	8007c2a <ST25FTM_StateTxSegment+0x146>
      }
    } else if (gFtmState.tx.pktIndex != 0U) {
 8007c18:	4b31      	ldr	r3, [pc, #196]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <ST25FTM_StateTxSegment+0x146>
      pkt.ctrl.b.position = (uint8_t)(ST25FTM_MIDDLE_PACKET);
 8007c20:	783b      	ldrb	r3, [r7, #0]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f362 0383 	bfi	r3, r2, #2, #2
 8007c28:	703b      	strb	r3, [r7, #0]
    } else {
      /* do nothing */
    }
    if(gFtmState.tx.sendAck == ST25FTM_SEND_WITHOUT_ACK)
 8007c2a:	4b2d      	ldr	r3, [pc, #180]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <ST25FTM_StateTxSegment+0x15a>
    {
      pkt.ctrl.b.ackCtrl = (uint8_t)(ST25FTM_NO_ACK_PACKET);
 8007c34:	783b      	ldrb	r3, [r7, #0]
 8007c36:	f36f 1305 	bfc	r3, #4, #2
 8007c3a:	703b      	strb	r3, [r7, #0]
 8007c3c:	e017      	b.n	8007c6e <ST25FTM_StateTxSegment+0x18a>
    } else {
      if(gFtmState.tx.sendAck == ST25FTM_SEND_WITH_ACK)
 8007c3e:	4b28      	ldr	r3, [pc, #160]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <ST25FTM_StateTxSegment+0x168>
      {
        pkt.has_crc = 1;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	753b      	strb	r3, [r7, #20]
      }
      if(gFtmState.tx.segmentLength <= ST25FTM_MAX_DATA_IN_SINGLE_PACKET())
 8007c4c:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c50:	4b23      	ldr	r3, [pc, #140]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d804      	bhi.n	8007c64 <ST25FTM_StateTxSegment+0x180>
      {
        pkt.ctrl.b.ackCtrl = (uint8_t)(ST25FTM_ACK_SINGLE_PKT);
 8007c5a:	783b      	ldrb	r3, [r7, #0]
 8007c5c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007c60:	703b      	strb	r3, [r7, #0]
 8007c62:	e004      	b.n	8007c6e <ST25FTM_StateTxSegment+0x18a>
      } else {
        pkt.ctrl.b.ackCtrl = (uint8_t)(ST25FTM_SEGMENT_END);
 8007c64:	783b      	ldrb	r3, [r7, #0]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f362 1305 	bfi	r3, r2, #4, #2
 8007c6c:	703b      	strb	r3, [r7, #0]
  

  ST25FTM_LOG("segmentPtr = %x\r\n",gFtmState.tx.segmentPtr);
  /* Note: segmentPtr will overflow when CRC is added for last segment packet
           not an issue since it will be reset for next segment */
  gFtmState.tx.segmentPtr += pkt.length;
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	4a1a      	ldr	r2, [pc, #104]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c78:	62d3      	str	r3, [r2, #44]	; 0x2c
  gFtmState.tx.segmentRemainingData -= pkt.length;
 8007c7a:	4b19      	ldr	r3, [pc, #100]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	4a17      	ldr	r2, [pc, #92]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c84:	6393      	str	r3, [r2, #56]	; 0x38
  gFtmState.tx.pktIndex++;
 8007c86:	4b16      	ldr	r3, [pc, #88]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	4a14      	ldr	r2, [pc, #80]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c8e:	6453      	str	r3, [r2, #68]	; 0x44
  gFtmState.tx.segmentIndex++;
 8007c90:	4b13      	ldr	r3, [pc, #76]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c94:	3301      	adds	r3, #1
 8007c96:	4a12      	ldr	r2, [pc, #72]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c98:	6493      	str	r3, [r2, #72]	; 0x48

  gFtmState.tx.packetLength = 0;
 8007c9a:	4b11      	ldr	r3, [pc, #68]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  (void)memset(gFtmState.tx.packetBuf,0,sizeof(gFtmState.tx.packetBuf));
 8007ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	480e      	ldr	r0, [pc, #56]	; (8007ce4 <ST25FTM_StateTxSegment+0x200>)
 8007caa:	f006 fc35 	bl	800e518 <memset>
  gFtmState.tx.packetLength = ST25FTM_Pack(&pkt,gFtmState.tx.packetBuf);
 8007cae:	463b      	mov	r3, r7
 8007cb0:	490c      	ldr	r1, [pc, #48]	; (8007ce4 <ST25FTM_StateTxSegment+0x200>)
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fd78 	bl	80077a8 <ST25FTM_Pack>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007cbc:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c

  ST25FTM_LOG("PktId %d\r\n",gFtmState.tx.pktIndex);
  ST25FTM_LOG("PktLen total=%d payload=%d\r\n",gFtmState.tx.packetLength,pkt.length);
  ST25FTM_LOG("Wr ");
  logHexBuf(gFtmState.tx.packetBuf,gFtmState.tx.packetLength);
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007cc2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4806      	ldr	r0, [pc, #24]	; (8007ce4 <ST25FTM_StateTxSegment+0x200>)
 8007cca:	f7fe fb27 	bl	800631c <logHexBuf>

  gFtmState.tx.state = ST25FTM_WRITE_PKT;
 8007cce:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <ST25FTM_StateTxSegment+0x1fc>)
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	731a      	strb	r2, [r3, #12]
  return ST25FTM_STATE_MACHINE_CONTINUE;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20002334 	.word	0x20002334
 8007ce4:	20002380 	.word	0x20002380

08007ce8 <ST25FTM_StateTxPacket>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateTxPacket(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_RELEASE;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	71fb      	strb	r3, [r7, #7]
  ST25FTM_MessageStatus_t status = ST25FTM_WriteMessage(gFtmState.tx.packetBuf,gFtmState.tx.packetLength);
 8007cf2:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007cf4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4816      	ldr	r0, [pc, #88]	; (8007d54 <ST25FTM_StateTxPacket+0x6c>)
 8007cfc:	f7fe fbb8 	bl	8006470 <ST25FTM_WriteMessage>
 8007d00:	4603      	mov	r3, r0
 8007d02:	71bb      	strb	r3, [r7, #6]
  if(status == ST25FTM_MSG_OK) {
 8007d04:	79bb      	ldrb	r3, [r7, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10b      	bne.n	8007d22 <ST25FTM_StateTxPacket+0x3a>
    gFtmState.totalDataLength += gFtmState.tx.packetLength;
 8007d0a:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d10:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8007d14:	4413      	add	r3, r2
 8007d16:	4a0e      	ldr	r2, [pc, #56]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d18:	6053      	str	r3, [r2, #4]
    gFtmState.tx.state = ST25FTM_WRITE_WAIT_READ;
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	731a      	strb	r2, [r3, #12]
 8007d20:	e010      	b.n	8007d44 <ST25FTM_StateTxPacket+0x5c>
  } else if (status == ST25FTM_MSG_BUSY) {
 8007d22:	79bb      	ldrb	r3, [r7, #6]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d10a      	bne.n	8007d3e <ST25FTM_StateTxPacket+0x56>
    /* If there is a message in the mailbox, the status is MAILBOX_BUSY
       this is not expected, a timeout may have occured
       it may be a new command or a NACK to request retransmit
       continue with reading the MB to know what to do */
    ST25FTM_LOG("Write error, mailbox busy\r\n");
    gFtmState.tx.nbError++;
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d30:	6213      	str	r3, [r2, #32]
    gFtmState.tx.state = ST25FTM_WRITE_WAIT_READ;
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d34:	2204      	movs	r2, #4
 8007d36:	731a      	strb	r2, [r3, #12]
    control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	71fb      	strb	r3, [r7, #7]
 8007d3c:	e002      	b.n	8007d44 <ST25FTM_StateTxPacket+0x5c>
  } else {
    /* If a RF operation is on-going, the I2C is NACKED
       retry later! */
    gFtmState.tx.state = ST25FTM_WRITE_PKT;
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <ST25FTM_StateTxPacket+0x68>)
 8007d40:	2203      	movs	r2, #3
 8007d42:	731a      	strb	r2, [r3, #12]
  }
  return control;
 8007d44:	79fb      	ldrb	r3, [r7, #7]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20002334 	.word	0x20002334
 8007d54:	20002380 	.word	0x20002380

08007d58 <ST25FTM_StateTxWaitRead>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateTxWaitRead(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_RELEASE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	71fb      	strb	r3, [r7, #7]
  ST25FTM_MessageOwner_t msgOwner = ST25FTM_GetMessageOwner();
 8007d62:	f7fe fc05 	bl	8006570 <ST25FTM_GetMessageOwner>
 8007d66:	4603      	mov	r3, r0
 8007d68:	71bb      	strb	r3, [r7, #6]
  ST25FTM_Ctrl_Byte_t ctrl_byte;
  ctrl_byte.byte = gFtmState.tx.packetBuf[0];
 8007d6a:	4b24      	ldr	r3, [pc, #144]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007d6c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007d70:	713b      	strb	r3, [r7, #4]
  if(ST25FTM_CTRL_HAS_CRC(ctrl_byte))
 8007d72:	793b      	ldrb	r3, [r7, #4]
 8007d74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b30      	cmp	r3, #48	; 0x30
 8007d7c:	d005      	beq.n	8007d8a <ST25FTM_StateTxWaitRead+0x32>
 8007d7e:	793b      	ldrb	r3, [r7, #4]
 8007d80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d109      	bne.n	8007d9e <ST25FTM_StateTxWaitRead+0x46>
  {
    if((msgOwner == ST25FTM_MESSAGE_EMPTY) || (msgOwner == ST25FTM_MESSAGE_PEER))
 8007d8a:	79bb      	ldrb	r3, [r7, #6]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <ST25FTM_StateTxWaitRead+0x3e>
 8007d90:	79bb      	ldrb	r3, [r7, #6]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d12c      	bne.n	8007df0 <ST25FTM_StateTxWaitRead+0x98>
    {
      gFtmState.tx.state = ST25FTM_WRITE_READ_ACK;
 8007d96:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007d98:	2205      	movs	r2, #5
 8007d9a:	731a      	strb	r2, [r3, #12]
    if((msgOwner == ST25FTM_MESSAGE_EMPTY) || (msgOwner == ST25FTM_MESSAGE_PEER))
 8007d9c:	e028      	b.n	8007df0 <ST25FTM_StateTxWaitRead+0x98>
    }
  } else {
    if(msgOwner == ST25FTM_MESSAGE_EMPTY)
 8007d9e:	79bb      	ldrb	r3, [r7, #6]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d117      	bne.n	8007dd4 <ST25FTM_StateTxWaitRead+0x7c>
    {
      if(gFtmState.tx.segmentRemainingData > 0U)
 8007da4:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <ST25FTM_StateTxWaitRead+0x60>
      {
        gFtmState.tx.state = ST25FTM_WRITE_SEGMENT;
 8007dac:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007dae:	2202      	movs	r2, #2
 8007db0:	731a      	strb	r2, [r3, #12]
        control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007db2:	2300      	movs	r3, #0
 8007db4:	71fb      	strb	r3, [r7, #7]
 8007db6:	e01c      	b.n	8007df2 <ST25FTM_StateTxWaitRead+0x9a>
      } else if (gFtmState.tx.remainingData > 0U) {
 8007db8:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <ST25FTM_StateTxWaitRead+0x74>
        gFtmState.tx.state = ST25FTM_WRITE_CMD;
 8007dc0:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	731a      	strb	r2, [r3, #12]
        control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	71fb      	strb	r3, [r7, #7]
 8007dca:	e012      	b.n	8007df2 <ST25FTM_StateTxWaitRead+0x9a>
      } else {
        gFtmState.tx.state = ST25FTM_WRITE_DONE;
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007dce:	2206      	movs	r2, #6
 8007dd0:	731a      	strb	r2, [r3, #12]
 8007dd2:	e00e      	b.n	8007df2 <ST25FTM_StateTxWaitRead+0x9a>
      }
    } else if (msgOwner == ST25FTM_MESSAGE_PEER) {
 8007dd4:	79bb      	ldrb	r3, [r7, #6]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d10b      	bne.n	8007df2 <ST25FTM_StateTxWaitRead+0x9a>
      /* this is not expected
         continue with reading the MB to know what to do
         it may be a new command or a NACK to request retransmit */
      gFtmState.tx.nbError++;
 8007dda:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	3301      	adds	r3, #1
 8007de0:	4a06      	ldr	r2, [pc, #24]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007de2:	6213      	str	r3, [r2, #32]
      gFtmState.tx.state = ST25FTM_WRITE_READ_ACK;
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <ST25FTM_StateTxWaitRead+0xa4>)
 8007de6:	2205      	movs	r2, #5
 8007de8:	731a      	strb	r2, [r3, #12]
      ST25FTM_LOG("Write error, mailbox busy 2\r\n");
      control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	71fb      	strb	r3, [r7, #7]
 8007dee:	e000      	b.n	8007df2 <ST25FTM_StateTxWaitRead+0x9a>
    if((msgOwner == ST25FTM_MESSAGE_EMPTY) || (msgOwner == ST25FTM_MESSAGE_PEER))
 8007df0:	bf00      	nop
    } else {
      /* this is still our message, do nothing */
    }
  }
  return control;
 8007df2:	79fb      	ldrb	r3, [r7, #7]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20002334 	.word	0x20002334

08007e00 <ST25FTM_StateTxReadAck>:

static ST25FTM_StateMachineCtrl_t ST25FTM_StateTxReadAck(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_RELEASE;
 8007e06:	2301      	movs	r3, #1
 8007e08:	71fb      	strb	r3, [r7, #7]
  ST25FTM_Acknowledge_Status_t ack_status;
  
  ack_status = ST25FTM_GetAcknowledgeStatus();
 8007e0a:	f7fe fa92 	bl	8006332 <ST25FTM_GetAcknowledgeStatus>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71bb      	strb	r3, [r7, #6]

  ST25FTM_LOG("Rx Ack=%d\r\n",ack_status);
  if(ack_status == ST25FTM_SEGMENT_OK)
 8007e12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d11b      	bne.n	8007e52 <ST25FTM_StateTxReadAck+0x52>
  {
    ST25FTM_LOG("Ending Segment %d\r\n", gFtmState.tx.segmentNumber);
    gFtmState.tx.retransmit = 0U;
 8007e1a:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gFtmState.tx.segmentIndex = 0U;
 8007e22:	4b19      	ldr	r3, [pc, #100]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	649a      	str	r2, [r3, #72]	; 0x48
    gFtmState.tx.segmentNumber++;
 8007e28:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e2a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8007e2e:	3301      	adds	r3, #1
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e32:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
    if(gFtmState.tx.remainingData == 0U)
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d103      	bne.n	8007e46 <ST25FTM_StateTxReadAck+0x46>
    {
      gFtmState.tx.state = ST25FTM_WRITE_DONE;
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e40:	2206      	movs	r2, #6
 8007e42:	731a      	strb	r2, [r3, #12]
 8007e44:	e01a      	b.n	8007e7c <ST25FTM_StateTxReadAck+0x7c>
    } else { 
      /* there are other packets to send */
      gFtmState.tx.state = ST25FTM_WRITE_CMD;
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e48:	2201      	movs	r2, #1
 8007e4a:	731a      	strb	r2, [r3, #12]
      control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	71fb      	strb	r3, [r7, #7]
 8007e50:	e014      	b.n	8007e7c <ST25FTM_StateTxReadAck+0x7c>
    }
  } else if (ack_status == ST25FTM_ACK_BUSY) { 
 8007e52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5a:	d103      	bne.n	8007e64 <ST25FTM_StateTxReadAck+0x64>
    /* do nothing */
    gFtmState.tx.state = ST25FTM_WRITE_READ_ACK;
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e5e:	2205      	movs	r2, #5
 8007e60:	731a      	strb	r2, [r3, #12]
 8007e62:	e00b      	b.n	8007e7c <ST25FTM_StateTxReadAck+0x7c>
  } else if (ack_status == ST25FTM_CRC_ERROR) {
 8007e64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d104      	bne.n	8007e76 <ST25FTM_StateTxReadAck+0x76>
    ST25FTM_TxResetSegment();
 8007e6c:	f000 f856 	bl	8007f1c <ST25FTM_TxResetSegment>
    control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	71fb      	strb	r3, [r7, #7]
 8007e74:	e002      	b.n	8007e7c <ST25FTM_StateTxReadAck+0x7c>
  } else {
    /* this is not a ACK message, it must be a new command */
    gFtmState.tx.state = ST25FTM_WRITE_ERROR;
 8007e76:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <ST25FTM_StateTxReadAck+0x88>)
 8007e78:	2207      	movs	r2, #7
 8007e7a:	731a      	strb	r2, [r3, #12]
    ST25FTM_LOG("Write error, mailbox busy 3\r\n");
  }
  return control;
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20002334 	.word	0x20002334

08007e8c <ST25FTM_Transmit>:

void ST25FTM_Transmit(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
  ST25FTM_StateMachineCtrl_t control = ST25FTM_STATE_MACHINE_CONTINUE;
 8007e92:	2300      	movs	r3, #0
 8007e94:	71fb      	strb	r3, [r7, #7]
  while(control == ST25FTM_STATE_MACHINE_CONTINUE)
 8007e96:	e036      	b.n	8007f06 <ST25FTM_Transmit+0x7a>
  {
    switch (gFtmState.tx.state)
 8007e98:	4b1f      	ldr	r3, [pc, #124]	; (8007f18 <ST25FTM_Transmit+0x8c>)
 8007e9a:	7b1b      	ldrb	r3, [r3, #12]
 8007e9c:	2b05      	cmp	r3, #5
 8007e9e:	d82d      	bhi.n	8007efc <ST25FTM_Transmit+0x70>
 8007ea0:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <ST25FTM_Transmit+0x1c>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007ec1 	.word	0x08007ec1
 8007eac:	08007ecb 	.word	0x08007ecb
 8007eb0:	08007ed5 	.word	0x08007ed5
 8007eb4:	08007edf 	.word	0x08007edf
 8007eb8:	08007ee9 	.word	0x08007ee9
 8007ebc:	08007ef3 	.word	0x08007ef3
    {
    case ST25FTM_WRITE_IDLE:
      control = ST25FTM_StateTxIdle();
 8007ec0:	f7ff fd94 	bl	80079ec <ST25FTM_StateTxIdle>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	71fb      	strb	r3, [r7, #7]
    break;
 8007ec8:	e01d      	b.n	8007f06 <ST25FTM_Transmit+0x7a>
    case ST25FTM_WRITE_CMD:
      control = ST25FTM_StateTxCommand();
 8007eca:	f7ff fdbd 	bl	8007a48 <ST25FTM_StateTxCommand>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	71fb      	strb	r3, [r7, #7]
    break;
 8007ed2:	e018      	b.n	8007f06 <ST25FTM_Transmit+0x7a>
    case ST25FTM_WRITE_SEGMENT:
      control = ST25FTM_StateTxSegment();
 8007ed4:	f7ff fe06 	bl	8007ae4 <ST25FTM_StateTxSegment>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	71fb      	strb	r3, [r7, #7]
    break;
 8007edc:	e013      	b.n	8007f06 <ST25FTM_Transmit+0x7a>
    case ST25FTM_WRITE_PKT:
      control = ST25FTM_StateTxPacket();
 8007ede:	f7ff ff03 	bl	8007ce8 <ST25FTM_StateTxPacket>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	71fb      	strb	r3, [r7, #7]
    break;
 8007ee6:	e00e      	b.n	8007f06 <ST25FTM_Transmit+0x7a>
    case ST25FTM_WRITE_WAIT_READ:
      control = ST25FTM_StateTxWaitRead();
 8007ee8:	f7ff ff36 	bl	8007d58 <ST25FTM_StateTxWaitRead>
 8007eec:	4603      	mov	r3, r0
 8007eee:	71fb      	strb	r3, [r7, #7]
    break;
 8007ef0:	e009      	b.n	8007f06 <ST25FTM_Transmit+0x7a>
    case ST25FTM_WRITE_READ_ACK:
      control = ST25FTM_StateTxReadAck();
 8007ef2:	f7ff ff85 	bl	8007e00 <ST25FTM_StateTxReadAck>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
    break;
 8007efa:	e004      	b.n	8007f06 <ST25FTM_Transmit+0x7a>
    default:
      ST25FTM_Reset();
 8007efc:	f7fe feec 	bl	8006cd8 <ST25FTM_Reset>
      control = ST25FTM_STATE_MACHINE_RELEASE;
 8007f00:	2301      	movs	r3, #1
 8007f02:	71fb      	strb	r3, [r7, #7]
    break;
 8007f04:	bf00      	nop
  while(control == ST25FTM_STATE_MACHINE_CONTINUE)
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0c5      	beq.n	8007e98 <ST25FTM_Transmit+0xc>
    }
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20002334 	.word	0x20002334

08007f1c <ST25FTM_TxResetSegment>:

void ST25FTM_TxResetSegment()
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
  gFtmState.retryLength += gFtmState.tx.segmentLength - gFtmState.tx.segmentRemainingData;
 8007f20:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f28:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	1acb      	subs	r3, r1, r3
 8007f2e:	4413      	add	r3, r2
 8007f30:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f32:	6093      	str	r3, [r2, #8]
  /* rewind to retransmit */
  gFtmState.tx.segmentRemainingData = gFtmState.tx.segmentLength;
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f38:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f3a:	6393      	str	r3, [r2, #56]	; 0x38
  gFtmState.tx.pktIndex -= gFtmState.tx.segmentIndex;
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	4a0a      	ldr	r2, [pc, #40]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f48:	6453      	str	r3, [r2, #68]	; 0x44
  gFtmState.tx.segmentPtr = gFtmState.tx.segmentStart;
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	4a08      	ldr	r2, [pc, #32]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f50:	62d3      	str	r3, [r2, #44]	; 0x2c
  gFtmState.tx.retransmit = 1;
 8007f52:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  gFtmState.tx.segmentIndex = 0;
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	649a      	str	r2, [r3, #72]	; 0x48
  gFtmState.tx.state = ST25FTM_WRITE_SEGMENT;
 8007f60:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <ST25FTM_TxResetSegment+0x54>)
 8007f62:	2202      	movs	r2, #2
 8007f64:	731a      	strb	r2, [r3, #12]
}
 8007f66:	bf00      	nop
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	20002334 	.word	0x20002334

08007f74 <add_uint32>:
@param[in]  op2  32-bit Operand 2
@param[out] res  Pointer to 64-bit result of op1 + op2 (w/o the carry)
@retuns          The carry bit
*/
static inline uint8_t add_uint32(uint32_t op1, uint32_t op2, uint32_t *res)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
    *res = op1 + op2;
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
    return (uint8_t)(*res < op1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	bf8c      	ite	hi
 8007f94:	2301      	movhi	r3, #1
 8007f96:	2300      	movls	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <mul_uint32_wide>:
@param[in]  op1  32-bit Operand 1
@param[in]  op2  32-bit Operand 2
@param[out] res  Pointer to full 64-bit result of op1 * op2
*/
static inline void mul_uint32_wide(uint32_t op1, uint32_t op2, uint32_t *res)
{
 8007fa6:	b4b0      	push	{r4, r5, r7}
 8007fa8:	b087      	sub	sp, #28
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
#ifdef SE_USE_ASM_ARITH
    __asm("UMULL %0, %1, %2, %3" : "=r"(res[0]), "=r"(res[1]) : "r"(op1), "r"(op2));
#else
    uint64_t res_temp = (uint64_t)op1 * (uint64_t)op2;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f04f 0100 	mov.w	r1, #0
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	fb02 f501 	mul.w	r5, r2, r1
 8007fc6:	fb00 f403 	mul.w	r4, r0, r3
 8007fca:	442c      	add	r4, r5
 8007fcc:	fba0 2302 	umull	r2, r3, r0, r2
 8007fd0:	18e1      	adds	r1, r4, r3
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8007fd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    res[0]            = (uint32_t)(res_temp & 0xFFFFFFFF);
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
    res[1]            = (uint32_t)((res_temp >> 32) & 0xFFFFFFFF);
 8007fe2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	000a      	movs	r2, r1
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	3104      	adds	r1, #4
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	600b      	str	r3, [r1, #0]
#endif
}
 8007ffa:	bf00      	nop
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bcb0      	pop	{r4, r5, r7}
 8008002:	4770      	bx	lr

08008004 <mul_uint32_high>:
@param[in]  op1  Operand 1
@param[in]  op2  Operand 2
@returns         Upper 32 bits of the 64-bit result of op1 * op2
*/
static inline uint32_t mul_uint32_high(uint32_t op1, uint32_t op2)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
    uint32_t res[2];
    mul_uint32_wide(op1, op2, res);
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	461a      	mov	r2, r3
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff ffc5 	bl	8007fa6 <mul_uint32_wide>
    return res[1];
 800801c:	68fb      	ldr	r3, [r7, #12]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <add_uint_nocarry>:
@param[in]  op1  A pointer to a ZZ-type value
@param[in]  op2  A pointer to another ZZ-type value
@param[out] res  Pointer to sizeof(ZZ)-sized result op1 + op2 (w/o the carry)
*/
static inline void add_uint_nocarry(ZZ op1, ZZ op2, ZZ *res)
{
 8008026:	b480      	push	{r7}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	60b9      	str	r1, [r7, #8]
 8008030:	607a      	str	r2, [r7, #4]
    *res = op1 + op2;
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	441a      	add	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <mul_uint_wide>:
@param[in]  op1  A type-ZZ value
@param[in]  op2  Another type-ZZ value
@param[out] res  Pointer to full (2*sizeof(ZZ))-sized result of op1 * op2
*/
static inline void mul_uint_wide(ZZ op1, ZZ op2, ZZ *res)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
    return mul_uint32_wide(op1, op2, res);
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7ff ffa4 	bl	8007fa6 <mul_uint32_wide>
}
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <shift_result>:
@param[in] input  Input in [0, 2q)
@param[in] q      Modulus value
@returns          Result in [0, q)
*/
static inline ZZ shift_result(ZZ input, ZZ q)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
    // -- If input is in [0, 2q) instead of [0, q), is_2q = 1 (case 1)
    //    Otherwise, is_2q = 0 (case 2)
    ZZsign is_2q = (ZZsign)(input >= q);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	bf2c      	ite	cs
 8008076:	2301      	movcs	r3, #1
 8008078:	2300      	movcc	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	60fb      	str	r3, [r7, #12]

    // -- If case 1, mask = all 1s; if case 2, mask = all 0s;
    ZZ mask = (ZZ)(-is_2q);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	425b      	negs	r3, r3
 8008082:	60bb      	str	r3, [r7, #8]

    // -- Use mask to subtract q if necessary
    return (ZZ)(input) - (q & mask);
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4013      	ands	r3, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	1ad3      	subs	r3, r2, r3
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <barrett_reduce_64input_32modulus>:
@param[in] modulus  Modulus object with 32-bit value
@returns            32-bit result of input mod q
*/
static inline uint32_t barrett_reduce_64input_32modulus(const uint32_t *input,
                                                        const Modulus *modulus)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b090      	sub	sp, #64	; 0x40
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
    const uint32_t *const_ratio = modulus->const_ratio;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	3304      	adds	r3, #4
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    //    to only calculate the highest word of the 192-bit result since
    //    it is equivalent to the reduced result.
    //    (hw = high_word, lw = low_word)

    // -- Round 1
    uint32_t right_hw = mul_uint32_high(input[0], const_ratio[0]);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f7ff ffa5 	bl	8008004 <mul_uint32_high>
 80080ba:	63b8      	str	r0, [r7, #56]	; 0x38

    uint32_t middle_temp[2];
    mul_uint32_wide(input[0], const_ratio[1], middle_temp);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c2:	3304      	adds	r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f107 021c 	add.w	r2, r7, #28
 80080ca:	4619      	mov	r1, r3
 80080cc:	f7ff ff6b 	bl	8007fa6 <mul_uint32_wide>
    uint32_t middle_lw;
    uint32_t middle_lw_carry = add_uint32(right_hw, middle_temp[0], &middle_lw);
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f107 0218 	add.w	r2, r7, #24
 80080d6:	4619      	mov	r1, r3
 80080d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080da:	f7ff ff4b 	bl	8007f74 <add_uint32>
 80080de:	4603      	mov	r3, r0
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t middle_hw       = middle_temp[1] + middle_lw_carry;
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080e6:	4413      	add	r3, r2
 80080e8:	633b      	str	r3, [r7, #48]	; 0x30

    // -- Round 2
    uint32_t middle2_temp[2];
    mul_uint32_wide(input[1], const_ratio[0], middle2_temp);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f107 0210 	add.w	r2, r7, #16
 80080f8:	4619      	mov	r1, r3
 80080fa:	f7ff ff54 	bl	8007fa6 <mul_uint32_wide>
    uint32_t middle2_lw;
    uint32_t middle2_lw_carry = add_uint32(middle_lw, middle2_temp[0], &middle2_lw);
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6939      	ldr	r1, [r7, #16]
 8008102:	f107 020c 	add.w	r2, r7, #12
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff ff34 	bl	8007f74 <add_uint32>
 800810c:	4603      	mov	r3, r0
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t middle2_hw       = middle2_temp[1] + middle2_lw_carry;  // We don't need the carry
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008114:	4413      	add	r3, r2
 8008116:	62bb      	str	r3, [r7, #40]	; 0x28

    uint32_t tmp = input[1] * const_ratio[1] + middle_hw + middle2_hw;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3304      	adds	r3, #4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008120:	3204      	adds	r2, #4
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	fb02 f203 	mul.w	r2, r2, r3
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	4413      	add	r3, r2
 800812c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800812e:	4413      	add	r3, r2
 8008130:	627b      	str	r3, [r7, #36]	; 0x24

    // -- Barrett subtraction
    tmp = input[0] - tmp * modulus->value;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	627b      	str	r3, [r7, #36]	; 0x24
    return shift_result(tmp, modulus->value);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4619      	mov	r1, r3
 800814a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800814c:	f7ff ff8a 	bl	8008064 <shift_result>
 8008150:	4603      	mov	r3, r0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3740      	adds	r7, #64	; 0x40
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <barrett_reduce_wide>:
@param[in] input    (2*B)-bit input to reduce
@param[in] modulus  Modulus object with B-bit value q
@returns            B-bit result of input mod q
*/
static inline ZZ barrett_reduce_wide(const ZZ *input, const Modulus *modulus)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
    return barrett_reduce_64input_32modulus(input, modulus);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff ff97 	bl	800809a <barrett_reduce_64input_32modulus>
 800816c:	4603      	mov	r3, r0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <add_mod>:
@param[in] op2  Operand 2
@param[in] q    Modulus. Must be < 2^32 (if ZZ == uint32)
@returns        (op1 + op2) mod q
*/
static inline ZZ add_mod(ZZ op1, ZZ op2, const Modulus *q)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
    ZZ q_val = q->value;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	617b      	str	r3, [r7, #20]
    //                     = 2*(2^32 - 1) - 1
    //                     = 2^33 - 3
    //                     < max(uint32_t)

    ZZ sum;
    add_uint_nocarry(op1, op2, &sum);  // We don't need the carry
 8008188:	f107 0310 	add.w	r3, r7, #16
 800818c:	461a      	mov	r2, r3
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff ff48 	bl	8008026 <add_uint_nocarry>
    return shift_result(sum, q_val);
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6979      	ldr	r1, [r7, #20]
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff ff62 	bl	8008064 <shift_result>
 80081a0:	4603      	mov	r3, r0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <add_mod_inpl>:
@param[in,out] op1  In: Operand 1; Out: (op1 + op2) mod q
@param[in]     op2  Operand 2
@param[in]     q    Modulus. Must be < 2^32 (if ZZ == uint32)
*/
static inline void add_mod_inpl(ZZ *op1, ZZ op2, const Modulus *q)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
    se_assert(op1 && ((op1[0] + op2) <= (2 * q->value - 1)));
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <add_mod_inpl+0x26>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	441a      	add	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	3b01      	subs	r3, #1
 80081cc:	429a      	cmp	r2, r3
 80081ce:	bf00      	nop
    op1[0] = add_mod(op1[0], op2, q);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff ffcc 	bl	8008176 <add_mod>
 80081de:	4602      	mov	r2, r0
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <mul_mod>:
@param[in] op2  Operand 2
@param[in] q    Modulus
@returns        (op1 * op2) mod q
*/
static inline ZZ mul_mod(ZZ op1, ZZ op2, const Modulus *q)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
    ZZ product[2];
    mul_uint_wide(op1, op2, product);
 80081f8:	f107 0310 	add.w	r3, r7, #16
 80081fc:	461a      	mov	r2, r3
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff ff21 	bl	8008048 <mul_uint_wide>
    return barrett_reduce_wide(product, q);
 8008206:	f107 0310 	add.w	r3, r7, #16
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	f7ff ffa4 	bl	800815a <barrett_reduce_wide>
 8008212:	4603      	mov	r3, r0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <poly_add_mod_inpl>:
@param[in]  p2   Input polynomial 2
@param[in]  n    Number of elements (ZZ coefficients) in p1 and p2
@param[in]  mod  Modulus
*/
static inline void poly_add_mod_inpl(ZZ *p1, const ZZ *p2, PolySizeType n, const Modulus *mod)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	603b      	str	r3, [r7, #0]
    for (PolySizeType i = 0; i < n; i++) { add_mod_inpl(&(p1[i]), p2[i], mod); }
 800822a:	2300      	movs	r3, #0
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	e00f      	b.n	8008250 <poly_add_mod_inpl+0x34>
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	18d0      	adds	r0, r2, r3
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	4413      	add	r3, r2
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	4619      	mov	r1, r3
 8008246:	f7ff ffb0 	bl	80081aa <add_mod_inpl>
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	3301      	adds	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	429a      	cmp	r2, r3
 8008256:	d3eb      	bcc.n	8008230 <poly_add_mod_inpl+0x14>
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <poly_pointwise_mul_mod>:
@param[in]  mod  Modulus
@param[out] res  Result polynomial.
*/
static inline void poly_pointwise_mul_mod(const ZZ *p1, const ZZ *p2, PolySizeType n,
                                          const Modulus *mod, ZZ *res)
{
 8008262:	b590      	push	{r4, r7, lr}
 8008264:	b087      	sub	sp, #28
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
 800826e:	603b      	str	r3, [r7, #0]
    for (PolySizeType i = 0; i < n; i++) { res[i] = mul_mod(p1[i], p2[i], mod); }
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e015      	b.n	80082a2 <poly_pointwise_mul_mod+0x40>
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	4413      	add	r3, r2
 8008288:	6819      	ldr	r1, [r3, #0]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008290:	18d4      	adds	r4, r2, r3
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	f7ff ffaa 	bl	80081ec <mul_mod>
 8008298:	4603      	mov	r3, r0
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	3301      	adds	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d3e5      	bcc.n	8008276 <poly_pointwise_mul_mod+0x14>
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}

080082b4 <poly_pointwise_mul_mod_inpl>:
@param[in]  n    Number of elements (ZZ coefficients) in p1
@param[in]  mod  Modulus
*/
static inline void poly_pointwise_mul_mod_inpl(ZZ *p1, const ZZ *p2, PolySizeType n,
                                               const Modulus *mod)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af02      	add	r7, sp, #8
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
    poly_pointwise_mul_mod(p1, p2, n, mod, p1);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff ffc8 	bl	8008262 <poly_pointwise_mul_mod>
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <poly_mult_mod_ntt_form_inpl>:
@param[in]     b    Input polynomial 2, in NTT form, with n ZZ coefficients.
@param[in]     n    Number of coefficients in a and b
@param[in]     mod  Modulus
*/
static inline void poly_mult_mod_ntt_form_inpl(ZZ *a, const ZZ *b, size_t n, const Modulus *mod)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	603b      	str	r3, [r7, #0]
    // -- Values in NTT form can be multiplied component-wise
    poly_pointwise_mul_mod_inpl(a, b, n, mod);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7ff ffe0 	bl	80082b4 <poly_pointwise_mul_mod_inpl>
}
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <ckks_get_mempool_size_asym>:
#include "uintmodarith.h"
#include "util_print.h"

#ifdef SE_USE_MALLOC
size_t ckks_get_mempool_size_asym(size_t degree)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
    se_assert(degree >= 16);
    if (degree == SE_DEGREE_N) return MEMPOOL_SIZE_Asym;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830a:	d102      	bne.n	8008312 <ckks_get_mempool_size_asym+0x16>
 800830c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008310:	e00a      	b.n	8008328 <ckks_get_mempool_size_asym+0x2c>
    size_t n            = degree;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]
    size_t mempool_size = 4 * n;  // base
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	60bb      	str	r3, [r7, #8]
    mempool_size += n;
#elif defined(SE_NTT_FAST)
    mempool_size += 2 * n;
#endif
#else
    mempool_size += 4 * n;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4413      	add	r3, r2
 8008324:	60bb      	str	r3, [r7, #8]
#ifdef SE_MEMPOOL_ALLOC_VALUES
    mempool_size += n / 2;
#endif

    se_assert(mempool_size);
    return mempool_size;
 8008326:	68bb      	ldr	r3, [r7, #8]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <ckks_mempool_setup_asym>:

ZZ *ckks_mempool_setup_asym(size_t degree)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
    size_t mempool_size = ckks_get_mempool_size_asym(degree);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff ffdd 	bl	80082fc <ckks_get_mempool_size_asym>
 8008342:	60f8      	str	r0, [r7, #12]
    ZZ *mempool         = calloc(mempool_size, sizeof(ZZ));
 8008344:	2104      	movs	r1, #4
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f006 f892 	bl	800e470 <calloc>
 800834c:	4603      	mov	r3, r0
 800834e:	60bb      	str	r3, [r7, #8]
    // printf("mempool_size: %zu\n", mempool_size);
    if (!mempool)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d105      	bne.n	8008362 <ckks_mempool_setup_asym+0x2e>
    {
        printf("Error! Allocation failed. Exiting...\n");
 8008356:	4808      	ldr	r0, [pc, #32]	; (8008378 <ckks_mempool_setup_asym+0x44>)
 8008358:	f006 fa3c 	bl	800e7d4 <puts>
        exit(1);
 800835c:	2001      	movs	r0, #1
 800835e:	f006 f895 	bl	800e48c <exit>
    }
    se_assert(mempool_size && mempool);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <ckks_mempool_setup_asym+0x3a>
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf00      	nop
    return mempool;
 800836e:	68bb      	ldr	r3, [r7, #8]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	0800faec 	.word	0x0800faec

0800837c <ckks_set_ptrs_asym>:
#endif

void ckks_set_ptrs_asym(size_t degree, ZZ *mempool, SE_PTRS *se_ptrs)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	; 0x28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
    se_assert(mempool && se_ptrs);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <ckks_set_ptrs_asym+0x18>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	bf00      	nop
    size_t n = degree;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	627b      	str	r3, [r7, #36]	; 0x24

    // -- First, set everything to the set size or 0
    se_ptrs->conj_vals         = (double complex *)mempool;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	601a      	str	r2, [r3, #0]
    se_ptrs->conj_vals_int_ptr = (int64_t *)mempool;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	611a      	str	r2, [r3, #16]
    se_ptrs->c1_ptr            = &(mempool[2 * n]);
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	441a      	add	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	619a      	str	r2, [r3, #24]
    se_ptrs->c0_ptr            = &(mempool[3 * n]);
 80083b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b2:	4613      	mov	r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	461a      	mov	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	441a      	add	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	615a      	str	r2, [r3, #20]

    // -- In asymmetric mode, ntt_pte_ptr == ntt_u2pte_ptr
    se_ptrs->ternary       = &(mempool[5 * n + n / 4]);  // default: SE_INDEX_MAP_OTF
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	441a      	add	r2, r3
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	089b      	lsrs	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	441a      	add	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60da      	str	r2, [r3, #12]
    se_ptrs->ifft_roots    = 0;                          // default: SE_IFFT_OTF
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	605a      	str	r2, [r3, #4]
    se_ptrs->index_map_ptr = 0;                          // default: SE_INDEX_MAP_OTF
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	61da      	str	r2, [r3, #28]
    se_ptrs->ntt_roots_ptr = 0;                          // default: SE_NTT_OTF
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	621a      	str	r2, [r3, #32]
    se_ptrs->values        = 0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	609a      	str	r2, [r3, #8]

    // -- Sizes
    size_t ifft_roots_size        = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	623b      	str	r3, [r7, #32]
    size_t ntt_roots_size         = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]
    size_t index_map_persist_size = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61bb      	str	r3, [r7, #24]

    // -- Set ifft_roots based on IFFT type
#ifndef SE_IFFT_OTF
    ifft_roots_size     = 4 * n;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	623b      	str	r3, [r7, #32]
    se_ptrs->ifft_roots = (double complex *)&(mempool[4 * n]);
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	441a      	add	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	605a      	str	r2, [r3, #4]
#endif

    // -- Set ntt_roots based on NTT type
#if defined(SE_NTT_ONE_SHOT) || defined(SE_NTT_REG)
    ntt_roots_size         = n;
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	61fb      	str	r3, [r7, #28]
    se_ptrs->ntt_roots_ptr = &(mempool[4 * n]);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	441a      	add	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	621a      	str	r2, [r3, #32]
#elif defined(SE_NTT_FAST)
    ntt_roots_size         = 2 * n;
    se_ptrs->ntt_roots_ptr = &(mempool[4 * n]);
#endif

    size_t total_block2_size = ifft_roots_size ? ifft_roots_size : (ntt_roots_size + n);
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <ckks_set_ptrs_asym+0xb4>
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	4413      	add	r3, r2
 800842e:	e000      	b.n	8008432 <ckks_set_ptrs_asym+0xb6>
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	617b      	str	r3, [r7, #20]

    // -- Set pi inverse based on index map type
#if defined(SE_INDEX_MAP_LOAD) || defined(SE_INDEX_MAP_LOAD_PERSIST_SYM_LOAD_ASYM)
    se_ptrs->index_map_ptr = (uint16_t *)&(mempool[4 * n]);
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	011b      	lsls	r3, r3, #4
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	441a      	add	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	61da      	str	r2, [r3, #28]
    // -- If ifft, this will be + the ifft_roots size
    //    else, this will be + the ntt size, + ntt(e1) size
    se_ptrs->index_map_ptr = (uint16_t *)&(mempool[4 * n + total_block2_size]);
    index_map_persist_size = n / 2;
#endif
    se_ptrs->ntt_pte_ptr = &(mempool[4 * n + ntt_roots_size]);
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	009a      	lsls	r2, r3, #2
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	441a      	add	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef SE_IFFT_OTF
    se_ptrs->e1_ptr  = (int8_t *)&(mempool[4 * n + ntt_roots_size + n + index_map_persist_size]);
    se_ptrs->ternary = &(mempool[4 * n + ntt_roots_size + n + index_map_persist_size + n / 4]);
#else
    se_ptrs->e1_ptr        = (int8_t *)&(mempool[4 * n + ntt_roots_size + n]);
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	009a      	lsls	r2, r3, #2
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	441a      	add	r2, r3
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	441a      	add	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	629a      	str	r2, [r3, #40]	; 0x28
    se_ptrs->ternary       = &(mempool[4 * n + ntt_roots_size + n + n / 4]);
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	009a      	lsls	r2, r3, #2
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	441a      	add	r2, r3
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	441a      	add	r2, r3
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	089b      	lsrs	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	441a      	add	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60da      	str	r2, [r3, #12]
#else
    se_ptrs->values = (flpt *)&(mempool[4 * n + total_block2_size + index_map_persist_size]);
#endif
#endif

    size_t address_size = 4;
 8008484:	2304      	movs	r3, #4
 8008486:	613b      	str	r3, [r7, #16]
              (ZZ *)se_ptrs->conj_vals_int_ptr + 2 * n * sizeof(ZZ) / address_size);
    se_assert(se_ptrs->c0_ptr == se_ptrs->c1_ptr + n * sizeof(ZZ) / address_size);

    // -- Debugging: print all adresses
#ifdef SE_USE_MALLOC
    se_print_addresses(mempool, se_ptrs, n, 0);
 8008488:	2300      	movs	r3, #0
 800848a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	68b8      	ldr	r0, [r7, #8]
 8008490:	f000 fce8 	bl	8008e64 <se_print_addresses>
    se_print_relative_positions(mempool, se_ptrs, n, 0);
 8008494:	2300      	movs	r3, #0
 8008496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	68b8      	ldr	r0, [r7, #8]
 800849c:	f000 fbaa 	bl	8008bf4 <se_print_relative_positions>
#else
    se_print_addresses(mempool, se_ptrs);
    se_print_relative_positions(mempool, se_ptrs);
#endif
}
 80084a0:	bf00      	nop
 80084a2:	3728      	adds	r7, #40	; 0x28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <ckks_asym_init>:
                            pk_c1, s_save, 0);
}

void ckks_asym_init(const Parms *parms, uint8_t *seed, SE_PRNG *prng, int64_t *conj_vals_int, ZZ *u,
                    int8_t *e1)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
    se_assert(parms && prng);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <ckks_asym_init+0x1a>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bf00      	nop
    size_t n = parms->coeff_count;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	617b      	str	r3, [r7, #20]
    // -- The prng should be reset & re-randomized once per encode-encrypt sequence.
    // -- (This is not strictly necessary, but it is more consistent.)
    // -- This call both resets the prng counter to 0 and the sets seed to a random value.
    // -- Note that this prng's seed value should not be shared.
    // printf("About to randomize reset\n");
    prng_randomize_reset(prng, seed);
 80084c8:	68b9      	ldr	r1, [r7, #8]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f005 f9ae 	bl	800d82c <prng_randomize_reset>

    // -- Sample ternary polynomial u
    // printf("About to sample small poly ternary\n");
    if (parms->small_u) { sample_small_poly_ternary_prng_96(n, prng, u); }
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d005      	beq.n	80084e6 <ckks_asym_init+0x3e>
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	6978      	ldr	r0, [r7, #20]
 80084e0:	f005 fc81 	bl	800dde6 <sample_small_poly_ternary_prng_96>
 80084e4:	e004      	b.n	80084f0 <ckks_asym_init+0x48>
    else
    {
        sample_poly_ternary(parms, prng, u);
 80084e6:	6a3a      	ldr	r2, [r7, #32]
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f005 fc2c 	bl	800dd48 <sample_poly_ternary>

    // -- Sample error polynomials e0 and e1
#ifdef SE_DEBUG_NO_ERRORS
    memset(e1, 0, n * sizeof(int8_t));
#else
    sample_add_poly_cbd_generic_inpl_prng_16(conj_vals_int, n, prng);  // now stores [pt+e0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6979      	ldr	r1, [r7, #20]
 80084f4:	6838      	ldr	r0, [r7, #0]
 80084f6:	f005 fd97 	bl	800e028 <sample_add_poly_cbd_generic_inpl_prng_16>
    sample_poly_cbd_generic_prng_16(n, prng, e1);                      // now stores [e1]
 80084fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	6978      	ldr	r0, [r7, #20]
 8008500:	f005 fd5a 	bl	800dfb8 <sample_poly_cbd_generic_prng_16>
#endif
}
 8008504:	bf00      	nop
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <ckks_encode_encrypt_asym>:

void ckks_encode_encrypt_asym(const Parms *parms, const int64_t *conj_vals_int, const ZZ *u,
                              const int8_t *e1, ZZ *ntt_roots, ZZ *ntt_u_e1_pte, ZZ *ntt_u_save,
                              ZZ *ntt_e1_save, ZZ *pk_c0, ZZ *pk_c1)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
#endif

    // ===============================================================================
    //   Generate ciphertext: (c[1], c[0]) = ([pk1*u + e1]_Rq, [pk0*u + (m + e0)]_Rq)
    // ===============================================================================
    size_t n     = parms->coeff_count;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	617b      	str	r3, [r7, #20]
    Modulus *mod = parms->curr_modulus;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	613b      	str	r3, [r7, #16]

    // -------------------------
    //      Load pk1, pk0
    // -------------------------
    if (parms->pk_from_file)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <ckks_encode_encrypt_asym+0x38>
    {
        load_pki(1, parms, pk_c1);
 8008530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008532:	68f9      	ldr	r1, [r7, #12]
 8008534:	2001      	movs	r0, #1
 8008536:	f001 fa1d 	bl	8009974 <load_pki>
        load_pki(0, parms, pk_c0);
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	68f9      	ldr	r1, [r7, #12]
 800853e:	2000      	movs	r0, #0
 8008540:	f001 fa18 	bl	8009974 <load_pki>
    // -------------------------
    //  [pk1*u]_Rq, [pk0*u]_Rq
    // -------------------------
    // -- If u is in small form, expand so we can calculate ntt(u)
    // print_poly_ternary_full("u", u, n, 1);
    if (parms->small_u) expand_poly_ternary(u, parms, ntt_u_e1_pte);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <ckks_encode_encrypt_asym+0x4c>
 800854e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008550:	68f9      	ldr	r1, [r7, #12]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f005 fb89 	bl	800dc6a <expand_poly_ternary>
    // print_poly_full("u reduced", ntt_u_e1_pte, n);

    // -- Initialize ntt roots
    ntt_roots_initialize(parms, ntt_roots);
 8008558:	6a39      	ldr	r1, [r7, #32]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f004 fecb 	bl	800d2f6 <ntt_roots_initialize>

    // -- Calculate ntt(u). If requested, save ntt(u) for testing later
    ntt_inpl(parms, ntt_roots, ntt_u_e1_pte);
 8008560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008562:	6a39      	ldr	r1, [r7, #32]
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f004 ff60 	bl	800d42a <ntt_inpl>
    // print_poly("ntt(u) (inside)", ntt_u_e1_pte, n);

#ifndef SE_DISABLE_TESTING_CAPABILITY
    // if (ntt_u_save) printf("ntt u save is not null\n");
    // else            printf("ntt u save is null\n");
    if (ntt_u_save) memcpy(ntt_u_save, ntt_u_e1_pte, n * sizeof(ZZ));
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <ckks_encode_encrypt_asym+0x72>
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	461a      	mov	r2, r3
 8008576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800857a:	f005 ffbf 	bl	800e4fc <memcpy>
        // if (ntt_u_save) print_poly("ntt(u) (inside, ntt_u_save)", ntt_u_save, n);
#endif

    // -- Calculate [ntt(pk1) . ntt(u)]_Rq. Store result in pk_c1
    poly_mult_mod_ntt_form_inpl(pk_c1, ntt_u_e1_pte, n, mod);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008584:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008586:	f7ff fea8 	bl	80082da <poly_mult_mod_ntt_form_inpl>
    // print_poly("pk1*u (ntt)", pk_c1, n);

    // -- Calculate [ntt(pk0) . ntt(u)]_Rq. Store result in pk_c0
    poly_mult_mod_ntt_form_inpl(pk_c0, ntt_u_e1_pte, n, mod);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008592:	f7ff fea2 	bl	80082da <poly_mult_mod_ntt_form_inpl>
    // print_poly("pk0*u (ntt)", pk_c0, n);

    // -------------------------
    //      [pk1*u + e1]_Rq
    // -------------------------
    reduce_set_e_small(parms, e1, ntt_u_e1_pte);
 8008596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 faf5 	bl	8008b8a <reduce_set_e_small>
    // print_poly("e1 reduced", ntt_u_e1_pte, n);
    ntt_inpl(parms, ntt_roots, ntt_u_e1_pte);
 80085a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a2:	6a39      	ldr	r1, [r7, #32]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f004 ff40 	bl	800d42a <ntt_inpl>

#ifndef SE_DISABLE_TESTING_CAPABILITY
    if (ntt_e1_save) memcpy(ntt_e1_save, ntt_u_e1_pte, n * sizeof(ntt_u_e1_pte[0]));
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <ckks_encode_encrypt_asym+0xb2>
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	461a      	mov	r2, r3
 80085b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ba:	f005 ff9f 	bl	800e4fc <memcpy>
#endif

    // print_poly("ntt(e1)", ntt_u_e1_pte, n);
    poly_add_mod_inpl(pk_c1, ntt_u_e1_pte, n, mod);
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085c6:	f7ff fe29 	bl	800821c <poly_add_mod_inpl>
    // -----------------------------
    //      [pk0*u + m + e0]_Rq
    // -----------------------------
    // -- We no longer need ntt_u, but we do need ntt((m + e0) = conj_vals_in)
    // print_poly_int64("conj_vals_int      ", conj_vals_int, n);
    reduce_set_pte(parms, conj_vals_int, ntt_u_e1_pte);
 80085ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fab1 	bl	8008b36 <reduce_set_pte>
    // print_poly("m+e0 reduced", ntt_u_e1_pte, n);
    ntt_inpl(parms, ntt_roots, ntt_u_e1_pte);
 80085d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d6:	6a39      	ldr	r1, [r7, #32]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f004 ff26 	bl	800d42a <ntt_inpl>
    // print_poly("ntt(m+e0)", ntt_u_e1_pte, n);
    poly_add_mod_inpl(pk_c0, ntt_u_e1_pte, n, mod);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085e6:	f7ff fe19 	bl	800821c <poly_add_mod_inpl>
    // print_poly("c0 = pk0*u + m + e0 (ntt)", pk_c0, n);
}
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <ckks_next_prime_asym>:

bool ckks_next_prime_asym(Parms *parms, ZZ *u)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
    se_assert(parms && parms->is_asymmetric);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <ckks_next_prime_asym+0x1a>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf00      	nop
    se_assert(u || parms->small_u);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <ckks_next_prime_asym+0x28>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	bf00      	nop

    // -- Update curr_modulus_idx to next index
    if (!next_modulus(parms)) return 0;
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f004 ff47 	bl	800d4b0 <next_modulus>
 8008622:	4603      	mov	r3, r0
 8008624:	f083 0301 	eor.w	r3, r3, #1
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <ckks_next_prime_asym+0x40>
 800862e:	2300      	movs	r3, #0
 8008630:	e00c      	b.n	800864c <ckks_next_prime_asym+0x5a>

    // -- If 'u' is not in small form, we convert it to use the next prime
    if (!parms->small_u) convert_poly_ternary_inpl(u, parms);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008638:	f083 0301 	eor.w	r3, r3, #1
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <ckks_next_prime_asym+0x58>
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	6838      	ldr	r0, [r7, #0]
 8008646:	f005 fb71 	bl	800dd2c <convert_poly_ternary_inpl>
    return 1;
 800864a:	2301      	movs	r3, #1
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <se_creal>:
{
    double *val_double = (double *)(&val);
    return _complex(val_double[0], -val_double[1]);
}
static inline double se_creal(double complex val)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	e9c7 0100 	strd	r0, r1, [r7]
 800865e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double *val_double = (double *)(&val);
 8008662:	463b      	mov	r3, r7
 8008664:	617b      	str	r3, [r7, #20]
    return val_double[0];
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800866c:	4610      	mov	r0, r2
 800866e:	4619      	mov	r1, r3
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <add_uint32>:
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
    *res = op1 + op2;
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	441a      	add	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	601a      	str	r2, [r3, #0]
    return (uint8_t)(*res < op1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	429a      	cmp	r2, r3
 8008698:	bf8c      	ite	hi
 800869a:	2301      	movhi	r3, #1
 800869c:	2300      	movls	r3, #0
 800869e:	b2db      	uxtb	r3, r3
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <mul_uint32_wide>:
{
 80086ac:	b4b0      	push	{r4, r5, r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
    uint64_t res_temp = (uint64_t)op1 * (uint64_t)op2;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f04f 0100 	mov.w	r1, #0
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	461a      	mov	r2, r3
 80086c4:	f04f 0300 	mov.w	r3, #0
 80086c8:	fb02 f501 	mul.w	r5, r2, r1
 80086cc:	fb00 f403 	mul.w	r4, r0, r3
 80086d0:	442c      	add	r4, r5
 80086d2:	fba0 2302 	umull	r2, r3, r0, r2
 80086d6:	18e1      	adds	r1, r4, r3
 80086d8:	460b      	mov	r3, r1
 80086da:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80086de:	e9c7 2304 	strd	r2, r3, [r7, #16]
    res[0]            = (uint32_t)(res_temp & 0xFFFFFFFF);
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	601a      	str	r2, [r3, #0]
    res[1]            = (uint32_t)((res_temp >> 32) & 0xFFFFFFFF);
 80086e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	000a      	movs	r2, r1
 80086f6:	2300      	movs	r3, #0
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	3104      	adds	r1, #4
 80086fc:	4613      	mov	r3, r2
 80086fe:	600b      	str	r3, [r1, #0]
}
 8008700:	bf00      	nop
 8008702:	371c      	adds	r7, #28
 8008704:	46bd      	mov	sp, r7
 8008706:	bcb0      	pop	{r4, r5, r7}
 8008708:	4770      	bx	lr

0800870a <mul_uint32_high>:
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
    mul_uint32_wide(op1, op2, res);
 8008714:	f107 0308 	add.w	r3, r7, #8
 8008718:	461a      	mov	r2, r3
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff ffc5 	bl	80086ac <mul_uint32_wide>
    return res[1];
 8008722:	68fb      	ldr	r3, [r7, #12]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <shift_result>:
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
    ZZsign is_2q = (ZZsign)(input >= q);
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	bf2c      	ite	cs
 800873e:	2301      	movcs	r3, #1
 8008740:	2300      	movcc	r3, #0
 8008742:	b2db      	uxtb	r3, r3
 8008744:	60fb      	str	r3, [r7, #12]
    ZZ mask = (ZZ)(-is_2q);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	425b      	negs	r3, r3
 800874a:	60bb      	str	r3, [r7, #8]
    return (ZZ)(input) - (q & mask);
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	4013      	ands	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	1ad3      	subs	r3, r2, r3
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <barrett_reduce_64input_32modulus>:
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b090      	sub	sp, #64	; 0x40
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
    const uint32_t *const_ratio = modulus->const_ratio;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	3304      	adds	r3, #4
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t right_hw = mul_uint32_high(input[0], const_ratio[0]);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4619      	mov	r1, r3
 800877c:	4610      	mov	r0, r2
 800877e:	f7ff ffc4 	bl	800870a <mul_uint32_high>
 8008782:	63b8      	str	r0, [r7, #56]	; 0x38
    mul_uint32_wide(input[0], const_ratio[1], middle_temp);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	3304      	adds	r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f107 021c 	add.w	r2, r7, #28
 8008792:	4619      	mov	r1, r3
 8008794:	f7ff ff8a 	bl	80086ac <mul_uint32_wide>
    uint32_t middle_lw_carry = add_uint32(right_hw, middle_temp[0], &middle_lw);
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f107 0218 	add.w	r2, r7, #24
 800879e:	4619      	mov	r1, r3
 80087a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087a2:	f7ff ff6a 	bl	800867a <add_uint32>
 80087a6:	4603      	mov	r3, r0
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t middle_hw       = middle_temp[1] + middle_lw_carry;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087ae:	4413      	add	r3, r2
 80087b0:	633b      	str	r3, [r7, #48]	; 0x30
    mul_uint32_wide(input[1], const_ratio[0], middle2_temp);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3304      	adds	r3, #4
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f107 0210 	add.w	r2, r7, #16
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7ff ff73 	bl	80086ac <mul_uint32_wide>
    uint32_t middle2_lw_carry = add_uint32(middle_lw, middle2_temp[0], &middle2_lw);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	6939      	ldr	r1, [r7, #16]
 80087ca:	f107 020c 	add.w	r2, r7, #12
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff ff53 	bl	800867a <add_uint32>
 80087d4:	4603      	mov	r3, r0
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t middle2_hw       = middle2_temp[1] + middle2_lw_carry;  // We don't need the carry
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087dc:	4413      	add	r3, r2
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t tmp = input[1] * const_ratio[1] + middle_hw + middle2_hw;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3304      	adds	r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087e8:	3204      	adds	r2, #4
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	fb02 f203 	mul.w	r2, r2, r3
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	4413      	add	r3, r2
 80087f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087f6:	4413      	add	r3, r2
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
    tmp = input[0] - tmp * modulus->value;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008804:	fb01 f303 	mul.w	r3, r1, r3
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
    return shift_result(tmp, modulus->value);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4619      	mov	r1, r3
 8008812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008814:	f7ff ff8a 	bl	800872c <shift_result>
 8008818:	4603      	mov	r3, r0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3740      	adds	r7, #64	; 0x40
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <ckks_setup>:
    }
    // print_poly_uint16("index map", index_map, n);
}

void ckks_setup(size_t degree, size_t nprimes, uint16_t *index_map, Parms *parms)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	603b      	str	r3, [r7, #0]
    set_parms_ckks(degree, nprimes, parms);
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f004 ff91 	bl	800d75c <set_parms_ckks>
#elif defined(SE_INDEX_MAP_LOAD_PERSIST)
    load_index_map(parms, index_map);
#elif defined(SE_INDEX_MAP_LOAD_PERSIST_SYM_LOAD_ASYM)
    if (!parms->is_asymmetric) load_index_map(parms, index_map);
#endif
}
 800883a:	bf00      	nop
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <ckks_setup_custom>:

void ckks_setup_custom(size_t degree, size_t nprimes, const ZZ *modulus_vals, const ZZ *ratios,
                       uint16_t *index_map, Parms *parms)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b086      	sub	sp, #24
 8008846:	af02      	add	r7, sp, #8
 8008848:	60f8      	str	r0, [r7, #12]
 800884a:	60b9      	str	r1, [r7, #8]
 800884c:	607a      	str	r2, [r7, #4]
 800884e:	603b      	str	r3, [r7, #0]
    if (!modulus_vals || !ratios)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <ckks_setup_custom+0x1a>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d106      	bne.n	800886a <ckks_setup_custom+0x28>
    {
        ckks_setup(degree, nprimes, index_map, parms);
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff ffdd 	bl	8008822 <ckks_setup>
        return;
 8008868:	e009      	b.n	800887e <ckks_setup_custom+0x3c>
    }
    ckks_setup_custom(degree, nprimes, modulus_vals, ratios, index_map, parms);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff ffe2 	bl	8008842 <ckks_setup_custom>
#elif defined(SE_INDEX_MAP_LOAD_PERSIST)
    load_index_map(parms, index_map);
#elif defined(SE_INDEX_MAP_LOAD_PERSIST_SYM_LOAD_ASYM)
    if (!parms->is_asymmetric) load_index_map(parms, index_map);
#endif
}
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <ckks_reset_primes>:

void ckks_reset_primes(Parms *parms)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
    reset_primes(parms);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f004 fdfe 	bl	800d48e <reset_primes>
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <ckks_encode_base>:

bool ckks_encode_base(const Parms *parms, const flpt *values, size_t values_len,
                      uint16_t *index_map, double complex *ifft_roots, double complex *conj_vals)
{
 800889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a0:	b09d      	sub	sp, #116	; 0x74
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6178      	str	r0, [r7, #20]
 80088a6:	6139      	str	r1, [r7, #16]
 80088a8:	60fa      	str	r2, [r7, #12]
 80088aa:	60bb      	str	r3, [r7, #8]
    se_assert(parms);
    size_t n     = parms->coeff_count;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	667b      	str	r3, [r7, #100]	; 0x64
    size_t logn  = parms->logn;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	663b      	str	r3, [r7, #96]	; 0x60
    double scale = parms->scale;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80088be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

#ifdef SE_INDEX_MAP_LOAD
    se_assert(index_map);
    load_index_map(parms, index_map);
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	6978      	ldr	r0, [r7, #20]
 80088c6:	f001 f881 	bl	80099cc <load_index_map>
        size_t index1       = ((size_t)pos - 1) / 2;
        size_t index2       = n - index1 - 1;
        uint16_t index1_rev = (uint16_t)bitrev(index1, logn);
        uint16_t index2_rev = (uint16_t)bitrev(index2, logn);
#else
    size_t slot_count = n / 2;
 80088ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088cc:	085b      	lsrs	r3, r3, #1
 80088ce:	657b      	str	r3, [r7, #84]	; 0x54
    for (size_t i = 0; i < values_len; i++)
 80088d0:	2300      	movs	r3, #0
 80088d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088d4:	e04a      	b.n	800896c <ckks_encode_base+0xd0>
    {
        se_assert(index_map);
        uint16_t index1_rev = index_map[i];
 80088d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        uint16_t index2_rev = index_map[i + slot_count];
 80088e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e6:	4413      	add	r3, r2
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	4413      	add	r3, r2
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	86bb      	strh	r3, [r7, #52]	; 0x34
#endif
        se_assert(index1_rev < n);
        se_assert(index2_rev < n);
        double complex val    = (double complex)_complex((double)values[i], (double)0);
 80088f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4413      	add	r3, r2
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f7 fe3b 	bl	8000578 <__aeabi_f2d>
 8008902:	f04f 0200 	mov.w	r2, #0
 8008906:	f04f 0300 	mov.w	r3, #0
 800890a:	f7f7 fcd7 	bl	80002bc <__adddf3>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8008916:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800891a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800891e:	f04f 0200 	mov.w	r2, #0
 8008922:	f04f 0300 	mov.w	r3, #0
 8008926:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        conj_vals[index1_rev] = val;
 800892a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800892c:	011b      	lsls	r3, r3, #4
 800892e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008932:	18d1      	adds	r1, r2, r3
 8008934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008938:	e9c1 2300 	strd	r2, r3, [r1]
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	f04f 0300 	mov.w	r3, #0
 8008944:	e9c1 2302 	strd	r2, r3, [r1, #8]
        conj_vals[index2_rev] = val;
 8008948:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008950:	18d1      	adds	r1, r2, r3
 8008952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008956:	e9c1 2300 	strd	r2, r3, [r1]
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	e9c1 2302 	strd	r2, r3, [r1, #8]
    for (size_t i = 0; i < values_len; i++)
 8008966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008968:	3301      	adds	r3, #1
 800896a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800896c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	429a      	cmp	r2, r3
 8008972:	d3b0      	bcc.n	80088d6 <ckks_encode_base+0x3a>
    print_poly_double_complex("conj_vals inside", conj_vals, n);
#endif

#ifdef SE_IFFT_LOAD_FULL
    se_assert(ifft_roots);
    load_ifft_roots(n, ifft_roots);
 8008974:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008978:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800897a:	f001 f83d 	bl	80099f8 <load_ifft_roots>
#endif

    // -- Note: ifft_roots argument will be ignored if SE_IFFT_OTF is defined
    ifft_inpl(conj_vals, n, logn, ifft_roots);
 800897e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008982:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008984:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008986:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800898a:	f000 fee9 	bl	8009760 <ifft_inpl>
    print_poly_double_complex("conj_vals", conj_vals, n);

    n_inv = scale;
#else
    // -- Combine ifft step of dividing by n with ckks step of scaling by "scale"
    double n_inv = scale / (double)n;
 800898e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008990:	f7f7 fdd0 	bl	8000534 <__aeabi_ui2d>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800899c:	f7f7 ff6e 	bl	800087c <__aeabi_ddiv>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
#endif

    // -- We no longer need the imaginary part of conj_vals
    int64_t *conj_vals_int = (int64_t *)conj_vals;
 80089a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089ac:	647b      	str	r3, [r7, #68]	; 0x44
    for (size_t i = 0; i < n; i++)
 80089ae:	2300      	movs	r3, #0
 80089b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80089b2:	e078      	b.n	8008aa6 <ckks_encode_base+0x20a>
    {
        // print_poly_double_complex("conj_vals", conj_vals, n);

        double coeff = round(se_creal(conj_vals[i]) * n_inv);
 80089b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80089bc:	4413      	add	r3, r2
 80089be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80089c6:	4682      	mov	sl, r0
 80089c8:	468b      	mov	fp, r1
 80089ca:	4690      	mov	r8, r2
 80089cc:	4699      	mov	r9, r3
 80089ce:	4650      	mov	r0, sl
 80089d0:	4659      	mov	r1, fp
 80089d2:	4642      	mov	r2, r8
 80089d4:	464b      	mov	r3, r9
 80089d6:	f7ff fe3d 	bl	8008654 <se_creal>
 80089da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089de:	f7f7 fe23 	bl	8000628 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	ec43 2b17 	vmov	d7, r2, r3
 80089ea:	eeb0 0a47 	vmov.f32	s0, s14
 80089ee:	eef0 0a67 	vmov.f32	s1, s15
 80089f2:	f006 fdd3 	bl	800f59c <round>
 80089f6:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38

        // -- Check to make sure value can fit in an int64_t
        if (fabs(coeff) > MAX_INT_64_DOUBLE)
 80089fa:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80089fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	4b2d      	ldr	r3, [pc, #180]	; (8008abc <ckks_encode_base+0x220>)
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f8 f89c 	bl	8000b48 <__aeabi_dcmpgt>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d038      	beq.n	8008a88 <ckks_encode_base+0x1ec>
        {
            printf("Error! Value at index %zu is possibly too large.\n", i);
 8008a16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a18:	4829      	ldr	r0, [pc, #164]	; (8008ac0 <ckks_encode_base+0x224>)
 8008a1a:	f005 fe3f 	bl	800e69c <iprintf>
            printf("se_creal(conj_vals[i]):      %0.6f\n", se_creal(conj_vals[i]));
 8008a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008a26:	4413      	add	r3, r2
 8008a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008a30:	4680      	mov	r8, r0
 8008a32:	4689      	mov	r9, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	461d      	mov	r5, r3
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	462b      	mov	r3, r5
 8008a40:	f7ff fe08 	bl	8008654 <se_creal>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	481e      	ldr	r0, [pc, #120]	; (8008ac4 <ckks_encode_base+0x228>)
 8008a4a:	f005 fe27 	bl	800e69c <iprintf>
            printf("ninv:              %0.6f\n", n_inv);
 8008a4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a52:	481d      	ldr	r0, [pc, #116]	; (8008ac8 <ckks_encode_base+0x22c>)
 8008a54:	f005 fe22 	bl	800e69c <iprintf>
            printf("coeff:             %0.6f\n", coeff);
 8008a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a5c:	481b      	ldr	r0, [pc, #108]	; (8008acc <ckks_encode_base+0x230>)
 8008a5e:	f005 fe1d 	bl	800e69c <iprintf>
            printf("fabs(coeff):       %0.6f\n", fabs(coeff));
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	603b      	str	r3, [r7, #0]
 8008a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a6c:	607b      	str	r3, [r7, #4]
 8008a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a72:	4817      	ldr	r0, [pc, #92]	; (8008ad0 <ckks_encode_base+0x234>)
 8008a74:	f005 fe12 	bl	800e69c <iprintf>
            printf("MAX_INT_64_DOUBLE: %0.6f\n", MAX_INT_64_DOUBLE);
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <ckks_encode_base+0x220>)
 8008a7e:	4815      	ldr	r0, [pc, #84]	; (8008ad4 <ckks_encode_base+0x238>)
 8008a80:	f005 fe0c 	bl	800e69c <iprintf>
            return false;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e013      	b.n	8008ab0 <ckks_encode_base+0x214>
        }

        conj_vals_int[i] = (int64_t)(coeff);
 8008a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a8e:	18d6      	adds	r6, r2, r3
 8008a90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a94:	f7f8 fb7c 	bl	8001190 <__aeabi_d2lz>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	e9c6 2300 	strd	r2, r3, [r6]
    for (size_t i = 0; i < n; i++)
 8008aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d382      	bcc.n	80089b4 <ckks_encode_base+0x118>
    }

#ifdef SE_VERBOSE_TESTING
    print_poly_int64("conj_vals_int", conj_vals_int, n);
#endif
    return true;
 8008aae:	2301      	movs	r3, #1
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3774      	adds	r7, #116	; 0x74
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	bf00      	nop
 8008abc:	43e00000 	.word	0x43e00000
 8008ac0:	0800fb14 	.word	0x0800fb14
 8008ac4:	0800fb48 	.word	0x0800fb48
 8008ac8:	0800fb6c 	.word	0x0800fb6c
 8008acc:	0800fb88 	.word	0x0800fb88
 8008ad0:	0800fba4 	.word	0x0800fba4
 8008ad4:	0800fbc0 	.word	0x0800fbc0

08008ad8 <reduce_pte_core>:
@param[in] conj_vals_int  Value to be reduced
@param[in] mod            Modulus to reduce value by
@returns                  Reduced value
*/
ZZ reduce_pte_core(int64_t conj_vals_int, const Modulus *mod)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
    uint64_t coeff_abs = (uint64_t)(llabs(conj_vals_int));
 8008ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	f173 0100 	sbcs.w	r1, r3, #0
 8008aee:	da02      	bge.n	8008af6 <reduce_pte_core+0x1e>
 8008af0:	4252      	negs	r2, r2
 8008af2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008af6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    ZZ mask            = (ZZ)(conj_vals_int < 0);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	0fdb      	lsrs	r3, r3, #31
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	627b      	str	r3, [r7, #36]	; 0x24

    ZZ *coeff_abs_vec = (ZZ *)&coeff_abs;
 8008b02:	f107 0310 	add.w	r3, r7, #16
 8008b06:	623b      	str	r3, [r7, #32]
    ZZ coeff_crt      = barrett_reduce_64input_32modulus(coeff_abs_vec, mod);
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	6a38      	ldr	r0, [r7, #32]
 8008b0c:	f7ff fe29 	bl	8008762 <barrett_reduce_64input_32modulus>
 8008b10:	61f8      	str	r0, [r7, #28]

    // -- This is the same as the following, but in constant-time
    //    ZZ val = (conj_vals_int < 0) ? (mod->value - coeff_crt) : coeff_crt;
    ZZ val = ((mod->value - coeff_crt) & (-mask)) + (coeff_crt & (mask - 1));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	1ad2      	subs	r2, r2, r3
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	425b      	negs	r3, r3
 8008b1e:	401a      	ands	r2, r3
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	1e59      	subs	r1, r3, #1
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	400b      	ands	r3, r1
 8008b28:	4413      	add	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]

    return val;
 8008b2c:	69bb      	ldr	r3, [r7, #24]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3728      	adds	r7, #40	; 0x28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <reduce_set_pte>:

void reduce_set_pte(const Parms *parms, const int64_t *conj_vals_int, ZZ *out)
{
 8008b36:	b590      	push	{r4, r7, lr}
 8008b38:	b089      	sub	sp, #36	; 0x24
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]
    PolySizeType n = parms->coeff_count;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	61bb      	str	r3, [r7, #24]
    Modulus *mod   = parms->curr_modulus;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < n; i++) { out[i] = reduce_pte_core(conj_vals_int[i], mod); }
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	e011      	b.n	8008b78 <reduce_set_pte+0x42>
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	18d4      	adds	r4, r2, r3
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	f7ff ffb5 	bl	8008ad8 <reduce_pte_core>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	3301      	adds	r3, #1
 8008b76:	61fb      	str	r3, [r7, #28]
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d3e9      	bcc.n	8008b54 <reduce_set_pte+0x1e>
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	3724      	adds	r7, #36	; 0x24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd90      	pop	{r4, r7, pc}

08008b8a <reduce_set_e_small>:
        add_mod_inpl(&(out[i]), val, mod);
    }
}

void reduce_set_e_small(const Parms *parms, const int8_t *e, ZZ *out)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b089      	sub	sp, #36	; 0x24
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607a      	str	r2, [r7, #4]
    PolySizeType n = parms->coeff_count;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	61bb      	str	r3, [r7, #24]
    Modulus *mod   = parms->curr_modulus;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < n; i++) { out[i] = ((-(ZZ)(e[i] < 0)) & mod->value) + (ZZ)e[i]; }
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	e01a      	b.n	8008bde <reduce_set_e_small+0x54>
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f993 3000 	ldrsb.w	r3, [r3]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	09db      	lsrs	r3, r3, #7
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	425a      	negs	r2, r3
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	401a      	ands	r2, r3
 8008bc0:	68b9      	ldr	r1, [r7, #8]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	440b      	add	r3, r1
 8008bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	440b      	add	r3, r1
 8008bd4:	4402      	add	r2, r0
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d3e0      	bcc.n	8008ba8 <reduce_set_e_small+0x1e>
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	3724      	adds	r7, #36	; 0x24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <se_print_relative_positions>:
    { add_mod_inpl(&(out[i]), ((-(ZZ)(e[i] < 0)) & mod->value) + (ZZ)e[i], mod); }
}

#ifdef SE_USE_MALLOC
void se_print_relative_positions(const ZZ *st, const SE_PTRS *se_ptrs, size_t n, bool sym)
{
 8008bf4:	b5b0      	push	{r4, r5, r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	70fb      	strb	r3, [r7, #3]
#else
    bool sym = 0;
#endif
    size_t n = SE_DEGREE_N;
#endif
    printf("\n\tPrinting relative positions (negative value == does not exist)...\n");
 8008c02:	488c      	ldr	r0, [pc, #560]	; (8008e34 <se_print_relative_positions+0x240>)
 8008c04:	f005 fde6 	bl	800e7d4 <puts>
    printf("\t    conj_vals: %0.4f\n", ((ZZ *)se_ptrs->conj_vals - st) / (double)n);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	109b      	asrs	r3, r3, #2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f7 fc9e 	bl	8000554 <__aeabi_i2d>
 8008c18:	4604      	mov	r4, r0
 8008c1a:	460d      	mov	r5, r1
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7f7 fc89 	bl	8000534 <__aeabi_ui2d>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4620      	mov	r0, r4
 8008c28:	4629      	mov	r1, r5
 8008c2a:	f7f7 fe27 	bl	800087c <__aeabi_ddiv>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4881      	ldr	r0, [pc, #516]	; (8008e38 <se_print_relative_positions+0x244>)
 8008c34:	f005 fd32 	bl	800e69c <iprintf>
    printf("\tconj_vals_int: %0.4f\n", ((ZZ *)se_ptrs->conj_vals_int_ptr - st) / (double)n);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	691a      	ldr	r2, [r3, #16]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	109b      	asrs	r3, r3, #2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f7 fc86 	bl	8000554 <__aeabi_i2d>
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7f7 fc71 	bl	8000534 <__aeabi_ui2d>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4620      	mov	r0, r4
 8008c58:	4629      	mov	r1, r5
 8008c5a:	f7f7 fe0f 	bl	800087c <__aeabi_ddiv>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4876      	ldr	r0, [pc, #472]	; (8008e3c <se_print_relative_positions+0x248>)
 8008c64:	f005 fd1a 	bl	800e69c <iprintf>
    printf("\t           c1: %0.4f\n", ((ZZ *)se_ptrs->c1_ptr - st) / (double)n);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	699a      	ldr	r2, [r3, #24]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	109b      	asrs	r3, r3, #2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7f7 fc6e 	bl	8000554 <__aeabi_i2d>
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7f7 fc59 	bl	8000534 <__aeabi_ui2d>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7f7 fdf7 	bl	800087c <__aeabi_ddiv>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	486b      	ldr	r0, [pc, #428]	; (8008e40 <se_print_relative_positions+0x24c>)
 8008c94:	f005 fd02 	bl	800e69c <iprintf>
    printf("\t           c0: %0.4f\n", ((ZZ *)se_ptrs->c0_ptr - st) / (double)n);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	109b      	asrs	r3, r3, #2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f7 fc56 	bl	8000554 <__aeabi_i2d>
 8008ca8:	4604      	mov	r4, r0
 8008caa:	460d      	mov	r5, r1
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7f7 fc41 	bl	8000534 <__aeabi_ui2d>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	f7f7 fddf 	bl	800087c <__aeabi_ddiv>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4860      	ldr	r0, [pc, #384]	; (8008e44 <se_print_relative_positions+0x250>)
 8008cc4:	f005 fcea 	bl	800e69c <iprintf>
    printf("\t      ntt_pte: %0.4f\n", ((ZZ *)se_ptrs->ntt_pte_ptr - st) / (double)n);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	109b      	asrs	r3, r3, #2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f7 fc3e 	bl	8000554 <__aeabi_i2d>
 8008cd8:	4604      	mov	r4, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7f7 fc29 	bl	8000534 <__aeabi_ui2d>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7f7 fdc7 	bl	800087c <__aeabi_ddiv>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4855      	ldr	r0, [pc, #340]	; (8008e48 <se_print_relative_positions+0x254>)
 8008cf4:	f005 fcd2 	bl	800e69c <iprintf>
    printf("\t   ifft_roots: %0.4f\n", ((ZZ *)se_ptrs->ifft_roots - st) / (double)n);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	109b      	asrs	r3, r3, #2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f7 fc26 	bl	8000554 <__aeabi_i2d>
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7f7 fc11 	bl	8000534 <__aeabi_ui2d>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4620      	mov	r0, r4
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7f7 fdaf 	bl	800087c <__aeabi_ddiv>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	484a      	ldr	r0, [pc, #296]	; (8008e4c <se_print_relative_positions+0x258>)
 8008d24:	f005 fcba 	bl	800e69c <iprintf>
    printf("\t    ntt_roots: %0.4f\n", ((ZZ *)se_ptrs->ntt_roots_ptr - st) / (double)n);
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6a1a      	ldr	r2, [r3, #32]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	109b      	asrs	r3, r3, #2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7f7 fc0e 	bl	8000554 <__aeabi_i2d>
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7f7 fbf9 	bl	8000534 <__aeabi_ui2d>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fd97 	bl	800087c <__aeabi_ddiv>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	483f      	ldr	r0, [pc, #252]	; (8008e50 <se_print_relative_positions+0x25c>)
 8008d54:	f005 fca2 	bl	800e69c <iprintf>
    printf("\t    index_map: %0.4f\n", ((ZZ *)se_ptrs->index_map_ptr - st) / (double)n);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	109b      	asrs	r3, r3, #2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7f7 fbf6 	bl	8000554 <__aeabi_i2d>
 8008d68:	4604      	mov	r4, r0
 8008d6a:	460d      	mov	r5, r1
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7f7 fbe1 	bl	8000534 <__aeabi_ui2d>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4620      	mov	r0, r4
 8008d78:	4629      	mov	r1, r5
 8008d7a:	f7f7 fd7f 	bl	800087c <__aeabi_ddiv>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4834      	ldr	r0, [pc, #208]	; (8008e54 <se_print_relative_positions+0x260>)
 8008d84:	f005 fc8a 	bl	800e69c <iprintf>
    if (!sym) { printf("\t           e1: %0.4f\n", ((ZZ *)se_ptrs->e1_ptr - st) / (double)n); }
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	f083 0301 	eor.w	r3, r3, #1
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d017      	beq.n	8008dc4 <se_print_relative_positions+0x1d0>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	109b      	asrs	r3, r3, #2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7f7 fbd8 	bl	8000554 <__aeabi_i2d>
 8008da4:	4604      	mov	r4, r0
 8008da6:	460d      	mov	r5, r1
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7f7 fbc3 	bl	8000534 <__aeabi_ui2d>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4620      	mov	r0, r4
 8008db4:	4629      	mov	r1, r5
 8008db6:	f7f7 fd61 	bl	800087c <__aeabi_ddiv>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4826      	ldr	r0, [pc, #152]	; (8008e58 <se_print_relative_positions+0x264>)
 8008dc0:	f005 fc6c 	bl	800e69c <iprintf>
    printf("\t      ternary: %0.4f\n", ((ZZ *)se_ptrs->ternary - st) / (double)n);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	109b      	asrs	r3, r3, #2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7f7 fbc0 	bl	8000554 <__aeabi_i2d>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7f7 fbab 	bl	8000534 <__aeabi_ui2d>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4620      	mov	r0, r4
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7f7 fd49 	bl	800087c <__aeabi_ddiv>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	481b      	ldr	r0, [pc, #108]	; (8008e5c <se_print_relative_positions+0x268>)
 8008df0:	f005 fc54 	bl	800e69c <iprintf>
    printf("\t       values: %0.4f\n", ((ZZ *)se_ptrs->values - st) / (double)n);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	109b      	asrs	r3, r3, #2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7f7 fba8 	bl	8000554 <__aeabi_i2d>
 8008e04:	4604      	mov	r4, r0
 8008e06:	460d      	mov	r5, r1
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7f7 fb93 	bl	8000534 <__aeabi_ui2d>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 fd31 	bl	800087c <__aeabi_ddiv>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4810      	ldr	r0, [pc, #64]	; (8008e60 <se_print_relative_positions+0x26c>)
 8008e20:	f005 fc3c 	bl	800e69c <iprintf>
    printf("\n");
 8008e24:	200a      	movs	r0, #10
 8008e26:	f005 fc51 	bl	800e6cc <putchar>
}
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bdb0      	pop	{r4, r5, r7, pc}
 8008e32:	bf00      	nop
 8008e34:	0800fbdc 	.word	0x0800fbdc
 8008e38:	0800fc20 	.word	0x0800fc20
 8008e3c:	0800fc38 	.word	0x0800fc38
 8008e40:	0800fc50 	.word	0x0800fc50
 8008e44:	0800fc68 	.word	0x0800fc68
 8008e48:	0800fc80 	.word	0x0800fc80
 8008e4c:	0800fc98 	.word	0x0800fc98
 8008e50:	0800fcb0 	.word	0x0800fcb0
 8008e54:	0800fcc8 	.word	0x0800fcc8
 8008e58:	0800fce0 	.word	0x0800fce0
 8008e5c:	0800fcf8 	.word	0x0800fcf8
 8008e60:	0800fd10 	.word	0x0800fd10

08008e64 <se_print_addresses>:

#ifdef SE_USE_MALLOC
void se_print_addresses(const ZZ *mempool, const SE_PTRS *se_ptrs, size_t n, bool sym)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	70fb      	strb	r3, [r7, #3]
    size_t mempool_size = sym ? ckks_get_mempool_size_sym(n) : ckks_get_mempool_size_asym(n);
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <se_print_addresses+0x1e>
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fae4 	bl	8009446 <ckks_get_mempool_size_sym>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	e003      	b.n	8008e8a <se_print_addresses+0x26>
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fa3a 	bl	80082fc <ckks_get_mempool_size_asym>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	617b      	str	r3, [r7, #20]
    bool sym = 1;
#else
    bool sym = 0;
#endif
#endif
    printf("\n\tPrinting addresses (nil == does not exist)...\n");
 8008e8c:	4830      	ldr	r0, [pc, #192]	; (8008f50 <se_print_addresses+0xec>)
 8008e8e:	f005 fca1 	bl	800e7d4 <puts>
    printf("mempool begin address: %p\n", mempool);
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	482f      	ldr	r0, [pc, #188]	; (8008f54 <se_print_addresses+0xf0>)
 8008e96:	f005 fc01 	bl	800e69c <iprintf>
    printf("mempool end   address: %p\n", &(mempool[mempool_size - 1]));
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	482b      	ldr	r0, [pc, #172]	; (8008f58 <se_print_addresses+0xf4>)
 8008eac:	f005 fbf6 	bl	800e69c <iprintf>
    printf("\t    conj_vals: %p\n", se_ptrs->conj_vals);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4829      	ldr	r0, [pc, #164]	; (8008f5c <se_print_addresses+0xf8>)
 8008eb8:	f005 fbf0 	bl	800e69c <iprintf>
    printf("\tconj_vals_int: %p\n", se_ptrs->conj_vals_int_ptr);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4827      	ldr	r0, [pc, #156]	; (8008f60 <se_print_addresses+0xfc>)
 8008ec4:	f005 fbea 	bl	800e69c <iprintf>
    printf("\t           c1: %p\n", se_ptrs->c1_ptr);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4825      	ldr	r0, [pc, #148]	; (8008f64 <se_print_addresses+0x100>)
 8008ed0:	f005 fbe4 	bl	800e69c <iprintf>
    printf("\t           c0: %p\n", se_ptrs->c0_ptr);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4823      	ldr	r0, [pc, #140]	; (8008f68 <se_print_addresses+0x104>)
 8008edc:	f005 fbde 	bl	800e69c <iprintf>
    printf("\t      ntt_pte: %p\n", se_ptrs->ntt_pte_ptr);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4821      	ldr	r0, [pc, #132]	; (8008f6c <se_print_addresses+0x108>)
 8008ee8:	f005 fbd8 	bl	800e69c <iprintf>
    printf("\t   ifft_roots: %p\n", se_ptrs->ifft_roots);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	481f      	ldr	r0, [pc, #124]	; (8008f70 <se_print_addresses+0x10c>)
 8008ef4:	f005 fbd2 	bl	800e69c <iprintf>
    printf("\t    ntt_roots: %p\n", se_ptrs->ntt_roots_ptr);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	4619      	mov	r1, r3
 8008efe:	481d      	ldr	r0, [pc, #116]	; (8008f74 <se_print_addresses+0x110>)
 8008f00:	f005 fbcc 	bl	800e69c <iprintf>
    printf("\t    index_map: %p\n", se_ptrs->index_map_ptr);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	481b      	ldr	r0, [pc, #108]	; (8008f78 <se_print_addresses+0x114>)
 8008f0c:	f005 fbc6 	bl	800e69c <iprintf>
    if (!sym) printf("\t           e1: %p\n", se_ptrs->e1_ptr);
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	f083 0301 	eor.w	r3, r3, #1
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <se_print_addresses+0xc4>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f20:	4619      	mov	r1, r3
 8008f22:	4816      	ldr	r0, [pc, #88]	; (8008f7c <se_print_addresses+0x118>)
 8008f24:	f005 fbba 	bl	800e69c <iprintf>
    printf("\t      ternary: %p\n", se_ptrs->ternary);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4814      	ldr	r0, [pc, #80]	; (8008f80 <se_print_addresses+0x11c>)
 8008f30:	f005 fbb4 	bl	800e69c <iprintf>
    printf("\t       values: %p\n", se_ptrs->values);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4812      	ldr	r0, [pc, #72]	; (8008f84 <se_print_addresses+0x120>)
 8008f3c:	f005 fbae 	bl	800e69c <iprintf>
    printf("\n");
 8008f40:	200a      	movs	r0, #10
 8008f42:	f005 fbc3 	bl	800e6cc <putchar>
}
 8008f46:	bf00      	nop
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	0800fd28 	.word	0x0800fd28
 8008f54:	0800fd58 	.word	0x0800fd58
 8008f58:	0800fd74 	.word	0x0800fd74
 8008f5c:	0800fd90 	.word	0x0800fd90
 8008f60:	0800fda4 	.word	0x0800fda4
 8008f64:	0800fdb8 	.word	0x0800fdb8
 8008f68:	0800fdcc 	.word	0x0800fdcc
 8008f6c:	0800fde0 	.word	0x0800fde0
 8008f70:	0800fdf4 	.word	0x0800fdf4
 8008f74:	0800fe08 	.word	0x0800fe08
 8008f78:	0800fe1c 	.word	0x0800fe1c
 8008f7c:	0800fe30 	.word	0x0800fe30
 8008f80:	0800fe44 	.word	0x0800fe44
 8008f84:	0800fe58 	.word	0x0800fe58

08008f88 <print_ckks_mempool_size>:

#ifdef SE_USE_MALLOC
void print_ckks_mempool_size(size_t n, bool sym)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08c      	sub	sp, #48	; 0x30
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
    se_assert(n >= 16);
    size_t mempool_size = sym ? ckks_get_mempool_size_sym(n) : ckks_get_mempool_size_asym(n);
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <print_ckks_mempool_size+0x1c>
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa53 	bl	8009446 <ckks_get_mempool_size_sym>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	e003      	b.n	8008fac <print_ckks_mempool_size+0x24>
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff f9a9 	bl	80082fc <ckks_get_mempool_size_asym>
 8008faa:	4603      	mov	r3, r0
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
{
    size_t mempool_size = MEMPOOL_SIZE;
    size_t n = SE_DEGREE_N;
#endif

    size_t n_size_B  = n * sizeof(ZZ);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_size_KB = n * sizeof(ZZ) / 1024;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	0a9b      	lsrs	r3, r3, #10
 8008fba:	623b      	str	r3, [r7, #32]

#ifdef SE_MEMPOOL_ALLOC_VALUES
    bool alloc_values = 1;
#else
    bool alloc_values = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	77fb      	strb	r3, [r7, #31]
#endif

    const char *print_str1     = "\nTotal memory requirement (incl. values buffer)  :";
 8008fc0:	4b13      	ldr	r3, [pc, #76]	; (8009010 <print_ckks_mempool_size+0x88>)
 8008fc2:	61bb      	str	r3, [r7, #24]
    const char *print_str2     = "\nTotal memory requirement (without values buffer):";
 8008fc4:	4b13      	ldr	r3, [pc, #76]	; (8009014 <print_ckks_mempool_size+0x8c>)
 8008fc6:	617b      	str	r3, [r7, #20]
    const char *print_str_curr = alloc_values ? print_str1 : print_str2;
 8008fc8:	7ffb      	ldrb	r3, [r7, #31]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <print_ckks_mempool_size+0x4a>
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	e000      	b.n	8008fd4 <print_ckks_mempool_size+0x4c>
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < 1 + (size_t)alloc_values; i++)
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fda:	e00f      	b.n	8008ffc <print_ckks_mempool_size+0x74>
    {
        size_t mempool_size_B  = mempool_size * sizeof(ZZ);
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	60fb      	str	r3, [r7, #12]
        size_t mempool_size_KB = mempool_size_B / 1024;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	0a9b      	lsrs	r3, r3, #10
 8008fe6:	60bb      	str	r3, [r7, #8]
        if (n_size_KB)
            printf("%zu KB] * %0.4f )\n\n", n_size_KB, mempool_size / (double)n);
        else
            printf("%zu bytes] * %0.4f )\n\n", n_size_B, mempool_size / (double)n);
   */
        mempool_size -= n / 2;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        print_str_curr = print_str2;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < 1 + (size_t)alloc_values; i++)
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ffc:	7ffb      	ldrb	r3, [r7, #31]
 8008ffe:	3301      	adds	r3, #1
 8009000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009002:	429a      	cmp	r2, r3
 8009004:	d3ea      	bcc.n	8008fdc <print_ckks_mempool_size+0x54>
    }
}
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	3730      	adds	r7, #48	; 0x30
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	0800fe6c 	.word	0x0800fe6c
 8009014:	0800fea0 	.word	0x0800fea0

08009018 <add_uint32>:
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
    *res = op1 + op2;
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	441a      	add	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]
    return (uint8_t)(*res < op1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	429a      	cmp	r2, r3
 8009036:	bf8c      	ite	hi
 8009038:	2301      	movhi	r3, #1
 800903a:	2300      	movls	r3, #0
 800903c:	b2db      	uxtb	r3, r3
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <mul_uint32_wide>:
{
 800904a:	b4b0      	push	{r4, r5, r7}
 800904c:	b087      	sub	sp, #28
 800904e:	af00      	add	r7, sp, #0
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	607a      	str	r2, [r7, #4]
    uint64_t res_temp = (uint64_t)op1 * (uint64_t)op2;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4618      	mov	r0, r3
 800905a:	f04f 0100 	mov.w	r1, #0
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	461a      	mov	r2, r3
 8009062:	f04f 0300 	mov.w	r3, #0
 8009066:	fb02 f501 	mul.w	r5, r2, r1
 800906a:	fb00 f403 	mul.w	r4, r0, r3
 800906e:	442c      	add	r4, r5
 8009070:	fba0 2302 	umull	r2, r3, r0, r2
 8009074:	18e1      	adds	r1, r4, r3
 8009076:	460b      	mov	r3, r1
 8009078:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800907c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    res[0]            = (uint32_t)(res_temp & 0xFFFFFFFF);
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	601a      	str	r2, [r3, #0]
    res[1]            = (uint32_t)((res_temp >> 32) & 0xFFFFFFFF);
 8009086:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	f04f 0300 	mov.w	r3, #0
 8009092:	000a      	movs	r2, r1
 8009094:	2300      	movs	r3, #0
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	3104      	adds	r1, #4
 800909a:	4613      	mov	r3, r2
 800909c:	600b      	str	r3, [r1, #0]
}
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bcb0      	pop	{r4, r5, r7}
 80090a6:	4770      	bx	lr

080090a8 <mul_uint32_high>:
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
    mul_uint32_wide(op1, op2, res);
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	461a      	mov	r2, r3
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff ffc5 	bl	800904a <mul_uint32_wide>
    return res[1];
 80090c0:	68fb      	ldr	r3, [r7, #12]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <add_uint_nocarry>:
{
 80090ca:	b480      	push	{r7}
 80090cc:	b085      	sub	sp, #20
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
    *res = op1 + op2;
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	441a      	add	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	601a      	str	r2, [r3, #0]
}
 80090e0:	bf00      	nop
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <mul_uint_wide>:
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
    return mul_uint32_wide(op1, op2, res);
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	68b9      	ldr	r1, [r7, #8]
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff ffa4 	bl	800904a <mul_uint32_wide>
}
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <shift_result>:
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
    ZZsign is_2q = (ZZsign)(input >= q);
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	bf2c      	ite	cs
 800911a:	2301      	movcs	r3, #1
 800911c:	2300      	movcc	r3, #0
 800911e:	b2db      	uxtb	r3, r3
 8009120:	60fb      	str	r3, [r7, #12]
    ZZ mask = (ZZ)(-is_2q);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	425b      	negs	r3, r3
 8009126:	60bb      	str	r3, [r7, #8]
    return (ZZ)(input) - (q & mask);
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4013      	ands	r3, r2
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	1ad3      	subs	r3, r2, r3
}
 8009132:	4618      	mov	r0, r3
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr

0800913e <barrett_reduce_64input_32modulus>:
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b090      	sub	sp, #64	; 0x40
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	6039      	str	r1, [r7, #0]
    const uint32_t *const_ratio = modulus->const_ratio;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	3304      	adds	r3, #4
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t right_hw = mul_uint32_high(input[0], const_ratio[0]);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f7ff ffa5 	bl	80090a8 <mul_uint32_high>
 800915e:	63b8      	str	r0, [r7, #56]	; 0x38
    mul_uint32_wide(input[0], const_ratio[1], middle_temp);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009166:	3304      	adds	r3, #4
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f107 021c 	add.w	r2, r7, #28
 800916e:	4619      	mov	r1, r3
 8009170:	f7ff ff6b 	bl	800904a <mul_uint32_wide>
    uint32_t middle_lw_carry = add_uint32(right_hw, middle_temp[0], &middle_lw);
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f107 0218 	add.w	r2, r7, #24
 800917a:	4619      	mov	r1, r3
 800917c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800917e:	f7ff ff4b 	bl	8009018 <add_uint32>
 8009182:	4603      	mov	r3, r0
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t middle_hw       = middle_temp[1] + middle_lw_carry;
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800918a:	4413      	add	r3, r2
 800918c:	633b      	str	r3, [r7, #48]	; 0x30
    mul_uint32_wide(input[1], const_ratio[0], middle2_temp);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3304      	adds	r3, #4
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f107 0210 	add.w	r2, r7, #16
 800919c:	4619      	mov	r1, r3
 800919e:	f7ff ff54 	bl	800904a <mul_uint32_wide>
    uint32_t middle2_lw_carry = add_uint32(middle_lw, middle2_temp[0], &middle2_lw);
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	6939      	ldr	r1, [r7, #16]
 80091a6:	f107 020c 	add.w	r2, r7, #12
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff ff34 	bl	8009018 <add_uint32>
 80091b0:	4603      	mov	r3, r0
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t middle2_hw       = middle2_temp[1] + middle2_lw_carry;  // We don't need the carry
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b8:	4413      	add	r3, r2
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t tmp = input[1] * const_ratio[1] + middle_hw + middle2_hw;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3304      	adds	r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091c4:	3204      	adds	r2, #4
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	fb02 f203 	mul.w	r2, r2, r3
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	4413      	add	r3, r2
 80091d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d2:	4413      	add	r3, r2
 80091d4:	627b      	str	r3, [r7, #36]	; 0x24
    tmp = input[0] - tmp * modulus->value;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
    return shift_result(tmp, modulus->value);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4619      	mov	r1, r3
 80091ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091f0:	f7ff ff8a 	bl	8009108 <shift_result>
 80091f4:	4603      	mov	r3, r0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3740      	adds	r7, #64	; 0x40
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <barrett_reduce_wide>:
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b082      	sub	sp, #8
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
    return barrett_reduce_64input_32modulus(input, modulus);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff ff97 	bl	800913e <barrett_reduce_64input_32modulus>
 8009210:	4603      	mov	r3, r0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <add_mod>:
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
    ZZ q_val = q->value;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	617b      	str	r3, [r7, #20]
    add_uint_nocarry(op1, op2, &sum);  // We don't need the carry
 800922c:	f107 0310 	add.w	r3, r7, #16
 8009230:	461a      	mov	r2, r3
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f7ff ff48 	bl	80090ca <add_uint_nocarry>
    return shift_result(sum, q_val);
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6979      	ldr	r1, [r7, #20]
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff ff62 	bl	8009108 <shift_result>
 8009244:	4603      	mov	r3, r0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <add_mod_inpl>:
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	607a      	str	r2, [r7, #4]
    se_assert(op1 && ((op1[0] + op2) <= (2 * q->value - 1)));
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <add_mod_inpl+0x26>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	441a      	add	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	3b01      	subs	r3, #1
 8009270:	429a      	cmp	r2, r3
 8009272:	bf00      	nop
    op1[0] = add_mod(op1[0], op2, q);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	68b9      	ldr	r1, [r7, #8]
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff ffcc 	bl	800921a <add_mod>
 8009282:	4602      	mov	r2, r0
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <neg_mod>:
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
    ZZsign non_zero = (ZZsign)(op != 0);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	60fb      	str	r3, [r7, #12]
    ZZ mask         = (ZZ)(-non_zero);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	425b      	negs	r3, r3
 80092ac:	60bb      	str	r3, [r7, #8]
    return (q->value - op) & mask;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	1ad2      	subs	r2, r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	4013      	ands	r3, r2
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <neg_mod_inpl>:
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
    se_assert(op && op[0] <= q->value);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d005      	beq.n	80092e2 <neg_mod_inpl+0x1c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	bf00      	nop
    op[0] = neg_mod(op[0], q);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff ffd1 	bl	8009290 <neg_mod>
 80092ee:	4602      	mov	r2, r0
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <mul_mod>:
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
    mul_uint_wide(op1, op2, product);
 8009308:	f107 0310 	add.w	r3, r7, #16
 800930c:	461a      	mov	r2, r3
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff feeb 	bl	80090ec <mul_uint_wide>
    return barrett_reduce_wide(product, q);
 8009316:	f107 0310 	add.w	r3, r7, #16
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff ff6e 	bl	80091fe <barrett_reduce_wide>
 8009322:	4603      	mov	r3, r0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <poly_add_mod_inpl>:
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
    for (PolySizeType i = 0; i < n; i++) { add_mod_inpl(&(p1[i]), p2[i], mod); }
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	e00f      	b.n	8009360 <poly_add_mod_inpl+0x34>
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	18d0      	adds	r0, r2, r3
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	4413      	add	r3, r2
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4619      	mov	r1, r3
 8009356:	f7ff ff7a 	bl	800924e <add_mod_inpl>
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	3301      	adds	r3, #1
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	429a      	cmp	r2, r3
 8009366:	d3eb      	bcc.n	8009340 <poly_add_mod_inpl+0x14>
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <poly_neg_mod_inpl>:
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b086      	sub	sp, #24
 8009376:	af00      	add	r7, sp, #0
 8009378:	60f8      	str	r0, [r7, #12]
 800937a:	60b9      	str	r1, [r7, #8]
 800937c:	607a      	str	r2, [r7, #4]
    for (PolySizeType i = 0; i < n; i++) { neg_mod_inpl(&(p1[i]), mod); }
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	e00a      	b.n	800939a <poly_neg_mod_inpl+0x28>
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff ff99 	bl	80092c6 <neg_mod_inpl>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	3301      	adds	r3, #1
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d3f0      	bcc.n	8009384 <poly_neg_mod_inpl+0x12>
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <poly_pointwise_mul_mod>:
{
 80093ac:	b590      	push	{r4, r7, lr}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
    for (PolySizeType i = 0; i < n; i++) { res[i] = mul_mod(p1[i], p2[i], mod); }
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	e015      	b.n	80093ec <poly_pointwise_mul_mod+0x40>
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4413      	add	r3, r2
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	4413      	add	r3, r2
 80093d2:	6819      	ldr	r1, [r3, #0]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093da:	18d4      	adds	r4, r2, r3
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	f7ff ff8d 	bl	80092fc <mul_mod>
 80093e2:	4603      	mov	r3, r0
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	3301      	adds	r3, #1
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d3e5      	bcc.n	80093c0 <poly_pointwise_mul_mod+0x14>
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop
 80093f8:	371c      	adds	r7, #28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd90      	pop	{r4, r7, pc}

080093fe <poly_pointwise_mul_mod_inpl>:
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af02      	add	r7, sp, #8
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	603b      	str	r3, [r7, #0]
    poly_pointwise_mul_mod(p1, p2, n, mod, p1);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7ff ffc8 	bl	80093ac <poly_pointwise_mul_mod>
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <poly_mult_mod_ntt_form_inpl>:
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
    poly_pointwise_mul_mod_inpl(a, b, n, mod);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7ff ffe0 	bl	80093fe <poly_pointwise_mul_mod_inpl>
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <ckks_get_mempool_size_sym>:
#include "uintmodarith.h"
#include "util_print.h"

#ifdef SE_USE_MALLOC
size_t ckks_get_mempool_size_sym(size_t degree)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
    se_assert(degree >= 16);
    if (degree == SE_DEGREE_N) return MEMPOOL_SIZE_sym;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009454:	d102      	bne.n	800945c <ckks_get_mempool_size_sym+0x16>
 8009456:	f44f 3381 	mov.w	r3, #66048	; 0x10200
 800945a:	e00f      	b.n	800947c <ckks_get_mempool_size_sym+0x36>
    size_t n            = degree;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60fb      	str	r3, [r7, #12]
    size_t mempool_size = 4 * n;  // minimum
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	60bb      	str	r3, [r7, #8]
    mempool_size += n;
#elif defined(SE_NTT_FAST)
    mempool_size += 2 * n;
#endif
#else
    mempool_size += 4 * n;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	4413      	add	r3, r2
 800946e:	60bb      	str	r3, [r7, #8]
    defined(SE_INDEX_MAP_LOAD_PERSIST_SYM_LOAD_ASYM) || defined(SE_SK_INDEX_MAP_SHARED)
    mempool_size += n / 2;
#endif

#ifdef SE_SK_PERSISTENT
    mempool_size += n / 16;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	091b      	lsrs	r3, r3, #4
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	4413      	add	r3, r2
 8009478:	60bb      	str	r3, [r7, #8]
#ifdef SE_MEMPOOL_ALLOC_VALUES
    mempool_size += n / 2;
#endif

    se_assert(mempool_size);
    return mempool_size;
 800947a:	68bb      	ldr	r3, [r7, #8]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <ckks_mempool_setup_sym>:

ZZ *ckks_mempool_setup_sym(size_t degree)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
    size_t mempool_size = ckks_get_mempool_size_sym(degree);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff ffd8 	bl	8009446 <ckks_get_mempool_size_sym>
 8009496:	60f8      	str	r0, [r7, #12]
    ZZ *mempool         = calloc(mempool_size, sizeof(ZZ));
 8009498:	2104      	movs	r1, #4
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f004 ffe8 	bl	800e470 <calloc>
 80094a0:	4603      	mov	r3, r0
 80094a2:	60bb      	str	r3, [r7, #8]
    // printf("mempool_size: %zu\n", mempool_size);
    if (!mempool)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d105      	bne.n	80094b6 <ckks_mempool_setup_sym+0x2e>
    {
        printf("Error! Allocation failed. Exiting...\n");
 80094aa:	4808      	ldr	r0, [pc, #32]	; (80094cc <ckks_mempool_setup_sym+0x44>)
 80094ac:	f005 f992 	bl	800e7d4 <puts>
        exit(1);
 80094b0:	2001      	movs	r0, #1
 80094b2:	f004 ffeb 	bl	800e48c <exit>
    }
    se_assert(mempool_size && mempool);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <ckks_mempool_setup_sym+0x3a>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bf00      	nop
    return mempool;
 80094c2:	68bb      	ldr	r3, [r7, #8]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	0800fed4 	.word	0x0800fed4

080094d0 <ckks_set_ptrs_sym>:
#endif

void ckks_set_ptrs_sym(size_t degree, ZZ *mempool, SE_PTRS *se_ptrs)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b08d      	sub	sp, #52	; 0x34
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
    se_assert(mempool && se_ptrs);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <ckks_set_ptrs_sym+0x18>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bf00      	nop
    const size_t n = degree;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    // -- First, set everything to set size or 0
    se_ptrs->conj_vals         = (double complex *)mempool;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	601a      	str	r2, [r3, #0]
    se_ptrs->conj_vals_int_ptr = (int64_t *)mempool;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	611a      	str	r2, [r3, #16]
    se_ptrs->c1_ptr            = &(mempool[2 * n]);
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	441a      	add	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	619a      	str	r2, [r3, #24]
    se_ptrs->c0_ptr            = &(mempool[3 * n]);
 8009504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009506:	4613      	mov	r3, r2
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	461a      	mov	r2, r3
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	441a      	add	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	615a      	str	r2, [r3, #20]
    se_ptrs->ntt_pte_ptr       = &(mempool[2 * n]);
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	441a      	add	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	625a      	str	r2, [r3, #36]	; 0x24

    se_ptrs->ternary       = &(mempool[3 * n]);  // default: SE_SK_NOT_PERSISTENT
 8009524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009526:	4613      	mov	r3, r2
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	461a      	mov	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	441a      	add	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	60da      	str	r2, [r3, #12]
    se_ptrs->ifft_roots    = 0;                  // default: SE_IFFT_OTF
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	605a      	str	r2, [r3, #4]
    se_ptrs->index_map_ptr = 0;                  // default: SE_INDEX_MAP_OTF
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	61da      	str	r2, [r3, #28]
    se_ptrs->ntt_roots_ptr = 0;                  // default: SE_NTT_OTF
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	621a      	str	r2, [r3, #32]
    se_ptrs->values        = 0;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	609a      	str	r2, [r3, #8]

    // -- Sizes
    size_t ifft_roots_size        = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t ntt_roots_size         = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
    size_t index_map_persist_size = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	623b      	str	r3, [r7, #32]
    size_t s_persist_size         = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	61fb      	str	r3, [r7, #28]

    // -- Set ifft_roots based on IFFT type
#ifndef SE_IFFT_OTF
    ifft_roots_size      = 4 * n;
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	62bb      	str	r3, [r7, #40]	; 0x28
    se_ptrs->ifft_roots  = (double complex *)&(mempool[4 * n]);
 8009566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	441a      	add	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	605a      	str	r2, [r3, #4]
    se_ptrs->ntt_pte_ptr = &(mempool[6 * n]);
 8009572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009574:	4613      	mov	r3, r2
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	4413      	add	r3, r2
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	461a      	mov	r2, r3
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	441a      	add	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	625a      	str	r2, [r3, #36]	; 0x24
#endif

    // -- Set ntt_roots based on NTT type
#if defined(SE_NTT_ONE_SHOT) || defined(SE_NTT_REG)
    ntt_roots_size         = n;
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
    se_ptrs->ntt_roots_ptr = &(mempool[4 * n]);
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	441a      	add	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	621a      	str	r2, [r3, #32]
#elif defined(SE_NTT_FAST)
    ntt_roots_size         = 2 * n;
    se_ptrs->ntt_roots_ptr = &(mempool[4 * n]);
#endif

    size_t total_block2_size = ifft_roots_size ? ifft_roots_size : ntt_roots_size;
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <ckks_set_ptrs_sym+0xd0>
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	e000      	b.n	80095a2 <ckks_set_ptrs_sym+0xd2>
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	61bb      	str	r3, [r7, #24]

    // -- Set pi inverse based on index map type
#if defined(SE_INDEX_MAP_LOAD)
    se_ptrs->index_map_ptr = (uint16_t *)(&(mempool[4 * n]));  // 16n / sizeof(ZZ) = 4n
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	441a      	add	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	61da      	str	r2, [r3, #28]
    se_ptrs->index_map_ptr = (uint16_t *)(&(mempool[4 * n + total_block2_size]));
    index_map_persist_size = n / 2;
#endif

#ifdef SE_SK_PERSISTENT
    s_persist_size   = n / 16;
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	091b      	lsrs	r3, r3, #4
 80095b4:	61fb      	str	r3, [r7, #28]
    se_ptrs->ternary = &(mempool[4 * n + total_block2_size + index_map_persist_size]);
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	009a      	lsls	r2, r3, #2
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	441a      	add	r2, r3
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	441a      	add	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60da      	str	r2, [r3, #12]
#ifdef SE_MEMPOOL_ALLOC_VALUES
    se_ptrs->values =
        (flpt *)&(mempool[4 * n + total_block2_size + index_map_persist_size + s_persist_size]);
#endif

    size_t address_size = 4;
 80095cc:	2304      	movs	r3, #4
 80095ce:	617b      	str	r3, [r7, #20]
    //se_print_relative_positions(mempool, se_ptrs, n, 1);
#else
    se_print_addresses(mempool, se_ptrs);
    se_print_relative_positions(mempool, se_ptrs);
#endif
}
 80095d0:	bf00      	nop
 80095d2:	3734      	adds	r7, #52	; 0x34
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <ckks_setup_s>:

void ckks_setup_s(const Parms *parms, uint8_t *seed, SE_PRNG *prng, ZZ *s)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
    // -- Keep s in small form until a later point, so we can store in
    //    separate memory in compressed form
    if (parms->sample_s)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <ckks_setup_s+0x30>
    {
        se_assert(prng);
        prng_randomize_reset(prng, seed);
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f004 f918 	bl	800d82c <prng_randomize_reset>
        sample_small_poly_ternary_prng_96(parms->coeff_count, prng, s);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4618      	mov	r0, r3
 8009606:	f004 fbee 	bl	800dde6 <sample_small_poly_ternary_prng_96>
    else
    {
        SE_UNUSED(prng);
        load_sk(parms, s);
    }
}
 800960a:	e003      	b.n	8009614 <ckks_setup_s+0x38>
        load_sk(parms, s);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f994 	bl	800993c <load_sk>
}
 8009614:	bf00      	nop
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <ckks_sym_init>:

void ckks_sym_init(const Parms *parms, uint8_t *share_seed, uint8_t *seed, SE_PRNG *shareable_prng,
                   SE_PRNG *prng, int64_t *conj_vals_int)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
    // -- (If seeds are !NULL, seeds will be used to seed prng instead of a random value.)
    // -- The seed associated with the prng used to sample 'a' can be shared
    // -- NOTE: The re-randomization is not strictly necessary if counter has not wrapped around
    //    and we share both the seed and starting counter value with the server
    //    for the shareable part.
    prng_randomize_reset(shareable_prng, share_seed);  // Used for 'a'
 800962a:	68b9      	ldr	r1, [r7, #8]
 800962c:	6838      	ldr	r0, [r7, #0]
 800962e:	f004 f8fd 	bl	800d82c <prng_randomize_reset>
    prng_randomize_reset(prng, seed);                  // Used for error
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	69b8      	ldr	r0, [r7, #24]
 8009636:	f004 f8f9 	bl	800d82c <prng_randomize_reset>

    // -- Sample ep and add it to the signed pt.
    // -- This prng's seed value should not be shared.
    sample_add_poly_cbd_generic_inpl_prng_16(conj_vals_int, parms->coeff_count, prng);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	4619      	mov	r1, r3
 8009642:	69f8      	ldr	r0, [r7, #28]
 8009644:	f004 fcf0 	bl	800e028 <sample_add_poly_cbd_generic_inpl_prng_16>
}
 8009648:	bf00      	nop
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <ckks_encode_encrypt_sym>:

void ckks_encode_encrypt_sym(const Parms *parms, const int64_t *conj_vals_int,
                             const int8_t *ep_small, SE_PRNG *shareable_prng, ZZ *s_small,
                             ZZ *ntt_pte, ZZ *ntt_roots, ZZ *c0_s, ZZ *c1, ZZ *s_save, ZZ *c1_save)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]
#endif

    // ==============================================================
    //   Generate ciphertext: (c[1], c[0]) = (a, [-a*s + m + e]_Rq)
    // ==============================================================
    const PolySizeType n = parms->coeff_count;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	617b      	str	r3, [r7, #20]
    const Modulus *mod   = parms->curr_modulus;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	613b      	str	r3, [r7, #16]

    // ----------------------
    //     c1 = a <--- U
    // ----------------------
    sample_poly_uniform(parms, shareable_prng, c1);
 800966a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f004 fa32 	bl	800dad8 <sample_poly_uniform>
    // print_poly("rlwe a(c1)", c1, n);

#ifndef SE_DISABLE_TESTING_CAPABILITY
    se_assert(conj_vals_int || ep_small);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <ckks_encode_encrypt_sym+0x2e>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	bf00      	nop
    // -- At this point, it is safe to send c1 away. This will allow us to re-use c1's memory.
    //    However, we may be debugging and need to store c1 somewhere for debugging later.
    // -- Note: This method provides very little memory savings overall, so isn't necessary to use.
    if (c1_save) memcpy(c1_save, c1, n * sizeof(ZZ));
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	2b00      	cmp	r3, #0
 8009684:	d006      	beq.n	8009694 <ckks_encode_encrypt_sym+0x44>
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	461a      	mov	r2, r3
 800968c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800968e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009690:	f004 ff34 	bl	800e4fc <memcpy>
    // print_poly_small("s (small)", s_small, parms->coeff_count);

    // -- Expand and store s in c0
    // print_poly_uint8_full("s (small)", (uint8_t*)s_small, parms->coeff_count/4);
    // print_poly_small_full("s (small)", s_small, parms->coeff_count);
    expand_poly_ternary(s_small, parms, c0_s);
 8009694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009696:	68f9      	ldr	r1, [r7, #12]
 8009698:	6a38      	ldr	r0, [r7, #32]
 800969a:	f004 fae6 	bl	800dc6a <expand_poly_ternary>
    //    First calculate ntt(s) and store in c0_s. Note that this will load
    //    the ntt roots into ntt_roots memory as well (used later for
    //    calculating ntt(pte))

    // -- Note: Calling ntt_roots_initialize will do nothing if SE_NTT_OTF is defined
    ntt_roots_initialize(parms, ntt_roots);
 800969e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f003 fe28 	bl	800d2f6 <ntt_roots_initialize>
    ntt_inpl(parms, ntt_roots, c0_s);
 80096a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f003 febd 	bl	800d42a <ntt_inpl>
#ifndef SE_DISABLE_TESTING_CAPABILITY
    // -- Save ntt(reduced(s)) for later decryption
    // print_poly_ternary("s (ntt)", c0_s, parms->coeff_count, false);
    if (s_save) memcpy(s_save, c0_s, n * sizeof(c0_s[0]));
 80096b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d006      	beq.n	80096c4 <ckks_encode_encrypt_sym+0x74>
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	461a      	mov	r2, r3
 80096bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80096c0:	f004 ff1c 	bl	800e4fc <memcpy>
        // print_poly_ternary("s_save (ntt)", s_save, parms->coeff_count, false);
#endif
    poly_mult_mod_ntt_form_inpl(c0_s, c1, n, mod);
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096cc:	f7ff feaa 	bl	8009424 <poly_mult_mod_ntt_form_inpl>
    // print_poly("rlwe a*s  ", c0_s, n);

    // -- Negate [a*s]_Rq to get [-a*s]_Rq
    poly_neg_mod_inpl(c0_s, n, mod);
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	6979      	ldr	r1, [r7, #20]
 80096d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d6:	f7ff fe4c 	bl	8009372 <poly_neg_mod_inpl>
    // print_poly("rlwe -a*s ", c0_s, n);

    // -- Calculate reduce(m + e) == reduce(conj_vals_int) ---> store in ntt_pte
#ifndef SE_DISABLE_TESTING_CAPABILITY
    if (ep_small)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <ckks_encode_encrypt_sym+0x9c>
        reduce_set_e_small(parms, ep_small, ntt_pte);
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff fa50 	bl	8008b8a <reduce_set_e_small>
 80096ea:	e004      	b.n	80096f6 <ckks_encode_encrypt_sym+0xa6>
    else
#endif
        reduce_set_pte(parms, conj_vals_int, ntt_pte);
 80096ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff fa20 	bl	8008b36 <reduce_set_pte>
    // print_poly("red(pte)", ntt_pte, parms->coeff_count);

    // -- Calculate ntt(m + e) = ntt(reduce(conj_vals_int)) = ntt(ntt_pte)
    //    and store result in ntt_pte. Note: ntt roots (if required) should already be
    //    loaded from above
    ntt_inpl(parms, ntt_roots, ntt_pte);
 80096f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f003 fe95 	bl	800d42a <ntt_inpl>
    // -- Debugging
    // intt_roots_initialize(parms, ntt_roots);
    // intt(parms, ntt_roots, ntt_pte);
    // print_poly_full("intt(ntt(pte))", ntt_pte, parms->coeff_count);

    poly_add_mod_inpl(c0_s, ntt_pte, n, mod);
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009708:	f7ff fe10 	bl	800932c <poly_add_mod_inpl>
    // print_poly("a*s + m + e (ntt form)", c0_s, n);
}
 800970c:	bf00      	nop
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <ckks_next_prime_sym>:

bool ckks_next_prime_sym(Parms *parms, ZZ *s)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
    se_assert(parms && !parms->is_asymmetric);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d007      	beq.n	8009734 <ckks_next_prime_sym+0x20>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800972a:	f083 0301 	eor.w	r3, r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	bf00      	nop

    if (!parms->small_s) convert_poly_ternary_inpl(s, parms);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800973a:	f083 0301 	eor.w	r3, r3, #1
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d003      	beq.n	800974c <ckks_next_prime_sym+0x38>
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	6838      	ldr	r0, [r7, #0]
 8009748:	f004 faf0 	bl	800dd2c <convert_poly_ternary_inpl>

    // -- Update curr_modulus_idx to next index
    bool ret = next_modulus(parms);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f003 feaf 	bl	800d4b0 <next_modulus>
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
    return ret;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <ifft_inpl>:
        // ifft_roots[i] = se_conj(calc_root_otf(bitrev(i - 1, logn) + 1, m));
    }
}

void ifft_inpl(double complex *vec, size_t n, size_t logn, const double complex *roots)
{
 8009760:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8009764:	ed2d 8b02 	vpush	{d8}
 8009768:	b0a5      	sub	sp, #148	; 0x94
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]
#if defined(SE_IFFT_LOAD_FULL) || defined(SE_IFFT_ONE_SHOT)
    se_assert(roots);
    size_t root_idx = 1;
 8009774:	2301      	movs	r3, #1
 8009776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
           j = 0, k = [0-2), butterfly pairs: (0, 2), (1, 3)
           j = 1, k = [4-6), butterfly pairs: (4, 6), (5, 7)
         Round 2: tt = 4, h = 1
           j = 0, k = [0-4), butterfly pairs: (0, 4), (1, 5), (2, 6), (3, 7)
    */
    size_t tt = 1;                                      // size of butterflies
 800977a:	2301      	movs	r3, #1
 800977c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    size_t h  = n / 2;                                  // number of groups
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for (size_t i = 0; i < logn; i++, tt *= 2, h /= 2)  // rounds
 8009788:	2300      	movs	r3, #0
 800978a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800978e:	e0c6      	b.n	800991e <ifft_inpl+0x1be>
    {
        for (size_t j = 0, kstart = 0; j < h; j++, kstart += 2 * tt)  // groups
 8009790:	2300      	movs	r3, #0
 8009792:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009794:	2300      	movs	r3, #0
 8009796:	67bb      	str	r3, [r7, #120]	; 0x78
 8009798:	e0ac      	b.n	80098f4 <ifft_inpl+0x194>
        {
#if defined(SE_IFFT_LOAD_FULL) || defined(SE_IFFT_ONE_SHOT)
            // -- The roots are assumed to be stored in a bit-reversed order
            //    in this case so that memory accesses are consecutive.
            double complex s = roots[root_idx++];
 800979a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	18d1      	adds	r1, r2, r3
 80097aa:	e9d1 2300 	ldrd	r2, r3, [r1]
 80097ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80097b2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80097b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80097ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80097be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80097c2:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 80097c6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            double complex s = se_conj(calc_root_otf(bitrev(h + j, logn), m));  // pairs
#else
            printf("Error! IFFT option not found!\n");
            exit(1);
#endif
            for (size_t k = kstart; k < (kstart + tt); k++)
 80097ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097cc:	677b      	str	r3, [r7, #116]	; 0x74
 80097ce:	e080      	b.n	80098d2 <ifft_inpl+0x172>
            {
                // -- Use doubles to preserve precision
                double complex u = vec[k];
 80097d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097d2:	011b      	lsls	r3, r3, #4
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	18d1      	adds	r1, r2, r3
 80097d8:	e9d1 2300 	ldrd	r2, r3, [r1]
 80097dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80097e0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80097e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80097e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80097f0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 80097f4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
                double complex v = vec[k + tt];
 80097f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80097fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097fe:	4413      	add	r3, r2
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	18d1      	adds	r1, r2, r3
 8009806:	e9d1 2300 	ldrd	r2, r3, [r1]
 800980a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800980e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8009812:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009816:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800981a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800981e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8009822:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
                vec[k]           = u + v;
 8009826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009828:	011b      	lsls	r3, r3, #4
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	18d4      	adds	r4, r2, r3
 800982e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009836:	f7f6 fd41 	bl	80002bc <__adddf3>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4690      	mov	r8, r2
 8009840:	4699      	mov	r9, r3
 8009842:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009846:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800984a:	f7f6 fd37 	bl	80002bc <__adddf3>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	e9c4 8900 	strd	r8, r9, [r4]
 8009856:	e9c4 2302 	strd	r2, r3, [r4, #8]
                vec[k + tt]      = (u - v) * s;
 800985a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800985e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009862:	f7f6 fd29 	bl	80002b8 <__aeabi_dsub>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	ec43 2b18 	vmov	d8, r2, r3
 800986e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009872:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009876:	f7f6 fd1f 	bl	80002b8 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	ec43 2b17 	vmov	d7, r2, r3
 8009882:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009888:	4413      	add	r3, r2
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	18d4      	adds	r4, r2, r3
 8009890:	eeb0 3a47 	vmov.f32	s6, s14
 8009894:	eef0 3a67 	vmov.f32	s7, s15
 8009898:	eeb0 2a48 	vmov.f32	s4, s16
 800989c:	eef0 2a68 	vmov.f32	s5, s17
 80098a0:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80098a4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80098a8:	f7f7 f9a6 	bl	8000bf8 <__muldc3>
 80098ac:	eeb0 6a40 	vmov.f32	s12, s0
 80098b0:	eef0 6a60 	vmov.f32	s13, s1
 80098b4:	eeb0 7a41 	vmov.f32	s14, s2
 80098b8:	eef0 7a61 	vmov.f32	s15, s3
 80098bc:	ec51 0b16 	vmov	r0, r1, d6
 80098c0:	ec53 2b17 	vmov	r2, r3, d7
 80098c4:	e9c4 0100 	strd	r0, r1, [r4]
 80098c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
            for (size_t k = kstart; k < (kstart + tt); k++)
 80098cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ce:	3301      	adds	r3, #1
 80098d0:	677b      	str	r3, [r7, #116]	; 0x74
 80098d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098d8:	4413      	add	r3, r2
 80098da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80098dc:	429a      	cmp	r2, r3
 80098de:	f4ff af77 	bcc.w	80097d0 <ifft_inpl+0x70>
        for (size_t j = 0, kstart = 0; j < h; j++, kstart += 2 * tt)  // groups
 80098e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098e4:	3301      	adds	r3, #1
 80098e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098f0:	4413      	add	r3, r2
 80098f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80098f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80098f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098fa:	429a      	cmp	r2, r3
 80098fc:	f4ff af4d 	bcc.w	800979a <ifft_inpl+0x3a>
    for (size_t i = 0; i < logn; i++, tt *= 2, h /= 2)  // rounds
 8009900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009904:	3301      	adds	r3, #1
 8009906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800990a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800991e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	f4ff af33 	bcc.w	8009790 <ifft_inpl+0x30>
            }
        }
    }
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	3794      	adds	r7, #148	; 0x94
 8009930:	46bd      	mov	sp, r7
 8009932:	ecbd 8b02 	vpop	{d8}
 8009936:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
	...

0800993c <load_sk>:
    check_ret(ret, -1, fpath);
}
#endif

void load_sk(const Parms *parms, ZZ *s)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
    se_assert(parms && s);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <load_sk+0x16>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	bf00      	nop
    size_t n = parms->coeff_count;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]

    // -- Image will always be in small form (2 bits per coeff)
    size_t bytes_expected = n / 4;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	089b      	lsrs	r3, r3, #2
 800995c:	60bb      	str	r3, [r7, #8]
    while (1)
        ;
#elif defined(SE_DATA_FROM_CODE_COPY)
    // uint8_t *sk_bytes = (uint8_t*)s;
    // for(size_t i = 0; i < bytes_expected; i++) sk_bytes[i] = secret_key[i];
    memcpy(s, &(secret_key[0]), bytes_expected);
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	4903      	ldr	r1, [pc, #12]	; (8009970 <load_sk+0x34>)
 8009962:	6838      	ldr	r0, [r7, #0]
 8009964:	f004 fdca 	bl	800e4fc <memcpy>
    return;
 8009968:	bf00      	nop
    char fpath[MAX_FPATH_SIZE];
    snprintf(fpath, MAX_FPATH_SIZE, "%s/sk_%zu.dat", SE_DATA_PATH, n);
    // printf("Retrieving secret key from file located at: %s\n", fpath);
    read_from_image(fpath, bytes_expected, s);
#endif
}
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	0800ffd0 	.word	0x0800ffd0

08009974 <load_pki>:

void load_pki(size_t i, const Parms *parms, ZZ *pki)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
    se_assert(i == 0 || i == 1);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <load_pki+0x16>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b01      	cmp	r3, #1
 800998a:	bf00      	nop
    se_assert(parms && pki);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <load_pki+0x24>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	bf00      	nop

    size_t n    = parms->coeff_count;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	617b      	str	r3, [r7, #20]
    size_t midx = parms->curr_modulus_idx;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	613b      	str	r3, [r7, #16]
    printf("Error! Pk data must be defined\n");
    while (1)
        ;
#elif defined(SE_DATA_FROM_CODE_COPY)
    // for(size_t k = 0; k < n; k++) pki[j] = pk_addr[k];
    memcpy(pki, pk_prime_addr[midx][i], n * sizeof(ZZ));
 80099a4:	4908      	ldr	r1, [pc, #32]	; (80099c8 <load_pki+0x54>)
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	005a      	lsls	r2, r3, #1
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	461a      	mov	r2, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f004 fd9f 	bl	800e4fc <memcpy>
    snprintf(fpath, MAX_FPATH_SIZE, "%s/pk%zu_ntt_%zu_%" PRIuZZ ".dat", SE_DATA_PATH, i, n, q);
#endif

    read_from_image(fpath, n * sizeof(ZZ), pki);
#endif
}
 80099be:	bf00      	nop
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000030 	.word	0x20000030

080099cc <load_index_map>:

#if defined(SE_INDEX_MAP_LOAD) || defined(SE_INDEX_MAP_LOAD_PERSIST) || \
    defined(SE_INDEX_MAP_LOAD_PERSIST_SYM_LOAD_ASYM)
void load_index_map(const Parms *parms, uint16_t *index_map)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
    size_t n = parms->coeff_count;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60fb      	str	r3, [r7, #12]
#ifdef SE_DATA_FROM_CODE_COPY
    memcpy(index_map, &(index_map_store[0]), n * sizeof(uint16_t));
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	461a      	mov	r2, r3
 80099e2:	4904      	ldr	r1, [pc, #16]	; (80099f4 <load_index_map+0x28>)
 80099e4:	6838      	ldr	r0, [r7, #0]
 80099e6:	f004 fd89 	bl	800e4fc <memcpy>
#else
    char fpath[MAX_FPATH_SIZE];
    snprintf(fpath, MAX_FPATH_SIZE, "%s/index_map_%zu.dat", SE_DATA_PATH, n);
    read_from_image(fpath, n * sizeof(uint16_t), index_map);
#endif
}
 80099ea:	bf00      	nop
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	080c07d0 	.word	0x080c07d0

080099f8 <load_ifft_roots>:
#endif

#ifdef SE_IFFT_LOAD_FULL
void load_ifft_roots(size_t n, double complex *ifft_roots)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
        // double *t2_pd = (double*)(t2_p);
        // double t2_d = *t2_pd;
        // ifft_roots_double[i+1] = t2_d;
    }
    */
    memcpy(ifft_roots, ifft_roots_save, n * sizeof(double complex));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	011b      	lsls	r3, r3, #4
 8009a06:	461a      	mov	r2, r3
 8009a08:	4903      	ldr	r1, [pc, #12]	; (8009a18 <load_ifft_roots+0x20>)
 8009a0a:	6838      	ldr	r0, [r7, #0]
 8009a0c:	f004 fd76 	bl	800e4fc <memcpy>
    char fpath[MAX_FPATH_SIZE];
    snprintf(fpath, MAX_FPATH_SIZE, "%s/ifft_roots_%zu.dat", SE_DATA_PATH, n);
    // printf("Retrieving ifft_roots from file located at: %s\n", fpath);
    read_from_image(fpath, n * sizeof(double complex), ifft_roots);
#endif
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	080707d0 	.word	0x080707d0

08009a1c <load_ntt_roots>:
}
#endif

#ifdef SE_NTT_REG
void load_ntt_roots(const Parms *parms, ZZ *ntt_roots)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
    se_assert(parms && ntt_roots);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d002      	beq.n	8009a32 <load_ntt_roots+0x16>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	bf00      	nop
    size_t n    = parms->coeff_count;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	60fb      	str	r3, [r7, #12]
    size_t midx = parms->curr_modulus_idx;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	60bb      	str	r3, [r7, #8]
#ifdef SE_DATA_FROM_CODE_COPY
    // for(size_t i = 0; i < n; i++)
    // { ntt_roots[i] = ntt_roots_addr[midx][i]; }
    memcpy(ntt_roots, ntt_roots_addr[midx], n * sizeof(ZZ));
 8009a3e:	4a07      	ldr	r2, [pc, #28]	; (8009a5c <load_ntt_roots+0x40>)
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6838      	ldr	r0, [r7, #0]
 8009a4e:	f004 fd55 	bl	800e4fc <memcpy>
    char fpath[MAX_FPATH_SIZE];
    snprintf(fpath, MAX_FPATH_SIZE, "%s/ntt_roots_%zu_%" PRIuZZ ".dat", SE_DATA_PATH, n, q);
    // printf("Retrieving ntt roots from file located at: %s\n", fpath);
    read_from_image(fpath, n * sizeof(ZZ), ntt_roots);
#endif
}
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000060 	.word	0x20000060

08009a60 <keccak_absorb>:
 *              - size_t mlen:       length of input in bytes
 *              - uint8_t p:         domain-separation byte for different
 *Keccak-derived functions
 **************************************************/
static void keccak_absorb(uint64_t *s, uint32_t r, const uint8_t *m, size_t mlen, uint8_t p)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b0b8      	sub	sp, #224	; 0xe0
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
    size_t i;
    uint8_t t[200];

    while (mlen >= r)
 8009a6e:	e010      	b.n	8009a92 <keccak_absorb+0x32>
    {
        KeccakF1600_StateXORBytes(s, m, 0, r);
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f94f 	bl	8009d1a <KeccakF1600_StateXORBytes>
        KeccakF1600_StatePermute(s);
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 f997 	bl	8009db0 <KeccakF1600_StatePermute>
        mlen -= r;
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	603b      	str	r3, [r7, #0]
        m += r;
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	4413      	add	r3, r2
 8009a90:	607b      	str	r3, [r7, #4]
    while (mlen >= r)
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d2ea      	bcs.n	8009a70 <keccak_absorb+0x10>
    }

    for (i = 0; i < r; ++i) t[i] = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009aa0:	e00b      	b.n	8009aba <keccak_absorb+0x5a>
 8009aa2:	f107 0214 	add.w	r2, r7, #20
 8009aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aaa:	4413      	add	r3, r2
 8009aac:	2200      	movs	r2, #0
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009aba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d3ee      	bcc.n	8009aa2 <keccak_absorb+0x42>
    for (i = 0; i < mlen; ++i) t[i] = m[i];
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009aca:	e010      	b.n	8009aee <keccak_absorb+0x8e>
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ad2:	4413      	add	r3, r2
 8009ad4:	7819      	ldrb	r1, [r3, #0]
 8009ad6:	f107 0214 	add.w	r2, r7, #20
 8009ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ade:	4413      	add	r3, r2
 8009ae0:	460a      	mov	r2, r1
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae8:	3301      	adds	r3, #1
 8009aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009aee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d3e9      	bcc.n	8009acc <keccak_absorb+0x6c>
    t[i] = p;
 8009af8:	f107 0214 	add.w	r2, r7, #20
 8009afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b00:	4413      	add	r3, r2
 8009b02:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
 8009b06:	701a      	strb	r2, [r3, #0]
    t[r - 1] |= 128;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8009b10:	4413      	add	r3, r2
 8009b12:	f813 2ccc 	ldrb.w	r2, [r3, #-204]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8009b24:	440b      	add	r3, r1
 8009b26:	f803 2ccc 	strb.w	r2, [r3, #-204]

    KeccakF1600_StateXORBytes(s, t, 0, r);
 8009b2a:	f107 0114 	add.w	r1, r7, #20
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2200      	movs	r2, #0
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 f8f1 	bl	8009d1a <KeccakF1600_StateXORBytes>
}
 8009b38:	bf00      	nop
 8009b3a:	37e0      	adds	r7, #224	; 0xe0
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <keccak_squeezeblocks>:
 *              - size_t nblocks: number of blocks to be squeezed (written to h)
 *              - uint64_t *s:    pointer to in/output Keccak state
 *              - uint32_t r:     rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_squeezeblocks(uint8_t *h, size_t nblocks, uint64_t *s, uint32_t r)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
    while (nblocks > 0)
 8009b4e:	e00f      	b.n	8009b70 <keccak_squeezeblocks+0x30>
    {
        KeccakF1600_StatePermute(s);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f92d 	bl	8009db0 <KeccakF1600_StatePermute>
        KeccakF1600_StateExtractBytes(s, h, 0, r);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	68f9      	ldr	r1, [r7, #12]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f8a3 	bl	8009ca8 <KeccakF1600_StateExtractBytes>
        h += r;
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	4413      	add	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]
        nblocks--;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	60bb      	str	r3, [r7, #8]
    while (nblocks > 0)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1ec      	bne.n	8009b50 <keccak_squeezeblocks+0x10>
    }
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <shake256>:
 *              - size_t outlen:     requested output length in bytes
 *              - const uint8_t *in: pointer to input
 *              - size_t inlen:      length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen, const uint8_t *input, size_t inlen)
{
 8009b80:	b590      	push	{r4, r7, lr}
 8009b82:	b0dd      	sub	sp, #372	; 0x174
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	f107 040c 	add.w	r4, r7, #12
 8009b8a:	6020      	str	r0, [r4, #0]
 8009b8c:	f107 0008 	add.w	r0, r7, #8
 8009b90:	6001      	str	r1, [r0, #0]
 8009b92:	1d39      	adds	r1, r7, #4
 8009b94:	600a      	str	r2, [r1, #0]
 8009b96:	463a      	mov	r2, r7
 8009b98:	6013      	str	r3, [r2, #0]
    shake256ctx state;
    uint8_t t[SHAKE256_RATE];
    size_t nblocks = outlen / SHAKE256_RATE;
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a40      	ldr	r2, [pc, #256]	; (8009ca4 <shake256+0x124>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	09db      	lsrs	r3, r3, #7
 8009ba8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    size_t i;

    for (i = 0; i < 25; ++i) { state.ctx[i] = 0; }
 8009bac:	2300      	movs	r3, #0
 8009bae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009bb2:	e012      	b.n	8009bda <shake256+0x5a>
 8009bb4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f1a3 01d0 	sub.w	r1, r3, #208	; 0xd0
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	e9c1 2300 	strd	r2, r3, [r1]
 8009bd0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009bda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009bde:	2b18      	cmp	r3, #24
 8009be0:	d9e8      	bls.n	8009bb4 <shake256+0x34>

    /* Absorb input */
    keccak_absorb((uint64_t *)state.ctx, SHAKE256_RATE, input, inlen, 0x1F);
 8009be2:	463b      	mov	r3, r7
 8009be4:	1d3a      	adds	r2, r7, #4
 8009be6:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8009bea:	211f      	movs	r1, #31
 8009bec:	9100      	str	r1, [sp, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6812      	ldr	r2, [r2, #0]
 8009bf2:	2188      	movs	r1, #136	; 0x88
 8009bf4:	f7ff ff34 	bl	8009a60 <keccak_absorb>

    /* Squeeze output */
    keccak_squeezeblocks(output, nblocks, (uint64_t *)state.ctx, SHAKE256_RATE);
 8009bf8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009bfc:	f107 000c 	add.w	r0, r7, #12
 8009c00:	2388      	movs	r3, #136	; 0x88
 8009c02:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8009c06:	6800      	ldr	r0, [r0, #0]
 8009c08:	f7ff ff9a 	bl	8009b40 <keccak_squeezeblocks>

    output += nblocks * SHAKE256_RATE;
 8009c0c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8009c10:	4613      	mov	r3, r2
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	4413      	add	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	4619      	mov	r1, r3
 8009c1a:	f107 030c 	add.w	r3, r7, #12
 8009c1e:	f107 020c 	add.w	r2, r7, #12
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	440a      	add	r2, r1
 8009c26:	601a      	str	r2, [r3, #0]
    outlen -= nblocks * SHAKE256_RATE;
 8009c28:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	4413      	add	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	4619      	mov	r1, r3
 8009c36:	f107 0308 	add.w	r3, r7, #8
 8009c3a:	f107 0208 	add.w	r2, r7, #8
 8009c3e:	6812      	ldr	r2, [r2, #0]
 8009c40:	1a52      	subs	r2, r2, r1
 8009c42:	601a      	str	r2, [r3, #0]

    if (outlen)
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d024      	beq.n	8009c98 <shake256+0x118>
    {
        keccak_squeezeblocks(t, 1, (uint64_t *)state.ctx, SHAKE256_RATE);
 8009c4e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009c52:	f107 0010 	add.w	r0, r7, #16
 8009c56:	2388      	movs	r3, #136	; 0x88
 8009c58:	2101      	movs	r1, #1
 8009c5a:	f7ff ff71 	bl	8009b40 <keccak_squeezeblocks>
        for (i = 0; i < outlen; i++) output[i] = t[i];
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009c64:	e011      	b.n	8009c8a <shake256+0x10a>
 8009c66:	f107 030c 	add.w	r3, r7, #12
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009c70:	4413      	add	r3, r2
 8009c72:	f107 0110 	add.w	r1, r7, #16
 8009c76:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8009c7a:	440a      	add	r2, r1
 8009c7c:	7812      	ldrb	r2, [r2, #0]
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009c84:	3301      	adds	r3, #1
 8009c86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d3e6      	bcc.n	8009c66 <shake256+0xe6>
    }
}
 8009c98:	bf00      	nop
 8009c9a:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd90      	pop	{r4, r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	f0f0f0f1 	.word	0xf0f0f0f1

08009ca8 <KeccakF1600_StateExtractBytes>:
    (uint64_t)0x8000000080008081ULL, (uint64_t)0x8000000000008080ULL,
    (uint64_t)0x0000000080000001ULL, (uint64_t)0x8000000080008008ULL};

void KeccakF1600_StateExtractBytes(uint64_t *state, unsigned char *data, unsigned int offset,
                                   unsigned int length)
{
 8009ca8:	b4f0      	push	{r4, r5, r6, r7}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]
    unsigned int i;
    for (i = 0; i < length; i++)
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	e024      	b.n	8009d06 <KeccakF1600_StateExtractBytes+0x5e>
    { data[i] = (unsigned char)(state[(offset + i) >> 3] >> (8 * ((offset + i) & 0x07))); }
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	08db      	lsrs	r3, r3, #3
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	6979      	ldr	r1, [r7, #20]
 8009cd2:	4401      	add	r1, r0
 8009cd4:	f001 0107 	and.w	r1, r1, #7
 8009cd8:	00c9      	lsls	r1, r1, #3
 8009cda:	f1c1 0620 	rsb	r6, r1, #32
 8009cde:	f1a1 0020 	sub.w	r0, r1, #32
 8009ce2:	fa22 f401 	lsr.w	r4, r2, r1
 8009ce6:	fa03 f606 	lsl.w	r6, r3, r6
 8009cea:	4334      	orrs	r4, r6
 8009cec:	fa23 f000 	lsr.w	r0, r3, r0
 8009cf0:	4304      	orrs	r4, r0
 8009cf2:	fa23 f501 	lsr.w	r5, r3, r1
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	b2e2      	uxtb	r2, r4
 8009cfe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < length; i++)
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	3301      	adds	r3, #1
 8009d04:	617b      	str	r3, [r7, #20]
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d3d6      	bcc.n	8009cbc <KeccakF1600_StateExtractBytes+0x14>
}
 8009d0e:	bf00      	nop
 8009d10:	bf00      	nop
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bcf0      	pop	{r4, r5, r6, r7}
 8009d18:	4770      	bx	lr

08009d1a <KeccakF1600_StateXORBytes>:

void KeccakF1600_StateXORBytes(uint64_t *state, const unsigned char *data, unsigned int offset,
                               unsigned int length)
{
 8009d1a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
    unsigned int i;
    for (i = 0; i < length; i++)
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	617b      	str	r3, [r7, #20]
 8009d2e:	e033      	b.n	8009d98 <KeccakF1600_StateXORBytes+0x7e>
    { state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07)); }
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	4413      	add	r3, r2
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	4413      	add	r3, r2
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	4401      	add	r1, r0
 8009d56:	f001 0107 	and.w	r1, r1, #7
 8009d5a:	00c9      	lsls	r1, r1, #3
 8009d5c:	f1a1 0620 	sub.w	r6, r1, #32
 8009d60:	f1c1 0020 	rsb	r0, r1, #32
 8009d64:	fa03 f501 	lsl.w	r5, r3, r1
 8009d68:	fa02 f606 	lsl.w	r6, r2, r6
 8009d6c:	4335      	orrs	r5, r6
 8009d6e:	fa22 f000 	lsr.w	r0, r2, r0
 8009d72:	4305      	orrs	r5, r0
 8009d74:	fa02 f401 	lsl.w	r4, r2, r1
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	08db      	lsrs	r3, r3, #3
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	ea8a 0804 	eor.w	r8, sl, r4
 8009d8a:	ea8b 0905 	eor.w	r9, fp, r5
 8009d8e:	e9c3 8900 	strd	r8, r9, [r3]
    for (i = 0; i < length; i++)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	3301      	adds	r3, #1
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d3c7      	bcc.n	8009d30 <KeccakF1600_StateXORBytes+0x16>
}
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009dac:	4770      	bx	lr
	...

08009db0 <KeccakF1600_StatePermute>:

void KeccakF1600_StatePermute(uint64_t *state)
{
 8009db0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009db4:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009dbe:	6018      	str	r0, [r3, #0]
    uint64_t Eka, Eke, Eki, Eko, Eku;
    uint64_t Ema, Eme, Emi, Emo, Emu;
    uint64_t Esa, Ese, Esi, Eso, Esu;

    // copyFromState(A, state)
    Aba = state[0];
 8009dc0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8009dce:	e9c1 2300 	strd	r2, r3, [r1]
    Abe = state[1];
 8009dd2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009ddc:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8009de0:	e9c1 2300 	strd	r2, r3, [r1]
    Abi = state[2];
 8009de4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009dee:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8009df2:	e9c1 2300 	strd	r2, r3, [r1]
    Abo = state[3];
 8009df6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009e00:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8009e04:	e9c1 2300 	strd	r2, r3, [r1]
    Abu = state[4];
 8009e08:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e12:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8009e16:	e9c1 2300 	strd	r2, r3, [r1]
    Aga = state[5];
 8009e1a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8009e24:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8009e28:	e9c1 2300 	strd	r2, r3, [r1]
    Age = state[6];
 8009e2c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009e36:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8009e3a:	e9c1 2300 	strd	r2, r3, [r1]
    Agi = state[7];
 8009e3e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8009e48:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8009e4c:	e9c1 2300 	strd	r2, r3, [r1]
    Ago = state[8];
 8009e50:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009e5a:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8009e5e:	e9c1 2300 	strd	r2, r3, [r1]
    Agu = state[9];
 8009e62:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009e6c:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8009e70:	e9c1 2300 	strd	r2, r3, [r1]
    Aka = state[10];
 8009e74:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8009e7e:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8009e82:	e9c1 2300 	strd	r2, r3, [r1]
    Ake = state[11];
 8009e86:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8009e90:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8009e94:	e9c1 2300 	strd	r2, r3, [r1]
    Aki = state[12];
 8009e98:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009ea2:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8009ea6:	e9c1 2300 	strd	r2, r3, [r1]
    Ako = state[13];
 8009eaa:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009eb4:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8009eb8:	e9c1 2300 	strd	r2, r3, [r1]
    Aku = state[14];
 8009ebc:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8009ec6:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8009eca:	e9c1 2300 	strd	r2, r3, [r1]
    Ama = state[15];
 8009ece:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8009ed8:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8009edc:	e9c1 2300 	strd	r2, r3, [r1]
    Ame = state[16];
 8009ee0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8009eea:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8009eee:	e9c1 2300 	strd	r2, r3, [r1]
    Ami = state[17];
 8009ef2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8009efc:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8009f00:	e9c1 2300 	strd	r2, r3, [r1]
    Amo = state[18];
 8009f04:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8009f0e:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8009f12:	e9c1 2300 	strd	r2, r3, [r1]
    Amu = state[19];
 8009f16:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8009f20:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8009f24:	e9c1 2300 	strd	r2, r3, [r1]
    Asa = state[20];
 8009f28:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8009f32:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8009f36:	e9c1 2300 	strd	r2, r3, [r1]
    Ase = state[21];
 8009f3a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8009f44:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8009f48:	e9c1 2300 	strd	r2, r3, [r1]
    Asi = state[22];
 8009f4c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8009f56:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8009f5a:	e9c1 2300 	strd	r2, r3, [r1]
    Aso = state[23];
 8009f5e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8009f68:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8009f6c:	e9c1 2300 	strd	r2, r3, [r1]
    Asu = state[24];
 8009f70:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8009f7a:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8009f7e:	e9c1 2300 	strd	r2, r3, [r1]

    for (round = 0; round < NROUNDS; round += 2)
 8009f82:	2300      	movs	r3, #0
 8009f84:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8009f88:	f002 bd96 	b.w	800cab8 <KeccakF1600_StatePermute+0x2d08>
    {
        //    prepareTheta
        BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
 8009f8c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8009f90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f94:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	ea80 0602 	eor.w	r6, r0, r2
 8009fa0:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 8009fa4:	404b      	eors	r3, r1
 8009fa6:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8009faa:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 8009fb6:	4051      	eors	r1, r2
 8009fb8:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 8009fbc:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 8009fc0:	404b      	eors	r3, r1
 8009fc2:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 8009fc6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 8009fd2:	4051      	eors	r1, r2
 8009fd4:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 8009fd8:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 8009fdc:	404b      	eors	r3, r1
 8009fde:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8009fe2:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 8009fee:	4051      	eors	r1, r2
 8009ff0:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 8009ff4:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 8009ff8:	404b      	eors	r3, r1
 8009ffa:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8009ffe:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800a00a:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
 800a00e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800a012:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a016:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	ea80 0602 	eor.w	r6, r0, r2
 800a022:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 800a026:	404b      	eors	r3, r1
 800a028:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 800a02c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 800a038:	4051      	eors	r1, r2
 800a03a:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 800a03e:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 800a042:	404b      	eors	r3, r1
 800a044:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 800a048:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 800a054:	4051      	eors	r1, r2
 800a056:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 800a05a:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 800a05e:	404b      	eors	r3, r1
 800a060:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800a064:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 800a070:	4051      	eors	r1, r2
 800a072:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 800a076:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 800a07a:	404b      	eors	r3, r1
 800a07c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800a080:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800a08c:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
 800a090:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800a094:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a098:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	ea80 0602 	eor.w	r6, r0, r2
 800a0a4:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 800a0a8:	404b      	eors	r3, r1
 800a0aa:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800a0ae:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 800a0ba:	4051      	eors	r1, r2
 800a0bc:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 800a0c0:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 800a0c4:	404b      	eors	r3, r1
 800a0c6:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 800a0ca:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 800a0d6:	4051      	eors	r1, r2
 800a0d8:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 800a0dc:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 800a0e0:	404b      	eors	r3, r1
 800a0e2:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800a0e6:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 800a0f2:	4051      	eors	r1, r2
 800a0f4:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 800a0f8:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 800a0fc:	404b      	eors	r3, r1
 800a0fe:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800a102:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800a10e:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 800a112:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800a116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a11a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	ea80 0602 	eor.w	r6, r0, r2
 800a126:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 800a12a:	404b      	eors	r3, r1
 800a12c:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 800a130:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 800a13c:	4051      	eors	r1, r2
 800a13e:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 800a142:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 800a146:	404b      	eors	r3, r1
 800a148:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 800a14c:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 800a158:	4051      	eors	r1, r2
 800a15a:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 800a15e:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 800a162:	404b      	eors	r3, r1
 800a164:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800a168:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 800a174:	4051      	eors	r1, r2
 800a176:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 800a17a:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 800a17e:	404b      	eors	r3, r1
 800a180:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800a184:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800a190:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 800a194:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800a198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a19c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	ea80 0602 	eor.w	r6, r0, r2
 800a1a8:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 800a1ac:	404b      	eors	r3, r1
 800a1ae:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 800a1b2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 800a1be:	4051      	eors	r1, r2
 800a1c0:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 800a1c4:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 800a1c8:	404b      	eors	r3, r1
 800a1ca:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 800a1ce:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 800a1da:	4051      	eors	r1, r2
 800a1dc:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 800a1e0:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 800a1e4:	404b      	eors	r3, r1
 800a1e6:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 800a1ea:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800a1f6:	4051      	eors	r1, r2
 800a1f8:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 800a1fc:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 800a200:	404b      	eors	r3, r1
 800a202:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800a206:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800a212:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round  , A, E)
        Da = BCu ^ ROL(BCe, 1);
 800a216:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800a21a:	0fda      	lsrs	r2, r3, #31
 800a21c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	4313      	orrs	r3, r2
 800a224:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800a228:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800a22c:	0fda      	lsrs	r2, r3, #31
 800a22e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4313      	orrs	r3, r2
 800a236:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 800a23a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 800a246:	4051      	eors	r1, r2
 800a248:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 800a24c:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 800a250:	404b      	eors	r3, r1
 800a252:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800a256:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800a262:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 800a266:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800a26a:	0fda      	lsrs	r2, r3, #31
 800a26c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	4313      	orrs	r3, r2
 800a274:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 800a278:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800a27c:	0fda      	lsrs	r2, r3, #31
 800a27e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	4313      	orrs	r3, r2
 800a286:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800a28a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 800a296:	4051      	eors	r1, r2
 800a298:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 800a29c:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 800a2a0:	404b      	eors	r3, r1
 800a2a2:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800a2a6:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800a2b2:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 800a2b6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800a2ba:	0fda      	lsrs	r2, r3, #31
 800a2bc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 800a2c8:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800a2cc:	0fda      	lsrs	r2, r3, #31
 800a2ce:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800a2da:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800a2e6:	4051      	eors	r1, r2
 800a2e8:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 800a2ec:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 800a2f0:	404b      	eors	r3, r1
 800a2f2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800a2f6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800a302:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 800a306:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800a30a:	0fda      	lsrs	r2, r3, #31
 800a30c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	4313      	orrs	r3, r2
 800a314:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 800a318:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800a31c:	0fda      	lsrs	r2, r3, #31
 800a31e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	4313      	orrs	r3, r2
 800a326:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800a32a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 800a336:	4051      	eors	r1, r2
 800a338:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 800a33c:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 800a340:	404b      	eors	r3, r1
 800a342:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800a346:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800a352:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 800a356:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800a35a:	0fda      	lsrs	r2, r3, #31
 800a35c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	4313      	orrs	r3, r2
 800a364:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 800a368:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800a36c:	0fda      	lsrs	r2, r3, #31
 800a36e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800a372:	005b      	lsls	r3, r3, #1
 800a374:	4313      	orrs	r3, r2
 800a376:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 800a37a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 800a386:	4051      	eors	r1, r2
 800a388:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800a38c:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 800a390:	404b      	eors	r3, r1
 800a392:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800a396:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800a3a2:	e9c1 2300 	strd	r2, r3, [r1]

        Aba ^= Da;
 800a3a6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800a3aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3ae:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	ea80 0602 	eor.w	r6, r0, r2
 800a3ba:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 800a3be:	404b      	eors	r3, r1
 800a3c0:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800a3c4:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800a3d0:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Aba;
 800a3d4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800a3e0:	e9c1 2300 	strd	r2, r3, [r1]
        Age ^= De;
 800a3e4:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800a3e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3ec:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	ea80 0602 	eor.w	r6, r0, r2
 800a3f8:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 800a3fc:	404b      	eors	r3, r1
 800a3fe:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800a402:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800a40e:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Age, 44);
 800a412:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800a416:	031a      	lsls	r2, r3, #12
 800a418:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800a41c:	0d1b      	lsrs	r3, r3, #20
 800a41e:	4313      	orrs	r3, r2
 800a420:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800a424:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800a428:	031a      	lsls	r2, r3, #12
 800a42a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800a42e:	0d1b      	lsrs	r3, r3, #20
 800a430:	4313      	orrs	r3, r2
 800a432:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800a436:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800a442:	e9c1 2300 	strd	r2, r3, [r1]
        Aki ^= Di;
 800a446:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800a44a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a44e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	ea80 0602 	eor.w	r6, r0, r2
 800a45a:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 800a45e:	404b      	eors	r3, r1
 800a460:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800a464:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800a470:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aki, 43);
 800a474:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800a478:	02da      	lsls	r2, r3, #11
 800a47a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800a47e:	0d5b      	lsrs	r3, r3, #21
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800a486:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800a48a:	02da      	lsls	r2, r3, #11
 800a48c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800a490:	0d5b      	lsrs	r3, r3, #21
 800a492:	4313      	orrs	r3, r2
 800a494:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800a498:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800a4a4:	e9c1 2300 	strd	r2, r3, [r1]
        Amo ^= Do;
 800a4a8:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800a4ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4b0:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	ea80 0602 	eor.w	r6, r0, r2
 800a4bc:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 800a4c0:	404b      	eors	r3, r1
 800a4c2:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800a4c6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800a4d2:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amo, 21);
 800a4d6:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800a4da:	0ada      	lsrs	r2, r3, #11
 800a4dc:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800a4e0:	055b      	lsls	r3, r3, #21
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800a4e8:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 800a4ec:	0ada      	lsrs	r2, r3, #11
 800a4ee:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800a4f2:	055b      	lsls	r3, r3, #21
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800a4fa:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800a506:	e9c1 2300 	strd	r2, r3, [r1]
        Asu ^= Du;
 800a50a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800a50e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a512:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	ea80 0602 	eor.w	r6, r0, r2
 800a51e:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 800a522:	404b      	eors	r3, r1
 800a524:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800a528:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800a534:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asu, 14);
 800a538:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800a53c:	0c9a      	lsrs	r2, r3, #18
 800a53e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800a542:	039b      	lsls	r3, r3, #14
 800a544:	4313      	orrs	r3, r2
 800a546:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800a54a:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800a54e:	0c9a      	lsrs	r2, r3, #18
 800a550:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800a554:	039b      	lsls	r3, r3, #14
 800a556:	4313      	orrs	r3, r2
 800a558:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800a55c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800a568:	e9c1 2300 	strd	r2, r3, [r1]
        Eba = BCa ^ ((~BCe) & BCi);
 800a56c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	43d1      	mvns	r1, r2
 800a576:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 800a57a:	43db      	mvns	r3, r3
 800a57c:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800a580:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 800a58c:	4011      	ands	r1, r2
 800a58e:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 800a592:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 800a596:	400b      	ands	r3, r1
 800a598:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 800a59c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 800a5a8:	4051      	eors	r1, r2
 800a5aa:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 800a5ae:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 800a5b2:	404b      	eors	r3, r1
 800a5b4:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800a5b8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800a5c4:	e9c1 2300 	strd	r2, r3, [r1]
        Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800a5c8:	4afd      	ldr	r2, [pc, #1012]	; (800a9c0 <KeccakF1600_StatePermute+0xc10>)
 800a5ca:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5d6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	ea82 0600 	eor.w	r6, r2, r0
 800a5e2:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 800a5e6:	404b      	eors	r3, r1
 800a5e8:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800a5ec:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800a5f8:	e9c1 2300 	strd	r2, r3, [r1]
        Ebe = BCe ^ ((~BCi) & BCo);
 800a5fc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	43d1      	mvns	r1, r2
 800a606:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800a60a:	43db      	mvns	r3, r3
 800a60c:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 800a610:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 800a61c:	4011      	ands	r1, r2
 800a61e:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 800a622:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 800a626:	400b      	ands	r3, r1
 800a628:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 800a62c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 800a638:	4051      	eors	r1, r2
 800a63a:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800a63e:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 800a642:	404b      	eors	r3, r1
 800a644:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800a648:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800a654:	e9c1 2300 	strd	r2, r3, [r1]
        Ebi = BCi ^ ((~BCo) & BCu);
 800a658:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	43d1      	mvns	r1, r2
 800a662:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 800a666:	43db      	mvns	r3, r3
 800a668:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800a66c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 800a678:	4011      	ands	r1, r2
 800a67a:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 800a67e:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 800a682:	400b      	ands	r3, r1
 800a684:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 800a688:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 800a694:	4051      	eors	r1, r2
 800a696:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800a69a:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 800a69e:	404b      	eors	r3, r1
 800a6a0:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800a6a4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800a6b0:	e9c1 2300 	strd	r2, r3, [r1]
        Ebo = BCo ^ ((~BCu) & BCa);
 800a6b4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	43d1      	mvns	r1, r2
 800a6be:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 800a6c2:	43db      	mvns	r3, r3
 800a6c4:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800a6c8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 800a6d4:	4011      	ands	r1, r2
 800a6d6:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 800a6da:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 800a6de:	400b      	ands	r3, r1
 800a6e0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 800a6e4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 800a6f0:	4051      	eors	r1, r2
 800a6f2:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 800a6f6:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800a6fa:	404b      	eors	r3, r1
 800a6fc:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800a700:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800a70c:	e9c1 2300 	strd	r2, r3, [r1]
        Ebu = BCu ^ ((~BCa) & BCe);
 800a710:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	43d1      	mvns	r1, r2
 800a71a:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800a71e:	43db      	mvns	r3, r3
 800a720:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 800a724:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800a730:	4011      	ands	r1, r2
 800a732:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 800a736:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 800a73a:	400b      	ands	r3, r1
 800a73c:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800a740:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 800a74c:	4051      	eors	r1, r2
 800a74e:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 800a752:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 800a756:	404b      	eors	r3, r1
 800a758:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800a75c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800a768:	e9c1 2300 	strd	r2, r3, [r1]

        Abo ^= Do;
 800a76c:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800a770:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a774:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	ea80 0602 	eor.w	r6, r0, r2
 800a780:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 800a784:	404b      	eors	r3, r1
 800a786:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800a78a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800a796:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abo, 28);
 800a79a:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800a79e:	091a      	lsrs	r2, r3, #4
 800a7a0:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800a7a4:	071b      	lsls	r3, r3, #28
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800a7ac:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800a7b0:	091a      	lsrs	r2, r3, #4
 800a7b2:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800a7b6:	071b      	lsls	r3, r3, #28
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800a7be:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800a7ca:	e9c1 2300 	strd	r2, r3, [r1]
        Agu ^= Du;
 800a7ce:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800a7d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a7d6:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	ea80 0602 	eor.w	r6, r0, r2
 800a7e2:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800a7e6:	404b      	eors	r3, r1
 800a7e8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800a7ec:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800a7f8:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agu, 20);
 800a7fc:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800a800:	0b1a      	lsrs	r2, r3, #12
 800a802:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800a806:	051b      	lsls	r3, r3, #20
 800a808:	4313      	orrs	r3, r2
 800a80a:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800a80e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800a812:	0b1a      	lsrs	r2, r3, #12
 800a814:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800a818:	051b      	lsls	r3, r3, #20
 800a81a:	4313      	orrs	r3, r2
 800a81c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800a820:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800a82c:	e9c1 2300 	strd	r2, r3, [r1]
        Aka ^= Da;
 800a830:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800a834:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a838:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	ea80 0602 	eor.w	r6, r0, r2
 800a844:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 800a848:	404b      	eors	r3, r1
 800a84a:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800a84e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800a85a:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aka, 3);
 800a85e:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800a862:	0f5a      	lsrs	r2, r3, #29
 800a864:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	4313      	orrs	r3, r2
 800a86c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800a870:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800a874:	0f5a      	lsrs	r2, r3, #29
 800a876:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	4313      	orrs	r3, r2
 800a87e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800a882:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800a88e:	e9c1 2300 	strd	r2, r3, [r1]
        Ame ^= De;
 800a892:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800a896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a89a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	ea80 0602 	eor.w	r6, r0, r2
 800a8a6:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 800a8aa:	404b      	eors	r3, r1
 800a8ac:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800a8b0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800a8bc:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ame, 45);
 800a8c0:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800a8c4:	035a      	lsls	r2, r3, #13
 800a8c6:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800a8ca:	0cdb      	lsrs	r3, r3, #19
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800a8d2:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800a8d6:	035a      	lsls	r2, r3, #13
 800a8d8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800a8dc:	0cdb      	lsrs	r3, r3, #19
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800a8e4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800a8f0:	e9c1 2300 	strd	r2, r3, [r1]
        Asi ^= Di;
 800a8f4:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800a8f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a8fc:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	ea80 0602 	eor.w	r6, r0, r2
 800a908:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 800a90c:	404b      	eors	r3, r1
 800a90e:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800a912:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800a91e:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asi, 61);
 800a922:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800a926:	075a      	lsls	r2, r3, #29
 800a928:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800a92c:	08db      	lsrs	r3, r3, #3
 800a92e:	4313      	orrs	r3, r2
 800a930:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800a934:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800a938:	075a      	lsls	r2, r3, #29
 800a93a:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800a93e:	08db      	lsrs	r3, r3, #3
 800a940:	4313      	orrs	r3, r2
 800a942:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800a946:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800a952:	e9c1 2300 	strd	r2, r3, [r1]
        Ega = BCa ^ ((~BCe) & BCi);
 800a956:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	43d1      	mvns	r1, r2
 800a960:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 800a964:	43db      	mvns	r3, r3
 800a966:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 800a96a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 800a976:	4011      	ands	r1, r2
 800a978:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 800a97c:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800a980:	400b      	ands	r3, r1
 800a982:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 800a986:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 800a992:	4051      	eors	r1, r2
 800a994:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800a998:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 800a99c:	404b      	eors	r3, r1
 800a99e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800a9a2:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800a9ae:	e9c1 2300 	strd	r2, r3, [r1]
        Ege = BCe ^ ((~BCi) & BCo);
 800a9b2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	43d1      	mvns	r1, r2
 800a9bc:	e002      	b.n	800a9c4 <KeccakF1600_StatePermute+0xc14>
 800a9be:	bf00      	nop
 800a9c0:	080c47d0 	.word	0x080c47d0
 800a9c4:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 800a9c8:	43db      	mvns	r3, r3
 800a9ca:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 800a9ce:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 800a9da:	4011      	ands	r1, r2
 800a9dc:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 800a9e0:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 800a9e4:	400b      	ands	r3, r1
 800a9e6:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800a9ea:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800a9f6:	4051      	eors	r1, r2
 800a9f8:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 800a9fc:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 800aa00:	404b      	eors	r3, r1
 800aa02:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800aa06:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800aa12:	e9c1 2300 	strd	r2, r3, [r1]
        Egi = BCi ^ ((~BCo) & BCu);
 800aa16:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	43d1      	mvns	r1, r2
 800aa20:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 800aa24:	43db      	mvns	r3, r3
 800aa26:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 800aa2a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 800aa36:	4011      	ands	r1, r2
 800aa38:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 800aa3c:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800aa40:	400b      	ands	r3, r1
 800aa42:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 800aa46:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 800aa52:	4051      	eors	r1, r2
 800aa54:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 800aa58:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 800aa5c:	404b      	eors	r3, r1
 800aa5e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800aa62:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800aa6e:	e9c1 2300 	strd	r2, r3, [r1]
        Ego = BCo ^ ((~BCu) & BCa);
 800aa72:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	43d1      	mvns	r1, r2
 800aa7c:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800aa80:	43db      	mvns	r3, r3
 800aa82:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 800aa86:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 800aa92:	4011      	ands	r1, r2
 800aa94:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 800aa98:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 800aa9c:	400b      	ands	r3, r1
 800aa9e:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800aaa2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 800aaae:	4051      	eors	r1, r2
 800aab0:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800aab4:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 800aab8:	404b      	eors	r3, r1
 800aaba:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800aabe:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800aaca:	e9c1 2300 	strd	r2, r3, [r1]
        Egu = BCu ^ ((~BCa) & BCe);
 800aace:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	43d1      	mvns	r1, r2
 800aad8:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 800aadc:	43db      	mvns	r3, r3
 800aade:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 800aae2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 800aaee:	4011      	ands	r1, r2
 800aaf0:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 800aaf4:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 800aaf8:	400b      	ands	r3, r1
 800aafa:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 800aafe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 800ab0a:	4051      	eors	r1, r2
 800ab0c:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 800ab10:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 800ab14:	404b      	eors	r3, r1
 800ab16:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800ab1a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800ab26:	e9c1 2300 	strd	r2, r3, [r1]

        Abe ^= De;
 800ab2a:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800ab2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab32:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	ea80 0602 	eor.w	r6, r0, r2
 800ab3e:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 800ab42:	404b      	eors	r3, r1
 800ab44:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800ab48:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800ab54:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abe, 1);
 800ab58:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800ab5c:	0fda      	lsrs	r2, r3, #31
 800ab5e:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	4313      	orrs	r3, r2
 800ab66:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800ab6a:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800ab6e:	0fda      	lsrs	r2, r3, #31
 800ab70:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	4313      	orrs	r3, r2
 800ab78:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800ab7c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800ab88:	e9c1 2300 	strd	r2, r3, [r1]
        Agi ^= Di;
 800ab8c:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800ab90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab94:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	ea80 0602 	eor.w	r6, r0, r2
 800aba0:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 800aba4:	404b      	eors	r3, r1
 800aba6:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800abaa:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800abae:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800abb2:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agi, 6);
 800abb6:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800abba:	0e9a      	lsrs	r2, r3, #26
 800abbc:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800abc0:	019b      	lsls	r3, r3, #6
 800abc2:	4313      	orrs	r3, r2
 800abc4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800abc8:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800abcc:	0e9a      	lsrs	r2, r3, #26
 800abce:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 800abd2:	019b      	lsls	r3, r3, #6
 800abd4:	4313      	orrs	r3, r2
 800abd6:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800abda:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800abde:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800abe2:	e9c1 2300 	strd	r2, r3, [r1]
        Ako ^= Do;
 800abe6:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800abea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abee:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	ea80 0602 	eor.w	r6, r0, r2
 800abfa:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 800abfe:	404b      	eors	r3, r1
 800ac00:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800ac04:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 800ac08:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800ac0c:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ako, 25);
 800ac10:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800ac14:	09da      	lsrs	r2, r3, #7
 800ac16:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800ac1a:	065b      	lsls	r3, r3, #25
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800ac22:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 800ac26:	09da      	lsrs	r2, r3, #7
 800ac28:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800ac2c:	065b      	lsls	r3, r3, #25
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800ac34:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 800ac38:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ac3c:	e9c1 2300 	strd	r2, r3, [r1]
        Amu ^= Du;
 800ac40:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800ac44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac48:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	ea80 0602 	eor.w	r6, r0, r2
 800ac54:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 800ac58:	404b      	eors	r3, r1
 800ac5a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800ac5e:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800ac62:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800ac66:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amu, 8);
 800ac6a:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800ac6e:	0e1a      	lsrs	r2, r3, #24
 800ac70:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	4313      	orrs	r3, r2
 800ac78:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800ac7c:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800ac80:	0e1a      	lsrs	r2, r3, #24
 800ac82:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800ac8e:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800ac92:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800ac96:	e9c1 2300 	strd	r2, r3, [r1]
        Asa ^= Da;
 800ac9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800ac9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aca2:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acaa:	ea80 0602 	eor.w	r6, r0, r2
 800acae:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 800acb2:	404b      	eors	r3, r1
 800acb4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800acb8:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800acbc:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800acc0:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asa, 18);
 800acc4:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800acc8:	0b9a      	lsrs	r2, r3, #14
 800acca:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800acce:	049b      	lsls	r3, r3, #18
 800acd0:	4313      	orrs	r3, r2
 800acd2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800acd6:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800acda:	0b9a      	lsrs	r2, r3, #14
 800acdc:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800ace0:	049b      	lsls	r3, r3, #18
 800ace2:	4313      	orrs	r3, r2
 800ace4:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800ace8:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800acec:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800acf0:	e9c1 2300 	strd	r2, r3, [r1]
        Eka = BCa ^ ((~BCe) & BCi);
 800acf4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	43d1      	mvns	r1, r2
 800acfe:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 800ad02:	43db      	mvns	r3, r3
 800ad04:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 800ad08:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 800ad14:	4011      	ands	r1, r2
 800ad16:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 800ad1a:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 800ad1e:	400b      	ands	r3, r1
 800ad20:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800ad24:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 800ad30:	4051      	eors	r1, r2
 800ad32:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 800ad36:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 800ad3a:	404b      	eors	r3, r1
 800ad3c:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800ad40:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800ad44:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800ad48:	e9c1 2300 	strd	r2, r3, [r1]
        Eke = BCe ^ ((~BCi) & BCo);
 800ad4c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	43d1      	mvns	r1, r2
 800ad56:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 800ad5a:	43db      	mvns	r3, r3
 800ad5c:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800ad60:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 800ad6c:	4011      	ands	r1, r2
 800ad6e:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 800ad72:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 800ad76:	400b      	ands	r3, r1
 800ad78:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 800ad7c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 800ad88:	4051      	eors	r1, r2
 800ad8a:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800ad8e:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 800ad92:	404b      	eors	r3, r1
 800ad94:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800ad98:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 800ad9c:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800ada0:	e9c1 2300 	strd	r2, r3, [r1]
        Eki = BCi ^ ((~BCo) & BCu);
 800ada4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	43d1      	mvns	r1, r2
 800adae:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800adb2:	43db      	mvns	r3, r3
 800adb4:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800adb8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 800adc4:	4011      	ands	r1, r2
 800adc6:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 800adca:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 800adce:	400b      	ands	r3, r1
 800add0:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 800add4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 800ade0:	4051      	eors	r1, r2
 800ade2:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 800ade6:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 800adea:	404b      	eors	r3, r1
 800adec:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800adf0:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800adf4:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800adf8:	e9c1 2300 	strd	r2, r3, [r1]
        Eko = BCo ^ ((~BCu) & BCa);
 800adfc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	43d1      	mvns	r1, r2
 800ae06:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 800ae0a:	43db      	mvns	r3, r3
 800ae0c:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 800ae10:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 800ae1c:	4011      	ands	r1, r2
 800ae1e:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 800ae22:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 800ae26:	400b      	ands	r3, r1
 800ae28:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800ae2c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 800ae38:	4051      	eors	r1, r2
 800ae3a:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800ae3e:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800ae42:	404b      	eors	r3, r1
 800ae44:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800ae48:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 800ae4c:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800ae50:	e9c1 2300 	strd	r2, r3, [r1]
        Eku = BCu ^ ((~BCa) & BCe);
 800ae54:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	43d1      	mvns	r1, r2
 800ae5e:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 800ae62:	43db      	mvns	r3, r3
 800ae64:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 800ae68:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 800ae74:	4011      	ands	r1, r2
 800ae76:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 800ae7a:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 800ae7e:	400b      	ands	r3, r1
 800ae80:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800ae84:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800ae90:	4051      	eors	r1, r2
 800ae92:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800ae96:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 800ae9a:	404b      	eors	r3, r1
 800ae9c:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800aea0:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 800aea4:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800aea8:	e9c1 2300 	strd	r2, r3, [r1]

        Abu ^= Du;
 800aeac:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800aeb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aeb4:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	ea80 0602 	eor.w	r6, r0, r2
 800aec0:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 800aec4:	404b      	eors	r3, r1
 800aec6:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800aeca:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 800aece:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800aed2:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abu, 27);
 800aed6:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800aeda:	095a      	lsrs	r2, r3, #5
 800aedc:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800aee0:	06db      	lsls	r3, r3, #27
 800aee2:	4313      	orrs	r3, r2
 800aee4:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800aee8:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 800aeec:	095a      	lsrs	r2, r3, #5
 800aeee:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 800aef2:	06db      	lsls	r3, r3, #27
 800aef4:	4313      	orrs	r3, r2
 800aef6:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800aefa:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 800aefe:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800af02:	e9c1 2300 	strd	r2, r3, [r1]
        Aga ^= Da;
 800af06:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800af0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af0e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	ea80 0602 	eor.w	r6, r0, r2
 800af1a:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 800af1e:	404b      	eors	r3, r1
 800af20:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800af24:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 800af28:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800af2c:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Aga, 36);
 800af30:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800af34:	011a      	lsls	r2, r3, #4
 800af36:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800af3a:	0f1b      	lsrs	r3, r3, #28
 800af3c:	4313      	orrs	r3, r2
 800af3e:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800af42:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 800af46:	011a      	lsls	r2, r3, #4
 800af48:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 800af4c:	0f1b      	lsrs	r3, r3, #28
 800af4e:	4313      	orrs	r3, r2
 800af50:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800af54:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800af58:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800af5c:	e9c1 2300 	strd	r2, r3, [r1]
        Ake ^= De;
 800af60:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800af64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af68:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	ea80 0602 	eor.w	r6, r0, r2
 800af74:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 800af78:	404b      	eors	r3, r1
 800af7a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800af7e:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800af82:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800af86:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ake, 10);
 800af8a:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800af8e:	0d9a      	lsrs	r2, r3, #22
 800af90:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800af94:	029b      	lsls	r3, r3, #10
 800af96:	4313      	orrs	r3, r2
 800af98:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800af9c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800afa0:	0d9a      	lsrs	r2, r3, #22
 800afa2:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 800afa6:	029b      	lsls	r3, r3, #10
 800afa8:	4313      	orrs	r3, r2
 800afaa:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800afae:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 800afb2:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800afb6:	e9c1 2300 	strd	r2, r3, [r1]
        Ami ^= Di;
 800afba:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800afbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afc2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	ea80 0602 	eor.w	r6, r0, r2
 800afce:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 800afd2:	404b      	eors	r3, r1
 800afd4:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800afd8:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 800afdc:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800afe0:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ami, 15);
 800afe4:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800afe8:	0c5a      	lsrs	r2, r3, #17
 800afea:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800afee:	03db      	lsls	r3, r3, #15
 800aff0:	4313      	orrs	r3, r2
 800aff2:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800aff6:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 800affa:	0c5a      	lsrs	r2, r3, #17
 800affc:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 800b000:	03db      	lsls	r3, r3, #15
 800b002:	4313      	orrs	r3, r2
 800b004:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800b008:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 800b00c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800b010:	e9c1 2300 	strd	r2, r3, [r1]
        Aso ^= Do;
 800b014:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800b018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b01c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	ea80 0602 	eor.w	r6, r0, r2
 800b028:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 800b02c:	404b      	eors	r3, r1
 800b02e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b032:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 800b036:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800b03a:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Aso, 56);
 800b03e:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800b042:	061a      	lsls	r2, r3, #24
 800b044:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800b048:	0a1b      	lsrs	r3, r3, #8
 800b04a:	4313      	orrs	r3, r2
 800b04c:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800b050:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 800b054:	061a      	lsls	r2, r3, #24
 800b056:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 800b05a:	0a1b      	lsrs	r3, r3, #8
 800b05c:	4313      	orrs	r3, r2
 800b05e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800b062:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800b066:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800b06a:	e9c1 2300 	strd	r2, r3, [r1]
        Ema = BCa ^ ((~BCe) & BCi);
 800b06e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	43d1      	mvns	r1, r2
 800b078:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 800b07c:	43db      	mvns	r3, r3
 800b07e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800b082:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08a:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 800b08e:	4011      	ands	r1, r2
 800b090:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 800b094:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 800b098:	400b      	ands	r3, r1
 800b09a:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 800b09e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 800b0aa:	4051      	eors	r1, r2
 800b0ac:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 800b0b0:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 800b0b4:	404b      	eors	r3, r1
 800b0b6:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800b0ba:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800b0be:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800b0c2:	e9c1 2300 	strd	r2, r3, [r1]
        Eme = BCe ^ ((~BCi) & BCo);
 800b0c6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	43d1      	mvns	r1, r2
 800b0d0:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 800b0d4:	43db      	mvns	r3, r3
 800b0d6:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 800b0da:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e2:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 800b0e6:	4011      	ands	r1, r2
 800b0e8:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 800b0ec:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 800b0f0:	400b      	ands	r3, r1
 800b0f2:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 800b0f6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 800b102:	4051      	eors	r1, r2
 800b104:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 800b108:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 800b10c:	404b      	eors	r3, r1
 800b10e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b112:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 800b116:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800b11a:	e9c1 2300 	strd	r2, r3, [r1]
        Emi = BCi ^ ((~BCo) & BCu);
 800b11e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	43d1      	mvns	r1, r2
 800b128:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 800b12c:	43db      	mvns	r3, r3
 800b12e:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 800b132:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 800b13e:	4011      	ands	r1, r2
 800b140:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 800b144:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 800b148:	400b      	ands	r3, r1
 800b14a:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 800b14e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 800b15a:	4051      	eors	r1, r2
 800b15c:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 800b160:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 800b164:	404b      	eors	r3, r1
 800b166:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800b16a:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800b16e:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800b172:	e9c1 2300 	strd	r2, r3, [r1]
        Emo = BCo ^ ((~BCu) & BCa);
 800b176:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	43d1      	mvns	r1, r2
 800b180:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 800b184:	43db      	mvns	r3, r3
 800b186:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 800b18a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 800b196:	4011      	ands	r1, r2
 800b198:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 800b19c:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 800b1a0:	400b      	ands	r3, r1
 800b1a2:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 800b1a6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 800b1b2:	4051      	eors	r1, r2
 800b1b4:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800b1b8:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 800b1bc:	404b      	eors	r3, r1
 800b1be:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800b1c2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800b1c6:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800b1ca:	e9c1 2300 	strd	r2, r3, [r1]
        Emu = BCu ^ ((~BCa) & BCe);
 800b1ce:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	43d1      	mvns	r1, r2
 800b1d8:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 800b1dc:	43db      	mvns	r3, r3
 800b1de:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 800b1e2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 800b1ee:	4011      	ands	r1, r2
 800b1f0:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 800b1f4:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 800b1f8:	400b      	ands	r3, r1
 800b1fa:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 800b1fe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 800b20a:	4051      	eors	r1, r2
 800b20c:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800b210:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 800b214:	404b      	eors	r3, r1
 800b216:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800b21a:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800b21e:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800b222:	e9c1 2300 	strd	r2, r3, [r1]

        Abi ^= Di;
 800b226:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800b22a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b22e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	ea80 0602 	eor.w	r6, r0, r2
 800b23a:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 800b23e:	404b      	eors	r3, r1
 800b240:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800b244:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 800b248:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800b24c:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abi, 62);
 800b250:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800b254:	079a      	lsls	r2, r3, #30
 800b256:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800b25a:	089b      	lsrs	r3, r3, #2
 800b25c:	4313      	orrs	r3, r2
 800b25e:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800b262:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 800b266:	079a      	lsls	r2, r3, #30
 800b268:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 800b26c:	089b      	lsrs	r3, r3, #2
 800b26e:	4313      	orrs	r3, r2
 800b270:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800b274:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800b278:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800b27c:	e9c1 2300 	strd	r2, r3, [r1]
        Ago ^= Do;
 800b280:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800b284:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b288:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	ea80 0602 	eor.w	r6, r0, r2
 800b294:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 800b298:	404b      	eors	r3, r1
 800b29a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800b29e:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800b2a2:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800b2a6:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ago, 55);
 800b2aa:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800b2ae:	05da      	lsls	r2, r3, #23
 800b2b0:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800b2b4:	0a5b      	lsrs	r3, r3, #9
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800b2bc:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800b2c0:	05da      	lsls	r2, r3, #23
 800b2c2:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800b2c6:	0a5b      	lsrs	r3, r3, #9
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800b2ce:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800b2d2:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800b2d6:	e9c1 2300 	strd	r2, r3, [r1]
        Aku ^= Du;
 800b2da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800b2de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2e2:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	ea80 0602 	eor.w	r6, r0, r2
 800b2ee:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 800b2f2:	404b      	eors	r3, r1
 800b2f4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800b2f8:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800b2fc:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800b300:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aku, 39);
 800b304:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800b308:	01da      	lsls	r2, r3, #7
 800b30a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800b30e:	0e5b      	lsrs	r3, r3, #25
 800b310:	4313      	orrs	r3, r2
 800b312:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800b316:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800b31a:	01da      	lsls	r2, r3, #7
 800b31c:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800b320:	0e5b      	lsrs	r3, r3, #25
 800b322:	4313      	orrs	r3, r2
 800b324:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800b328:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800b32c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800b330:	e9c1 2300 	strd	r2, r3, [r1]
        Ama ^= Da;
 800b334:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800b338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b33c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	ea80 0602 	eor.w	r6, r0, r2
 800b348:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 800b34c:	404b      	eors	r3, r1
 800b34e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800b352:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800b356:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800b35a:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ama, 41);
 800b35e:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800b362:	025a      	lsls	r2, r3, #9
 800b364:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800b368:	0ddb      	lsrs	r3, r3, #23
 800b36a:	4313      	orrs	r3, r2
 800b36c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800b370:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800b374:	025a      	lsls	r2, r3, #9
 800b376:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800b37a:	0ddb      	lsrs	r3, r3, #23
 800b37c:	4313      	orrs	r3, r2
 800b37e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800b382:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800b386:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800b38a:	e9c1 2300 	strd	r2, r3, [r1]
        Ase ^= De;
 800b38e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800b392:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b396:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	ea80 0602 	eor.w	r6, r0, r2
 800b3a2:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 800b3a6:	404b      	eors	r3, r1
 800b3a8:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800b3ac:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800b3b0:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800b3b4:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ase, 2);
 800b3b8:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800b3bc:	0f9a      	lsrs	r2, r3, #30
 800b3be:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800b3ca:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 800b3ce:	0f9a      	lsrs	r2, r3, #30
 800b3d0:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800b3dc:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800b3e0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800b3e4:	e9c1 2300 	strd	r2, r3, [r1]
        Esa = BCa ^ ((~BCe) & BCi);
 800b3e8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	43d1      	mvns	r1, r2
 800b3f2:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 800b3f6:	43db      	mvns	r3, r3
 800b3f8:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 800b3fc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 800b408:	4011      	ands	r1, r2
 800b40a:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 800b40e:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 800b412:	400b      	ands	r3, r1
 800b414:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 800b418:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 800b424:	4051      	eors	r1, r2
 800b426:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800b42a:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 800b42e:	404b      	eors	r3, r1
 800b430:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800b434:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800b438:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800b43c:	e9c1 2300 	strd	r2, r3, [r1]
        Ese = BCe ^ ((~BCi) & BCo);
 800b440:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	43d1      	mvns	r1, r2
 800b44a:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 800b44e:	43db      	mvns	r3, r3
 800b450:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 800b454:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 800b460:	4011      	ands	r1, r2
 800b462:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 800b466:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 800b46a:	400b      	ands	r3, r1
 800b46c:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 800b470:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 800b47c:	4051      	eors	r1, r2
 800b47e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800b482:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 800b486:	404b      	eors	r3, r1
 800b488:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800b48c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800b490:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 800b494:	e9c1 2300 	strd	r2, r3, [r1]
        Esi = BCi ^ ((~BCo) & BCu);
 800b498:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	43d1      	mvns	r1, r2
 800b4a2:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 800b4a6:	43db      	mvns	r3, r3
 800b4a8:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 800b4ac:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 800b4b8:	4011      	ands	r1, r2
 800b4ba:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 800b4be:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 800b4c2:	400b      	ands	r3, r1
 800b4c4:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 800b4c8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 800b4d4:	4051      	eors	r1, r2
 800b4d6:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 800b4da:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 800b4de:	404b      	eors	r3, r1
 800b4e0:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800b4e4:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800b4e8:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800b4ec:	e9c1 2300 	strd	r2, r3, [r1]
        Eso = BCo ^ ((~BCu) & BCa);
 800b4f0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	43d1      	mvns	r1, r2
 800b4fa:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 800b4fe:	43db      	mvns	r3, r3
 800b500:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 800b504:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 800b510:	4011      	ands	r1, r2
 800b512:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 800b516:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 800b51a:	400b      	ands	r3, r1
 800b51c:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 800b520:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 800b52c:	4051      	eors	r1, r2
 800b52e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800b532:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 800b536:	404b      	eors	r3, r1
 800b538:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800b53c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800b540:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800b544:	e9c1 2300 	strd	r2, r3, [r1]
        Esu = BCu ^ ((~BCa) & BCe);
 800b548:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	43d1      	mvns	r1, r2
 800b552:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 800b556:	43db      	mvns	r3, r3
 800b558:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 800b55c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 800b568:	4011      	ands	r1, r2
 800b56a:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 800b56e:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 800b572:	400b      	ands	r3, r1
 800b574:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 800b578:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 800b584:	4051      	eors	r1, r2
 800b586:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800b58a:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 800b58e:	404b      	eors	r3, r1
 800b590:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800b594:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800b598:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800b59c:	e9c1 2300 	strd	r2, r3, [r1]

        //    prepareTheta
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 800b5a0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800b5a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5a8:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	ea80 0602 	eor.w	r6, r0, r2
 800b5b4:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 800b5b8:	404b      	eors	r3, r1
 800b5ba:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 800b5be:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 800b5ca:	4051      	eors	r1, r2
 800b5cc:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 800b5d0:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 800b5d4:	404b      	eors	r3, r1
 800b5d6:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 800b5da:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 800b5e6:	4051      	eors	r1, r2
 800b5e8:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 800b5ec:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 800b5f0:	404b      	eors	r3, r1
 800b5f2:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 800b5f6:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 800b602:	4051      	eors	r1, r2
 800b604:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 800b608:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 800b60c:	404b      	eors	r3, r1
 800b60e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800b612:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800b616:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800b61a:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 800b61e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b622:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b626:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	ea80 0602 	eor.w	r6, r0, r2
 800b632:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 800b636:	404b      	eors	r3, r1
 800b638:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 800b63c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 800b648:	4051      	eors	r1, r2
 800b64a:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 800b64e:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800b652:	404b      	eors	r3, r1
 800b654:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 800b658:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 800b664:	4051      	eors	r1, r2
 800b666:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 800b66a:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 800b66e:	404b      	eors	r3, r1
 800b670:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 800b674:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 800b680:	4051      	eors	r1, r2
 800b682:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800b686:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 800b68a:	404b      	eors	r3, r1
 800b68c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800b690:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 800b694:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800b698:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
 800b69c:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800b6a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6a4:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	ea80 0602 	eor.w	r6, r0, r2
 800b6b0:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 800b6b4:	404b      	eors	r3, r1
 800b6b6:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 800b6ba:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 800b6c6:	4051      	eors	r1, r2
 800b6c8:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 800b6cc:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 800b6d0:	404b      	eors	r3, r1
 800b6d2:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 800b6d6:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 800b6e2:	4051      	eors	r1, r2
 800b6e4:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 800b6e8:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 800b6ec:	404b      	eors	r3, r1
 800b6ee:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 800b6f2:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 800b6fe:	4051      	eors	r1, r2
 800b700:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800b704:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 800b708:	404b      	eors	r3, r1
 800b70a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800b70e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800b712:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800b716:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
 800b71a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800b71e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b722:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	ea80 0602 	eor.w	r6, r0, r2
 800b72e:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 800b732:	404b      	eors	r3, r1
 800b734:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 800b738:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 800b744:	4051      	eors	r1, r2
 800b746:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 800b74a:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 800b74e:	404b      	eors	r3, r1
 800b750:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 800b754:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 800b760:	4051      	eors	r1, r2
 800b762:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 800b766:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 800b76a:	404b      	eors	r3, r1
 800b76c:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 800b770:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 800b77c:	4051      	eors	r1, r2
 800b77e:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 800b782:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 800b786:	404b      	eors	r3, r1
 800b788:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800b78c:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800b790:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800b794:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 800b798:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800b79c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7a0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	ea80 0602 	eor.w	r6, r0, r2
 800b7ac:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 800b7b0:	404b      	eors	r3, r1
 800b7b2:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 800b7b6:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 800b7c2:	4051      	eors	r1, r2
 800b7c4:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 800b7c8:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 800b7cc:	404b      	eors	r3, r1
 800b7ce:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 800b7d2:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 800b7de:	4051      	eors	r1, r2
 800b7e0:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 800b7e4:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 800b7e8:	404b      	eors	r3, r1
 800b7ea:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 800b7ee:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 800b7fa:	4051      	eors	r1, r2
 800b7fc:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800b800:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 800b804:	404b      	eors	r3, r1
 800b806:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800b80a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800b80e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800b812:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
        Da = BCu ^ ROL(BCe, 1);
 800b816:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800b81a:	0fda      	lsrs	r2, r3, #31
 800b81c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	4313      	orrs	r3, r2
 800b824:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 800b828:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800b82c:	0fda      	lsrs	r2, r3, #31
 800b82e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	4313      	orrs	r3, r2
 800b836:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 800b83a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 800b846:	4051      	eors	r1, r2
 800b848:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800b84c:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 800b850:	404b      	eors	r3, r1
 800b852:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800b856:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800b85a:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800b85e:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 800b862:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800b866:	0fda      	lsrs	r2, r3, #31
 800b868:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	4313      	orrs	r3, r2
 800b870:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 800b874:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800b878:	0fda      	lsrs	r2, r3, #31
 800b87a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	4313      	orrs	r3, r2
 800b882:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 800b886:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 800b892:	4051      	eors	r1, r2
 800b894:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 800b898:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 800b89c:	404b      	eors	r3, r1
 800b89e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800b8a2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800b8a6:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800b8aa:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 800b8ae:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800b8b2:	0fda      	lsrs	r2, r3, #31
 800b8b4:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 800b8c0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800b8c4:	0fda      	lsrs	r2, r3, #31
 800b8c6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 800b8d2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 800b8de:	4051      	eors	r1, r2
 800b8e0:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800b8e4:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 800b8e8:	404b      	eors	r3, r1
 800b8ea:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800b8ee:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800b8f2:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800b8f6:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 800b8fa:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800b8fe:	0fda      	lsrs	r2, r3, #31
 800b900:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	4313      	orrs	r3, r2
 800b908:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 800b90c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800b910:	0fda      	lsrs	r2, r3, #31
 800b912:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	4313      	orrs	r3, r2
 800b91a:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 800b91e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800b922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b926:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 800b92a:	4051      	eors	r1, r2
 800b92c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800b930:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 800b934:	404b      	eors	r3, r1
 800b936:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800b93a:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800b93e:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800b942:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 800b946:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800b94a:	0fda      	lsrs	r2, r3, #31
 800b94c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800b950:	005b      	lsls	r3, r3, #1
 800b952:	4313      	orrs	r3, r2
 800b954:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 800b958:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800b95c:	0fda      	lsrs	r2, r3, #31
 800b95e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	4313      	orrs	r3, r2
 800b966:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 800b96a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 800b976:	4051      	eors	r1, r2
 800b978:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 800b97c:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 800b980:	404b      	eors	r3, r1
 800b982:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800b986:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800b98a:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800b98e:	e9c1 2300 	strd	r2, r3, [r1]

        Eba ^= Da;
 800b992:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800b996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b99a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	ea80 0602 	eor.w	r6, r0, r2
 800b9a6:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 800b9aa:	404b      	eors	r3, r1
 800b9ac:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800b9b0:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800b9b4:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800b9b8:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Eba;
 800b9bc:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800b9c8:	e9c1 2300 	strd	r2, r3, [r1]
        Ege ^= De;
 800b9cc:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800b9d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9d4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	ea80 0602 	eor.w	r6, r0, r2
 800b9e0:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 800b9e4:	404b      	eors	r3, r1
 800b9e6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800b9ea:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800b9ee:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800b9f2:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ege, 44);
 800b9f6:	f607 2034 	addw	r0, r7, #2612	; 0xa34
 800b9fa:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 800b9fe:	6803      	ldr	r3, [r0, #0]
 800ba00:	031a      	lsls	r2, r3, #12
 800ba02:	680b      	ldr	r3, [r1, #0]
 800ba04:	0d1b      	lsrs	r3, r3, #20
 800ba06:	4313      	orrs	r3, r2
 800ba08:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800ba0c:	680b      	ldr	r3, [r1, #0]
 800ba0e:	031a      	lsls	r2, r3, #12
 800ba10:	6803      	ldr	r3, [r0, #0]
 800ba12:	0d1b      	lsrs	r3, r3, #20
 800ba14:	4313      	orrs	r3, r2
 800ba16:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800ba1a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800ba1e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800ba22:	e9c1 2300 	strd	r2, r3, [r1]
        Eki ^= Di;
 800ba26:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800ba2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba2e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	ea80 0602 	eor.w	r6, r0, r2
 800ba3a:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 800ba3e:	404b      	eors	r3, r1
 800ba40:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800ba44:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800ba48:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800ba4c:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eki, 43);
 800ba50:	f607 2004 	addw	r0, r7, #2564	; 0xa04
 800ba54:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800ba58:	6803      	ldr	r3, [r0, #0]
 800ba5a:	02da      	lsls	r2, r3, #11
 800ba5c:	680b      	ldr	r3, [r1, #0]
 800ba5e:	0d5b      	lsrs	r3, r3, #21
 800ba60:	4313      	orrs	r3, r2
 800ba62:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800ba66:	680b      	ldr	r3, [r1, #0]
 800ba68:	02da      	lsls	r2, r3, #11
 800ba6a:	6803      	ldr	r3, [r0, #0]
 800ba6c:	0d5b      	lsrs	r3, r3, #21
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800ba74:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800ba78:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800ba7c:	e9c1 2300 	strd	r2, r3, [r1]
        Emo ^= Do;
 800ba80:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800ba84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba88:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	ea80 0602 	eor.w	r6, r0, r2
 800ba94:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 800ba98:	404b      	eors	r3, r1
 800ba9a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800ba9e:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 800baa2:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800baa6:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emo, 21);
 800baaa:	f507 601d 	add.w	r0, r7, #2512	; 0x9d0
 800baae:	f607 11d4 	addw	r1, r7, #2516	; 0x9d4
 800bab2:	6803      	ldr	r3, [r0, #0]
 800bab4:	0ada      	lsrs	r2, r3, #11
 800bab6:	680b      	ldr	r3, [r1, #0]
 800bab8:	055b      	lsls	r3, r3, #21
 800baba:	4313      	orrs	r3, r2
 800babc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800bac0:	680b      	ldr	r3, [r1, #0]
 800bac2:	0ada      	lsrs	r2, r3, #11
 800bac4:	6803      	ldr	r3, [r0, #0]
 800bac6:	055b      	lsls	r3, r3, #21
 800bac8:	4313      	orrs	r3, r2
 800baca:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800bace:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 800bad2:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800bad6:	e9c1 2300 	strd	r2, r3, [r1]
        Esu ^= Du;
 800bada:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800bade:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bae2:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	ea80 0602 	eor.w	r6, r0, r2
 800baee:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 800baf2:	404b      	eors	r3, r1
 800baf4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800baf8:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800bafc:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800bb00:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esu, 14);
 800bb04:	f507 601a 	add.w	r0, r7, #2464	; 0x9a0
 800bb08:	f607 11a4 	addw	r1, r7, #2468	; 0x9a4
 800bb0c:	6803      	ldr	r3, [r0, #0]
 800bb0e:	0c9a      	lsrs	r2, r3, #18
 800bb10:	680b      	ldr	r3, [r1, #0]
 800bb12:	039b      	lsls	r3, r3, #14
 800bb14:	4313      	orrs	r3, r2
 800bb16:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800bb1a:	680b      	ldr	r3, [r1, #0]
 800bb1c:	0c9a      	lsrs	r2, r3, #18
 800bb1e:	6803      	ldr	r3, [r0, #0]
 800bb20:	039b      	lsls	r3, r3, #14
 800bb22:	4313      	orrs	r3, r2
 800bb24:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800bb28:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800bb2c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800bb30:	e9c1 2300 	strd	r2, r3, [r1]
        Aba = BCa ^ ((~BCe) & BCi);
 800bb34:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	43d1      	mvns	r1, r2
 800bb3e:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 800bb42:	43db      	mvns	r3, r3
 800bb44:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 800bb48:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 800bb54:	4011      	ands	r1, r2
 800bb56:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 800bb5a:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 800bb5e:	400b      	ands	r3, r1
 800bb60:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800bb64:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 800bb70:	4051      	eors	r1, r2
 800bb72:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800bb76:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 800bb7a:	404b      	eors	r3, r1
 800bb7c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800bb80:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 800bb84:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800bb88:	e9c1 2300 	strd	r2, r3, [r1]
        Aba ^= (uint64_t)KeccakF_RoundConstants[round + 1];
 800bb8c:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800bb90:	3301      	adds	r3, #1
 800bb92:	4af3      	ldr	r2, [pc, #972]	; (800bf60 <KeccakF1600_StatePermute+0x21b0>)
 800bb94:	00db      	lsls	r3, r3, #3
 800bb96:	4413      	add	r3, r2
 800bb98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb9c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	ea82 0600 	eor.w	r6, r2, r0
 800bba8:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 800bbac:	404b      	eors	r3, r1
 800bbae:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800bbb2:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 800bbb6:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800bbba:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = BCe ^ ((~BCi) & BCo);
 800bbbe:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	43d1      	mvns	r1, r2
 800bbc8:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 800bbcc:	43db      	mvns	r3, r3
 800bbce:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 800bbd2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 800bbde:	4011      	ands	r1, r2
 800bbe0:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 800bbe4:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 800bbe8:	400b      	ands	r3, r1
 800bbea:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 800bbee:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 800bbfa:	4051      	eors	r1, r2
 800bbfc:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 800bc00:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 800bc04:	404b      	eors	r3, r1
 800bc06:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800bc0a:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 800bc0e:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 800bc12:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = BCi ^ ((~BCo) & BCu);
 800bc16:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	43d1      	mvns	r1, r2
 800bc20:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 800bc24:	43db      	mvns	r3, r3
 800bc26:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 800bc2a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 800bc36:	4011      	ands	r1, r2
 800bc38:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 800bc3c:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 800bc40:	400b      	ands	r3, r1
 800bc42:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 800bc46:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 800bc52:	4051      	eors	r1, r2
 800bc54:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800bc58:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 800bc5c:	404b      	eors	r3, r1
 800bc5e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800bc62:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 800bc66:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800bc6a:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = BCo ^ ((~BCu) & BCa);
 800bc6e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	43d1      	mvns	r1, r2
 800bc78:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 800bc7c:	43db      	mvns	r3, r3
 800bc7e:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 800bc82:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 800bc8e:	4011      	ands	r1, r2
 800bc90:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 800bc94:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 800bc98:	400b      	ands	r3, r1
 800bc9a:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800bc9e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800bca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca6:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 800bcaa:	4051      	eors	r1, r2
 800bcac:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 800bcb0:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 800bcb4:	404b      	eors	r3, r1
 800bcb6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800bcba:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800bcbe:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800bcc2:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = BCu ^ ((~BCa) & BCe);
 800bcc6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	43d1      	mvns	r1, r2
 800bcd0:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 800bcd4:	43db      	mvns	r3, r3
 800bcd6:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800bcda:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 800bce6:	4011      	ands	r1, r2
 800bce8:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 800bcec:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 800bcf0:	400b      	ands	r3, r1
 800bcf2:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800bcf6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 800bd02:	4051      	eors	r1, r2
 800bd04:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 800bd08:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 800bd0c:	404b      	eors	r3, r1
 800bd0e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800bd12:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800bd16:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 800bd1a:	e9c1 2300 	strd	r2, r3, [r1]

        Ebo ^= Do;
 800bd1e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800bd22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd26:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	ea80 0602 	eor.w	r6, r0, r2
 800bd32:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 800bd36:	404b      	eors	r3, r1
 800bd38:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800bd3c:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 800bd40:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800bd44:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebo, 28);
 800bd48:	f607 2048 	addw	r0, r7, #2632	; 0xa48
 800bd4c:	f607 214c 	addw	r1, r7, #2636	; 0xa4c
 800bd50:	6803      	ldr	r3, [r0, #0]
 800bd52:	091a      	lsrs	r2, r3, #4
 800bd54:	680b      	ldr	r3, [r1, #0]
 800bd56:	071b      	lsls	r3, r3, #28
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800bd5e:	680b      	ldr	r3, [r1, #0]
 800bd60:	091a      	lsrs	r2, r3, #4
 800bd62:	6803      	ldr	r3, [r0, #0]
 800bd64:	071b      	lsls	r3, r3, #28
 800bd66:	4313      	orrs	r3, r2
 800bd68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800bd6c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800bd70:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800bd74:	e9c1 2300 	strd	r2, r3, [r1]
        Egu ^= Du;
 800bd78:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 800bd7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd80:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	ea80 0602 	eor.w	r6, r0, r2
 800bd8c:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 800bd90:	404b      	eors	r3, r1
 800bd92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800bd96:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800bd9a:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800bd9e:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egu, 20);
 800bda2:	f607 2018 	addw	r0, r7, #2584	; 0xa18
 800bda6:	f607 211c 	addw	r1, r7, #2588	; 0xa1c
 800bdaa:	6803      	ldr	r3, [r0, #0]
 800bdac:	0b1a      	lsrs	r2, r3, #12
 800bdae:	680b      	ldr	r3, [r1, #0]
 800bdb0:	051b      	lsls	r3, r3, #20
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800bdb8:	680b      	ldr	r3, [r1, #0]
 800bdba:	0b1a      	lsrs	r2, r3, #12
 800bdbc:	6803      	ldr	r3, [r0, #0]
 800bdbe:	051b      	lsls	r3, r3, #20
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800bdc6:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800bdca:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800bdce:	e9c1 2300 	strd	r2, r3, [r1]
        Eka ^= Da;
 800bdd2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800bdd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdda:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	ea80 0602 	eor.w	r6, r0, r2
 800bde6:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 800bdea:	404b      	eors	r3, r1
 800bdec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800bdf0:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 800bdf4:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800bdf8:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eka, 3);
 800bdfc:	f507 6021 	add.w	r0, r7, #2576	; 0xa10
 800be00:	f607 2114 	addw	r1, r7, #2580	; 0xa14
 800be04:	6803      	ldr	r3, [r0, #0]
 800be06:	0f5a      	lsrs	r2, r3, #29
 800be08:	680b      	ldr	r3, [r1, #0]
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	4313      	orrs	r3, r2
 800be0e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800be12:	680b      	ldr	r3, [r1, #0]
 800be14:	0f5a      	lsrs	r2, r3, #29
 800be16:	6803      	ldr	r3, [r0, #0]
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	4313      	orrs	r3, r2
 800be1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800be20:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800be24:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800be28:	e9c1 2300 	strd	r2, r3, [r1]
        Eme ^= De;
 800be2c:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800be30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be34:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	ea80 0602 	eor.w	r6, r0, r2
 800be40:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 800be44:	404b      	eors	r3, r1
 800be46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800be4a:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800be4e:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800be52:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Eme, 45);
 800be56:	f607 10e4 	addw	r0, r7, #2532	; 0x9e4
 800be5a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800be5e:	6803      	ldr	r3, [r0, #0]
 800be60:	035a      	lsls	r2, r3, #13
 800be62:	680b      	ldr	r3, [r1, #0]
 800be64:	0cdb      	lsrs	r3, r3, #19
 800be66:	4313      	orrs	r3, r2
 800be68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800be6c:	680b      	ldr	r3, [r1, #0]
 800be6e:	035a      	lsls	r2, r3, #13
 800be70:	6803      	ldr	r3, [r0, #0]
 800be72:	0cdb      	lsrs	r3, r3, #19
 800be74:	4313      	orrs	r3, r2
 800be76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800be7a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800be7e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800be82:	e9c1 2300 	strd	r2, r3, [r1]
        Esi ^= Di;
 800be86:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800be8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be8e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	ea80 0602 	eor.w	r6, r0, r2
 800be9a:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 800be9e:	404b      	eors	r3, r1
 800bea0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800bea4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800bea8:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800beac:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esi, 61);
 800beb0:	f607 10b4 	addw	r0, r7, #2484	; 0x9b4
 800beb4:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 800beb8:	6803      	ldr	r3, [r0, #0]
 800beba:	075a      	lsls	r2, r3, #29
 800bebc:	680b      	ldr	r3, [r1, #0]
 800bebe:	08db      	lsrs	r3, r3, #3
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800bec6:	680b      	ldr	r3, [r1, #0]
 800bec8:	075a      	lsls	r2, r3, #29
 800beca:	6803      	ldr	r3, [r0, #0]
 800becc:	08db      	lsrs	r3, r3, #3
 800bece:	4313      	orrs	r3, r2
 800bed0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800bed4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800bed8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800bedc:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = BCa ^ ((~BCe) & BCi);
 800bee0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	43d1      	mvns	r1, r2
 800beea:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 800beee:	43db      	mvns	r3, r3
 800bef0:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 800bef4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 800bf00:	4011      	ands	r1, r2
 800bf02:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 800bf06:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 800bf0a:	400b      	ands	r3, r1
 800bf0c:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800bf10:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 800bf1c:	4051      	eors	r1, r2
 800bf1e:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 800bf22:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 800bf26:	404b      	eors	r3, r1
 800bf28:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800bf2c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800bf30:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800bf34:	e9c1 2300 	strd	r2, r3, [r1]
        Age = BCe ^ ((~BCi) & BCo);
 800bf38:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	43d1      	mvns	r1, r2
 800bf42:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800bf46:	43db      	mvns	r3, r3
 800bf48:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800bf4c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 800bf58:	4011      	ands	r1, r2
 800bf5a:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 800bf5e:	e001      	b.n	800bf64 <KeccakF1600_StatePermute+0x21b4>
 800bf60:	080c47d0 	.word	0x080c47d0
 800bf64:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 800bf68:	400b      	ands	r3, r1
 800bf6a:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800bf6e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 800bf7a:	4051      	eors	r1, r2
 800bf7c:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 800bf80:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 800bf84:	404b      	eors	r3, r1
 800bf86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800bf8a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800bf8e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 800bf92:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = BCi ^ ((~BCo) & BCu);
 800bf96:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	43d1      	mvns	r1, r2
 800bfa0:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 800bfa4:	43db      	mvns	r3, r3
 800bfa6:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 800bfaa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb2:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 800bfb6:	4011      	ands	r1, r2
 800bfb8:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 800bfbc:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 800bfc0:	400b      	ands	r3, r1
 800bfc2:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800bfc6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 800bfd2:	4051      	eors	r1, r2
 800bfd4:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800bfd8:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 800bfdc:	404b      	eors	r3, r1
 800bfde:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800bfe2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800bfe6:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800bfea:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = BCo ^ ((~BCu) & BCa);
 800bfee:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	43d1      	mvns	r1, r2
 800bff8:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 800bffc:	43db      	mvns	r3, r3
 800bffe:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 800c002:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 800c00e:	4011      	ands	r1, r2
 800c010:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 800c014:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 800c018:	400b      	ands	r3, r1
 800c01a:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800c01e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 800c02a:	4051      	eors	r1, r2
 800c02c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800c030:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 800c034:	404b      	eors	r3, r1
 800c036:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800c03a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800c03e:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800c042:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = BCu ^ ((~BCa) & BCe);
 800c046:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	43d1      	mvns	r1, r2
 800c050:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 800c054:	43db      	mvns	r3, r3
 800c056:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 800c05a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 800c066:	4011      	ands	r1, r2
 800c068:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 800c06c:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 800c070:	400b      	ands	r3, r1
 800c072:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800c076:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 800c082:	4051      	eors	r1, r2
 800c084:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800c088:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 800c08c:	404b      	eors	r3, r1
 800c08e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800c092:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800c096:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800c09a:	e9c1 2300 	strd	r2, r3, [r1]

        Ebe ^= De;
 800c09e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0a6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	ea80 0602 	eor.w	r6, r0, r2
 800c0b2:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 800c0b6:	404b      	eors	r3, r1
 800c0b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800c0bc:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800c0c0:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 800c0c4:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebe, 1);
 800c0c8:	f607 2058 	addw	r0, r7, #2648	; 0xa58
 800c0cc:	f607 215c 	addw	r1, r7, #2652	; 0xa5c
 800c0d0:	6803      	ldr	r3, [r0, #0]
 800c0d2:	0fda      	lsrs	r2, r3, #31
 800c0d4:	680b      	ldr	r3, [r1, #0]
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800c0de:	680b      	ldr	r3, [r1, #0]
 800c0e0:	0fda      	lsrs	r2, r3, #31
 800c0e2:	6803      	ldr	r3, [r0, #0]
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800c0ec:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800c0f0:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800c0f4:	e9c1 2300 	strd	r2, r3, [r1]
        Egi ^= Di;
 800c0f8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 800c0fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c100:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	ea80 0602 	eor.w	r6, r0, r2
 800c10c:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 800c110:	404b      	eors	r3, r1
 800c112:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800c116:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800c11a:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800c11e:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egi, 6);
 800c122:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 800c126:	f607 212c 	addw	r1, r7, #2604	; 0xa2c
 800c12a:	6803      	ldr	r3, [r0, #0]
 800c12c:	0e9a      	lsrs	r2, r3, #26
 800c12e:	680b      	ldr	r3, [r1, #0]
 800c130:	019b      	lsls	r3, r3, #6
 800c132:	4313      	orrs	r3, r2
 800c134:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800c138:	680b      	ldr	r3, [r1, #0]
 800c13a:	0e9a      	lsrs	r2, r3, #26
 800c13c:	6803      	ldr	r3, [r0, #0]
 800c13e:	019b      	lsls	r3, r3, #6
 800c140:	4313      	orrs	r3, r2
 800c142:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800c146:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c14a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800c14e:	e9c1 2300 	strd	r2, r3, [r1]
        Eko ^= Do;
 800c152:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 800c156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c15a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	ea80 0602 	eor.w	r6, r0, r2
 800c166:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 800c16a:	404b      	eors	r3, r1
 800c16c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800c170:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800c174:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800c178:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eko, 25);
 800c17c:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 800c180:	f607 11fc 	addw	r1, r7, #2556	; 0x9fc
 800c184:	6803      	ldr	r3, [r0, #0]
 800c186:	09da      	lsrs	r2, r3, #7
 800c188:	680b      	ldr	r3, [r1, #0]
 800c18a:	065b      	lsls	r3, r3, #25
 800c18c:	4313      	orrs	r3, r2
 800c18e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800c192:	680b      	ldr	r3, [r1, #0]
 800c194:	09da      	lsrs	r2, r3, #7
 800c196:	6803      	ldr	r3, [r0, #0]
 800c198:	065b      	lsls	r3, r3, #25
 800c19a:	4313      	orrs	r3, r2
 800c19c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800c1a0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c1a4:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800c1a8:	e9c1 2300 	strd	r2, r3, [r1]
        Emu ^= Du;
 800c1ac:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800c1b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1b4:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1bc:	ea80 0602 	eor.w	r6, r0, r2
 800c1c0:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 800c1c4:	404b      	eors	r3, r1
 800c1c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800c1ca:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c1ce:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 800c1d2:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emu, 8);
 800c1d6:	f607 10c8 	addw	r0, r7, #2504	; 0x9c8
 800c1da:	f607 11cc 	addw	r1, r7, #2508	; 0x9cc
 800c1de:	6803      	ldr	r3, [r0, #0]
 800c1e0:	0e1a      	lsrs	r2, r3, #24
 800c1e2:	680b      	ldr	r3, [r1, #0]
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800c1ec:	680b      	ldr	r3, [r1, #0]
 800c1ee:	0e1a      	lsrs	r2, r3, #24
 800c1f0:	6803      	ldr	r3, [r0, #0]
 800c1f2:	021b      	lsls	r3, r3, #8
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800c1fa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c1fe:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800c202:	e9c1 2300 	strd	r2, r3, [r1]
        Esa ^= Da;
 800c206:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800c20a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c20e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	ea80 0602 	eor.w	r6, r0, r2
 800c21a:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 800c21e:	404b      	eors	r3, r1
 800c220:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800c224:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c228:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 800c22c:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esa, 18);
 800c230:	f507 601c 	add.w	r0, r7, #2496	; 0x9c0
 800c234:	f607 11c4 	addw	r1, r7, #2500	; 0x9c4
 800c238:	6803      	ldr	r3, [r0, #0]
 800c23a:	0b9a      	lsrs	r2, r3, #14
 800c23c:	680b      	ldr	r3, [r1, #0]
 800c23e:	049b      	lsls	r3, r3, #18
 800c240:	4313      	orrs	r3, r2
 800c242:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c246:	680b      	ldr	r3, [r1, #0]
 800c248:	0b9a      	lsrs	r2, r3, #14
 800c24a:	6803      	ldr	r3, [r0, #0]
 800c24c:	049b      	lsls	r3, r3, #18
 800c24e:	4313      	orrs	r3, r2
 800c250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c254:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c258:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800c25c:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = BCa ^ ((~BCe) & BCi);
 800c260:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	43d1      	mvns	r1, r2
 800c26a:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 800c26e:	43db      	mvns	r3, r3
 800c270:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800c274:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 800c280:	4011      	ands	r1, r2
 800c282:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 800c286:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 800c28a:	400b      	ands	r3, r1
 800c28c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800c290:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 800c29c:	4051      	eors	r1, r2
 800c29e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800c2a2:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 800c2a6:	404b      	eors	r3, r1
 800c2a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800c2ac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c2b0:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800c2b4:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = BCe ^ ((~BCi) & BCo);
 800c2b8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	43d1      	mvns	r1, r2
 800c2c2:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 800c2c6:	43db      	mvns	r3, r3
 800c2c8:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800c2cc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d4:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 800c2d8:	4011      	ands	r1, r2
 800c2da:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 800c2de:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 800c2e2:	400b      	ands	r3, r1
 800c2e4:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800c2e8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 800c2f4:	4051      	eors	r1, r2
 800c2f6:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800c2fa:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 800c2fe:	404b      	eors	r3, r1
 800c300:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c304:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c308:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800c30c:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = BCi ^ ((~BCo) & BCu);
 800c310:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	43d1      	mvns	r1, r2
 800c31a:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 800c31e:	43db      	mvns	r3, r3
 800c320:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800c324:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c330:	4011      	ands	r1, r2
 800c332:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 800c336:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 800c33a:	400b      	ands	r3, r1
 800c33c:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800c340:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 800c34c:	4051      	eors	r1, r2
 800c34e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800c352:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 800c356:	404b      	eors	r3, r1
 800c358:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c35c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800c360:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 800c364:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = BCo ^ ((~BCu) & BCa);
 800c368:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	43d1      	mvns	r1, r2
 800c372:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 800c376:	43db      	mvns	r3, r3
 800c378:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c37c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c388:	4011      	ands	r1, r2
 800c38a:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 800c38e:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 800c392:	400b      	ands	r3, r1
 800c394:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800c398:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 800c3a4:	4051      	eors	r1, r2
 800c3a6:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800c3aa:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 800c3ae:	404b      	eors	r3, r1
 800c3b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c3b4:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800c3b8:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800c3bc:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = BCu ^ ((~BCa) & BCe);
 800c3c0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	43d1      	mvns	r1, r2
 800c3ca:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 800c3ce:	43db      	mvns	r3, r3
 800c3d0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800c3d4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800c3e0:	4011      	ands	r1, r2
 800c3e2:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 800c3e6:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800c3ea:	400b      	ands	r3, r1
 800c3ec:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800c3f0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 800c3fc:	4051      	eors	r1, r2
 800c3fe:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800c402:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 800c406:	404b      	eors	r3, r1
 800c408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c40c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800c410:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 800c414:	e9c1 2300 	strd	r2, r3, [r1]

        Ebu ^= Du;
 800c418:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800c41c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c420:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	ea80 0602 	eor.w	r6, r0, r2
 800c42c:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 800c430:	404b      	eors	r3, r1
 800c432:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c436:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800c43a:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800c43e:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebu, 27);
 800c442:	f507 6024 	add.w	r0, r7, #2624	; 0xa40
 800c446:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 800c44a:	6803      	ldr	r3, [r0, #0]
 800c44c:	095a      	lsrs	r2, r3, #5
 800c44e:	680b      	ldr	r3, [r1, #0]
 800c450:	06db      	lsls	r3, r3, #27
 800c452:	4313      	orrs	r3, r2
 800c454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c458:	680b      	ldr	r3, [r1, #0]
 800c45a:	095a      	lsrs	r2, r3, #5
 800c45c:	6803      	ldr	r3, [r0, #0]
 800c45e:	06db      	lsls	r3, r3, #27
 800c460:	4313      	orrs	r3, r2
 800c462:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c466:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800c46a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800c46e:	e9c1 2300 	strd	r2, r3, [r1]
        Ega ^= Da;
 800c472:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800c476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c47a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	ea80 0602 	eor.w	r6, r0, r2
 800c486:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 800c48a:	404b      	eors	r3, r1
 800c48c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c490:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800c494:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800c498:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ega, 36);
 800c49c:	f607 203c 	addw	r0, r7, #2620	; 0xa3c
 800c4a0:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800c4a4:	6803      	ldr	r3, [r0, #0]
 800c4a6:	011a      	lsls	r2, r3, #4
 800c4a8:	680b      	ldr	r3, [r1, #0]
 800c4aa:	0f1b      	lsrs	r3, r3, #28
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4b2:	680b      	ldr	r3, [r1, #0]
 800c4b4:	011a      	lsls	r2, r3, #4
 800c4b6:	6803      	ldr	r3, [r0, #0]
 800c4b8:	0f1b      	lsrs	r3, r3, #28
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4c0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800c4c4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800c4c8:	e9c1 2300 	strd	r2, r3, [r1]
        Eke ^= De;
 800c4cc:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800c4d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4d4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	ea80 0602 	eor.w	r6, r0, r2
 800c4e0:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 800c4e4:	404b      	eors	r3, r1
 800c4e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c4ea:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800c4ee:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800c4f2:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eke, 10);
 800c4f6:	f607 2008 	addw	r0, r7, #2568	; 0xa08
 800c4fa:	f607 210c 	addw	r1, r7, #2572	; 0xa0c
 800c4fe:	6803      	ldr	r3, [r0, #0]
 800c500:	0d9a      	lsrs	r2, r3, #22
 800c502:	680b      	ldr	r3, [r1, #0]
 800c504:	029b      	lsls	r3, r3, #10
 800c506:	4313      	orrs	r3, r2
 800c508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c50c:	680b      	ldr	r3, [r1, #0]
 800c50e:	0d9a      	lsrs	r2, r3, #22
 800c510:	6803      	ldr	r3, [r0, #0]
 800c512:	029b      	lsls	r3, r3, #10
 800c514:	4313      	orrs	r3, r2
 800c516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c51a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800c51e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800c522:	e9c1 2300 	strd	r2, r3, [r1]
        Emi ^= Di;
 800c526:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800c52a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c52e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	ea80 0602 	eor.w	r6, r0, r2
 800c53a:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 800c53e:	404b      	eors	r3, r1
 800c540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c544:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800c548:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 800c54c:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emi, 15);
 800c550:	f607 10d8 	addw	r0, r7, #2520	; 0x9d8
 800c554:	f607 11dc 	addw	r1, r7, #2524	; 0x9dc
 800c558:	6803      	ldr	r3, [r0, #0]
 800c55a:	0c5a      	lsrs	r2, r3, #17
 800c55c:	680b      	ldr	r3, [r1, #0]
 800c55e:	03db      	lsls	r3, r3, #15
 800c560:	4313      	orrs	r3, r2
 800c562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c566:	680b      	ldr	r3, [r1, #0]
 800c568:	0c5a      	lsrs	r2, r3, #17
 800c56a:	6803      	ldr	r3, [r0, #0]
 800c56c:	03db      	lsls	r3, r3, #15
 800c56e:	4313      	orrs	r3, r2
 800c570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c574:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800c578:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800c57c:	e9c1 2300 	strd	r2, r3, [r1]
        Eso ^= Do;
 800c580:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800c584:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c588:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	ea80 0602 	eor.w	r6, r0, r2
 800c594:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 800c598:	404b      	eors	r3, r1
 800c59a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c59e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800c5a2:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800c5a6:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Eso, 56);
 800c5aa:	f607 10ac 	addw	r0, r7, #2476	; 0x9ac
 800c5ae:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800c5b2:	6803      	ldr	r3, [r0, #0]
 800c5b4:	061a      	lsls	r2, r3, #24
 800c5b6:	680b      	ldr	r3, [r1, #0]
 800c5b8:	0a1b      	lsrs	r3, r3, #8
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c5c0:	680b      	ldr	r3, [r1, #0]
 800c5c2:	061a      	lsls	r2, r3, #24
 800c5c4:	6803      	ldr	r3, [r0, #0]
 800c5c6:	0a1b      	lsrs	r3, r3, #8
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c5ce:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800c5d2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800c5d6:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = BCa ^ ((~BCe) & BCi);
 800c5da:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	43d1      	mvns	r1, r2
 800c5e4:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 800c5e8:	43db      	mvns	r3, r3
 800c5ea:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800c5ee:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800c5fa:	4011      	ands	r1, r2
 800c5fc:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 800c600:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800c604:	400b      	ands	r3, r1
 800c606:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800c60a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c616:	4051      	eors	r1, r2
 800c618:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800c61c:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800c620:	404b      	eors	r3, r1
 800c622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c626:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800c62a:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800c62e:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = BCe ^ ((~BCi) & BCo);
 800c632:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	43d1      	mvns	r1, r2
 800c63c:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 800c640:	43db      	mvns	r3, r3
 800c642:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c646:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c652:	4011      	ands	r1, r2
 800c654:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 800c658:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c65c:	400b      	ands	r3, r1
 800c65e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800c662:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c66e:	4051      	eors	r1, r2
 800c670:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800c674:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800c678:	404b      	eors	r3, r1
 800c67a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c67e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800c682:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800c686:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = BCi ^ ((~BCo) & BCu);
 800c68a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	43d1      	mvns	r1, r2
 800c694:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800c698:	43db      	mvns	r3, r3
 800c69a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800c69e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800c6aa:	4011      	ands	r1, r2
 800c6ac:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 800c6b0:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800c6b4:	400b      	ands	r3, r1
 800c6b6:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800c6ba:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800c6c6:	4051      	eors	r1, r2
 800c6c8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c6cc:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800c6d0:	404b      	eors	r3, r1
 800c6d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c6d6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c6da:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800c6de:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = BCo ^ ((~BCu) & BCa);
 800c6e2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	43d1      	mvns	r1, r2
 800c6ec:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800c6f0:	43db      	mvns	r3, r3
 800c6f2:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800c6f6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800c702:	4011      	ands	r1, r2
 800c704:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 800c708:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800c70c:	400b      	ands	r3, r1
 800c70e:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800c712:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71a:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800c71e:	4051      	eors	r1, r2
 800c720:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c724:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800c728:	404b      	eors	r3, r1
 800c72a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c72e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c732:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800c736:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = BCu ^ ((~BCa) & BCe);
 800c73a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	43d1      	mvns	r1, r2
 800c744:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 800c748:	43db      	mvns	r3, r3
 800c74a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800c74e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800c75a:	4011      	ands	r1, r2
 800c75c:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 800c760:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800c764:	400b      	ands	r3, r1
 800c766:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800c76a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800c776:	4051      	eors	r1, r2
 800c778:	67b9      	str	r1, [r7, #120]	; 0x78
 800c77a:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800c77e:	404b      	eors	r3, r1
 800c780:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c782:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800c786:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800c78a:	e9c1 2300 	strd	r2, r3, [r1]

        Ebi ^= Di;
 800c78e:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800c792:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c796:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	ea80 0602 	eor.w	r6, r0, r2
 800c7a2:	673e      	str	r6, [r7, #112]	; 0x70
 800c7a4:	404b      	eors	r3, r1
 800c7a6:	677b      	str	r3, [r7, #116]	; 0x74
 800c7a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c7ac:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800c7b0:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebi, 62);
 800c7b4:	f607 2054 	addw	r0, r7, #2644	; 0xa54
 800c7b8:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800c7bc:	6803      	ldr	r3, [r0, #0]
 800c7be:	079a      	lsls	r2, r3, #30
 800c7c0:	680b      	ldr	r3, [r1, #0]
 800c7c2:	089b      	lsrs	r3, r3, #2
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7c8:	680b      	ldr	r3, [r1, #0]
 800c7ca:	079a      	lsls	r2, r3, #30
 800c7cc:	6803      	ldr	r3, [r0, #0]
 800c7ce:	089b      	lsrs	r3, r3, #2
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c7d8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800c7dc:	e9c1 2300 	strd	r2, r3, [r1]
        Ego ^= Do;
 800c7e0:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800c7e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7e8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	ea80 0602 	eor.w	r6, r0, r2
 800c7f4:	663e      	str	r6, [r7, #96]	; 0x60
 800c7f6:	404b      	eors	r3, r1
 800c7f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c7fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c7fe:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800c802:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ego, 55);
 800c806:	f607 2024 	addw	r0, r7, #2596	; 0xa24
 800c80a:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800c80e:	6803      	ldr	r3, [r0, #0]
 800c810:	05da      	lsls	r2, r3, #23
 800c812:	680b      	ldr	r3, [r1, #0]
 800c814:	0a5b      	lsrs	r3, r3, #9
 800c816:	4313      	orrs	r3, r2
 800c818:	65bb      	str	r3, [r7, #88]	; 0x58
 800c81a:	680b      	ldr	r3, [r1, #0]
 800c81c:	05da      	lsls	r2, r3, #23
 800c81e:	6803      	ldr	r3, [r0, #0]
 800c820:	0a5b      	lsrs	r3, r3, #9
 800c822:	4313      	orrs	r3, r2
 800c824:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c82a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800c82e:	e9c1 2300 	strd	r2, r3, [r1]
        Eku ^= Du;
 800c832:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800c836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c83a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	ea80 0602 	eor.w	r6, r0, r2
 800c846:	653e      	str	r6, [r7, #80]	; 0x50
 800c848:	404b      	eors	r3, r1
 800c84a:	657b      	str	r3, [r7, #84]	; 0x54
 800c84c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c850:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800c854:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eku, 39);
 800c858:	f607 10f4 	addw	r0, r7, #2548	; 0x9f4
 800c85c:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800c860:	6803      	ldr	r3, [r0, #0]
 800c862:	01da      	lsls	r2, r3, #7
 800c864:	680b      	ldr	r3, [r1, #0]
 800c866:	0e5b      	lsrs	r3, r3, #25
 800c868:	4313      	orrs	r3, r2
 800c86a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c86c:	680b      	ldr	r3, [r1, #0]
 800c86e:	01da      	lsls	r2, r3, #7
 800c870:	6803      	ldr	r3, [r0, #0]
 800c872:	0e5b      	lsrs	r3, r3, #25
 800c874:	4313      	orrs	r3, r2
 800c876:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c87c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800c880:	e9c1 2300 	strd	r2, r3, [r1]
        Ema ^= Da;
 800c884:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800c888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c88c:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	ea80 0602 	eor.w	r6, r0, r2
 800c898:	643e      	str	r6, [r7, #64]	; 0x40
 800c89a:	404b      	eors	r3, r1
 800c89c:	647b      	str	r3, [r7, #68]	; 0x44
 800c89e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c8a2:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800c8a6:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ema, 41);
 800c8aa:	f607 10ec 	addw	r0, r7, #2540	; 0x9ec
 800c8ae:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800c8b2:	6803      	ldr	r3, [r0, #0]
 800c8b4:	025a      	lsls	r2, r3, #9
 800c8b6:	680b      	ldr	r3, [r1, #0]
 800c8b8:	0ddb      	lsrs	r3, r3, #23
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8be:	680b      	ldr	r3, [r1, #0]
 800c8c0:	025a      	lsls	r2, r3, #9
 800c8c2:	6803      	ldr	r3, [r0, #0]
 800c8c4:	0ddb      	lsrs	r3, r3, #23
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c8ce:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800c8d2:	e9c1 2300 	strd	r2, r3, [r1]
        Ese ^= De;
 800c8d6:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800c8da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8de:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	ea80 0602 	eor.w	r6, r0, r2
 800c8ea:	633e      	str	r6, [r7, #48]	; 0x30
 800c8ec:	404b      	eors	r3, r1
 800c8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c8f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c8f4:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 800c8f8:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ese, 2);
 800c8fc:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 800c900:	f607 11bc 	addw	r1, r7, #2492	; 0x9bc
 800c904:	6803      	ldr	r3, [r0, #0]
 800c906:	0f9a      	lsrs	r2, r3, #30
 800c908:	680b      	ldr	r3, [r1, #0]
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	4313      	orrs	r3, r2
 800c90e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c910:	680b      	ldr	r3, [r1, #0]
 800c912:	0f9a      	lsrs	r2, r3, #30
 800c914:	6803      	ldr	r3, [r0, #0]
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4313      	orrs	r3, r2
 800c91a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c91c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c920:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800c924:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = BCa ^ ((~BCe) & BCi);
 800c928:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	43d1      	mvns	r1, r2
 800c932:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 800c936:	43db      	mvns	r3, r3
 800c938:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800c93c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 800c948:	4011      	ands	r1, r2
 800c94a:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 800c94e:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800c952:	400b      	ands	r3, r1
 800c954:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800c958:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800c964:	4051      	eors	r1, r2
 800c966:	6239      	str	r1, [r7, #32]
 800c968:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800c96c:	404b      	eors	r3, r1
 800c96e:	627b      	str	r3, [r7, #36]	; 0x24
 800c970:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c974:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800c978:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = BCe ^ ((~BCi) & BCo);
 800c97c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800c980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c984:	43d1      	mvns	r1, r2
 800c986:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 800c98a:	43db      	mvns	r3, r3
 800c98c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800c990:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 800c99c:	4011      	ands	r1, r2
 800c99e:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 800c9a2:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800c9a6:	400b      	ands	r3, r1
 800c9a8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800c9ac:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 800c9b8:	4051      	eors	r1, r2
 800c9ba:	61b9      	str	r1, [r7, #24]
 800c9bc:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 800c9c0:	404b      	eors	r3, r1
 800c9c2:	61fb      	str	r3, [r7, #28]
 800c9c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9c8:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 800c9cc:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = BCi ^ ((~BCo) & BCu);
 800c9d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	43d1      	mvns	r1, r2
 800c9da:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800c9de:	43db      	mvns	r3, r3
 800c9e0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800c9e4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800c9f0:	4011      	ands	r1, r2
 800c9f2:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 800c9f6:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 800c9fa:	400b      	ands	r3, r1
 800c9fc:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800ca00:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 800ca0c:	4051      	eors	r1, r2
 800ca0e:	6139      	str	r1, [r7, #16]
 800ca10:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 800ca14:	404b      	eors	r3, r1
 800ca16:	617b      	str	r3, [r7, #20]
 800ca18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca1c:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800ca20:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = BCo ^ ((~BCu) & BCa);
 800ca24:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	43d1      	mvns	r1, r2
 800ca2e:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 800ca32:	43db      	mvns	r3, r3
 800ca34:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800ca38:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ca3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca40:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 800ca44:	ea01 0a02 	and.w	sl, r1, r2
 800ca48:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 800ca4c:	ea01 0b03 	and.w	fp, r1, r3
 800ca50:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	ea82 010a 	eor.w	r1, r2, sl
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	ea83 030b 	eor.w	r3, r3, fp
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca68:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 800ca6c:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = BCu ^ ((~BCa) & BCe);
 800ca70:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	ea6f 0802 	mvn.w	r8, r2
 800ca7c:	ea6f 0903 	mvn.w	r9, r3
 800ca80:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	ea08 0402 	and.w	r4, r8, r2
 800ca8c:	ea09 0503 	and.w	r5, r9, r3
 800ca90:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	ea82 0104 	eor.w	r1, r2, r4
 800ca9c:	6039      	str	r1, [r7, #0]
 800ca9e:	406b      	eors	r3, r5
 800caa0:	607b      	str	r3, [r7, #4]
 800caa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caa6:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800caaa:	e9c1 2300 	strd	r2, r3, [r1]
    for (round = 0; round < NROUNDS; round += 2)
 800caae:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800cab2:	3302      	adds	r3, #2
 800cab4:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800cab8:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800cabc:	2b17      	cmp	r3, #23
 800cabe:	f77d aa65 	ble.w	8009f8c <KeccakF1600_StatePermute+0x1dc>
    }

    // copyToState(state, A)
    state[0]  = Aba;
 800cac2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cac6:	6819      	ldr	r1, [r3, #0]
 800cac8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	e9c1 2300 	strd	r2, r3, [r1]
    state[1]  = Abe;
 800cad4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f103 0108 	add.w	r1, r3, #8
 800cade:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	e9c1 2300 	strd	r2, r3, [r1]
    state[2]  = Abi;
 800caea:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f103 0110 	add.w	r1, r3, #16
 800caf4:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	e9c1 2300 	strd	r2, r3, [r1]
    state[3]  = Abo;
 800cb00:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f103 0118 	add.w	r1, r3, #24
 800cb0a:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	e9c1 2300 	strd	r2, r3, [r1]
    state[4]  = Abu;
 800cb16:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f103 0120 	add.w	r1, r3, #32
 800cb20:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	e9c1 2300 	strd	r2, r3, [r1]
    state[5]  = Aga;
 800cb2c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800cb36:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	e9c1 2300 	strd	r2, r3, [r1]
    state[6]  = Age;
 800cb42:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb4c:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	e9c1 2300 	strd	r2, r3, [r1]
    state[7]  = Agi;
 800cb58:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb62:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	e9c1 2300 	strd	r2, r3, [r1]
    state[8]  = Ago;
 800cb6e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cb78:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	e9c1 2300 	strd	r2, r3, [r1]
    state[9]  = Agu;
 800cb84:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800cb8e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	e9c1 2300 	strd	r2, r3, [r1]
    state[10] = Aka;
 800cb9a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800cba4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	e9c1 2300 	strd	r2, r3, [r1]
    state[11] = Ake;
 800cbb0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800cbba:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	e9c1 2300 	strd	r2, r3, [r1]
    state[12] = Aki;
 800cbc6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800cbd0:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	e9c1 2300 	strd	r2, r3, [r1]
    state[13] = Ako;
 800cbdc:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800cbe6:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	e9c1 2300 	strd	r2, r3, [r1]
    state[14] = Aku;
 800cbf2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800cbfc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	e9c1 2300 	strd	r2, r3, [r1]
    state[15] = Ama;
 800cc08:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800cc12:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	e9c1 2300 	strd	r2, r3, [r1]
    state[16] = Ame;
 800cc1e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800cc28:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	e9c1 2300 	strd	r2, r3, [r1]
    state[17] = Ami;
 800cc34:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800cc3e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	e9c1 2300 	strd	r2, r3, [r1]
    state[18] = Amo;
 800cc4a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800cc54:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	e9c1 2300 	strd	r2, r3, [r1]
    state[19] = Amu;
 800cc60:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800cc6a:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	e9c1 2300 	strd	r2, r3, [r1]
    state[20] = Asa;
 800cc76:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800cc80:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	e9c1 2300 	strd	r2, r3, [r1]
    state[21] = Ase;
 800cc8c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 800cc96:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9e:	e9c1 2300 	strd	r2, r3, [r1]
    state[22] = Asi;
 800cca2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 800ccac:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	e9c1 2300 	strd	r2, r3, [r1]
    state[23] = Aso;
 800ccb8:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800ccc2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800ccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccca:	e9c1 2300 	strd	r2, r3, [r1]
    state[24] = Asu;
 800ccce:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 800ccd8:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	e9c1 2300 	strd	r2, r3, [r1]

#undef round
}
 800cce4:	bf00      	nop
 800cce6:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 800ccea:	46bd      	mov	sp, r7
 800ccec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop

0800ccf4 <print_zz>:

@param[in] name  Name of value
@param[in] val   Value to print
*/
static inline void print_zz(const char *name, ZZ val)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
    printf("%s: %" PRIuZZ "\n", name, val);
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	6879      	ldr	r1, [r7, #4]
 800cd02:	4803      	ldr	r0, [pc, #12]	; (800cd10 <print_zz+0x1c>)
 800cd04:	f001 fcca 	bl	800e69c <iprintf>
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	0800fefc 	.word	0x0800fefc

0800cd14 <set_modulus_custom>:

#include "defines.h"
#include "util_print.h"

void set_modulus_custom(const ZZ q, ZZ hw, ZZ lw, Modulus *mod)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
    mod->value          = q;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	601a      	str	r2, [r3, #0]
    mod->const_ratio[1] = hw;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	609a      	str	r2, [r3, #8]
    mod->const_ratio[0] = lw;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	605a      	str	r2, [r3, #4]
}
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <set_modulus>:

bool set_modulus(const uint32_t q, Modulus *mod)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
    switch (q)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a90      	ldr	r2, [pc, #576]	; (800cf90 <set_modulus+0x250>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	f000 80a7 	beq.w	800cea2 <set_modulus+0x162>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a8e      	ldr	r2, [pc, #568]	; (800cf90 <set_modulus+0x250>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	f200 810a 	bhi.w	800cf72 <set_modulus+0x232>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a8c      	ldr	r2, [pc, #560]	; (800cf94 <set_modulus+0x254>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	f000 80a5 	beq.w	800ceb2 <set_modulus+0x172>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a8a      	ldr	r2, [pc, #552]	; (800cf94 <set_modulus+0x254>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	f200 8100 	bhi.w	800cf72 <set_modulus+0x232>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a88      	ldr	r2, [pc, #544]	; (800cf98 <set_modulus+0x258>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	f000 80a3 	beq.w	800cec2 <set_modulus+0x182>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a86      	ldr	r2, [pc, #536]	; (800cf98 <set_modulus+0x258>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	f200 80f6 	bhi.w	800cf72 <set_modulus+0x232>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a84      	ldr	r2, [pc, #528]	; (800cf9c <set_modulus+0x25c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	f000 80a1 	beq.w	800ced2 <set_modulus+0x192>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a82      	ldr	r2, [pc, #520]	; (800cf9c <set_modulus+0x25c>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	f200 80ec 	bhi.w	800cf72 <set_modulus+0x232>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a80      	ldr	r2, [pc, #512]	; (800cfa0 <set_modulus+0x260>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	f000 809f 	beq.w	800cee2 <set_modulus+0x1a2>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a7e      	ldr	r2, [pc, #504]	; (800cfa0 <set_modulus+0x260>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	f200 80e2 	bhi.w	800cf72 <set_modulus+0x232>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a7c      	ldr	r2, [pc, #496]	; (800cfa4 <set_modulus+0x264>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	f000 809d 	beq.w	800cef2 <set_modulus+0x1b2>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a7a      	ldr	r2, [pc, #488]	; (800cfa4 <set_modulus+0x264>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	f200 80d8 	bhi.w	800cf72 <set_modulus+0x232>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a78      	ldr	r2, [pc, #480]	; (800cfa8 <set_modulus+0x268>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	f000 809b 	beq.w	800cf02 <set_modulus+0x1c2>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a76      	ldr	r2, [pc, #472]	; (800cfa8 <set_modulus+0x268>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	f200 80ce 	bhi.w	800cf72 <set_modulus+0x232>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a74      	ldr	r2, [pc, #464]	; (800cfac <set_modulus+0x26c>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	f000 8099 	beq.w	800cf12 <set_modulus+0x1d2>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a72      	ldr	r2, [pc, #456]	; (800cfac <set_modulus+0x26c>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	f200 80c4 	bhi.w	800cf72 <set_modulus+0x232>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a70      	ldr	r2, [pc, #448]	; (800cfb0 <set_modulus+0x270>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	f000 8097 	beq.w	800cf22 <set_modulus+0x1e2>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a6e      	ldr	r2, [pc, #440]	; (800cfb0 <set_modulus+0x270>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	f200 80ba 	bhi.w	800cf72 <set_modulus+0x232>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a6c      	ldr	r2, [pc, #432]	; (800cfb4 <set_modulus+0x274>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	f000 8095 	beq.w	800cf32 <set_modulus+0x1f2>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a6a      	ldr	r2, [pc, #424]	; (800cfb4 <set_modulus+0x274>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	f200 80b0 	bhi.w	800cf72 <set_modulus+0x232>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a68      	ldr	r2, [pc, #416]	; (800cfb8 <set_modulus+0x278>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	f000 8093 	beq.w	800cf42 <set_modulus+0x202>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	4a66      	ldr	r2, [pc, #408]	; (800cfb8 <set_modulus+0x278>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	f200 80a6 	bhi.w	800cf72 <set_modulus+0x232>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a64      	ldr	r2, [pc, #400]	; (800cfbc <set_modulus+0x27c>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	f000 8091 	beq.w	800cf52 <set_modulus+0x212>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a62      	ldr	r2, [pc, #392]	; (800cfbc <set_modulus+0x27c>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	f200 809c 	bhi.w	800cf72 <set_modulus+0x232>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4a60      	ldr	r2, [pc, #384]	; (800cfc0 <set_modulus+0x280>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	f000 808f 	beq.w	800cf62 <set_modulus+0x222>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a5e      	ldr	r2, [pc, #376]	; (800cfc0 <set_modulus+0x280>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	f200 8092 	bhi.w	800cf72 <set_modulus+0x232>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a5c      	ldr	r2, [pc, #368]	; (800cfc4 <set_modulus+0x284>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d00d      	beq.n	800ce72 <set_modulus+0x132>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4a5a      	ldr	r2, [pc, #360]	; (800cfc4 <set_modulus+0x284>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	f200 8089 	bhi.w	800cf72 <set_modulus+0x232>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a59      	ldr	r2, [pc, #356]	; (800cfc8 <set_modulus+0x288>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d014      	beq.n	800ce92 <set_modulus+0x152>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a58      	ldr	r2, [pc, #352]	; (800cfcc <set_modulus+0x28c>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d008      	beq.n	800ce82 <set_modulus+0x142>
 800ce70:	e07f      	b.n	800cf72 <set_modulus+0x232>
    {
        // -- Add cases for custom primes here

        // -- 27 bit primes
        case 134176769: set_modulus_custom(q, 0x20, 0x2802e03, mod); return 1;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	4a56      	ldr	r2, [pc, #344]	; (800cfd0 <set_modulus+0x290>)
 800ce76:	2120      	movs	r1, #32
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f7ff ff4b 	bl	800cd14 <set_modulus_custom>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e082      	b.n	800cf88 <set_modulus+0x248>
        case 134111233: set_modulus_custom(q, 0x20, 0x6814e43, mod); return 1;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	4a53      	ldr	r2, [pc, #332]	; (800cfd4 <set_modulus+0x294>)
 800ce86:	2120      	movs	r1, #32
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7ff ff43 	bl	800cd14 <set_modulus_custom>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e07a      	b.n	800cf88 <set_modulus+0x248>
        case 134012929: set_modulus_custom(q, 0x20, 0xc84dfe5, mod); return 1;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	4a50      	ldr	r2, [pc, #320]	; (800cfd8 <set_modulus+0x298>)
 800ce96:	2120      	movs	r1, #32
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff ff3b 	bl	800cd14 <set_modulus_custom>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e072      	b.n	800cf88 <set_modulus+0x248>

        // -- 30-bit primes
        case 1062535169: set_modulus_custom(q, 0x4, 0xaccdb49, mod); return 1;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	4a4d      	ldr	r2, [pc, #308]	; (800cfdc <set_modulus+0x29c>)
 800cea6:	2104      	movs	r1, #4
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7ff ff33 	bl	800cd14 <set_modulus_custom>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e06a      	b.n	800cf88 <set_modulus+0x248>
        case 1062469633: set_modulus_custom(q, 0x4, 0xadd3267, mod); return 1;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	4a4a      	ldr	r2, [pc, #296]	; (800cfe0 <set_modulus+0x2a0>)
 800ceb6:	2104      	movs	r1, #4
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f7ff ff2b 	bl	800cd14 <set_modulus_custom>
 800cebe:	2301      	movs	r3, #1
 800cec0:	e062      	b.n	800cf88 <set_modulus+0x248>
        case 1061093377: set_modulus_custom(q, 0x4, 0xc34cf30, mod); return 1;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	4a47      	ldr	r2, [pc, #284]	; (800cfe4 <set_modulus+0x2a4>)
 800cec6:	2104      	movs	r1, #4
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7ff ff23 	bl	800cd14 <set_modulus_custom>
 800cece:	2301      	movs	r3, #1
 800ced0:	e05a      	b.n	800cf88 <set_modulus+0x248>
        case 1060765697: set_modulus_custom(q, 0x4, 0xc86c0d4, mod); return 1;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	4a44      	ldr	r2, [pc, #272]	; (800cfe8 <set_modulus+0x2a8>)
 800ced6:	2104      	movs	r1, #4
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff ff1b 	bl	800cd14 <set_modulus_custom>
 800cede:	2301      	movs	r3, #1
 800cee0:	e052      	b.n	800cf88 <set_modulus+0x248>
        case 1060700161: set_modulus_custom(q, 0x4, 0xc9725e9, mod); return 1;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	4a41      	ldr	r2, [pc, #260]	; (800cfec <set_modulus+0x2ac>)
 800cee6:	2104      	movs	r1, #4
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff ff13 	bl	800cd14 <set_modulus_custom>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e04a      	b.n	800cf88 <set_modulus+0x248>
        case 1060175873: set_modulus_custom(q, 0x4, 0xd1a6142, mod); return 1;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	4a3e      	ldr	r2, [pc, #248]	; (800cff0 <set_modulus+0x2b0>)
 800cef6:	2104      	movs	r1, #4
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff ff0b 	bl	800cd14 <set_modulus_custom>
 800cefe:	2301      	movs	r3, #1
 800cf00:	e042      	b.n	800cf88 <set_modulus+0x248>
        case 1058209793: set_modulus_custom(q, 0x4, 0xf07a84a, mod); return 1;
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	4a3b      	ldr	r2, [pc, #236]	; (800cff4 <set_modulus+0x2b4>)
 800cf06:	2104      	movs	r1, #4
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff ff03 	bl	800cd14 <set_modulus_custom>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e03a      	b.n	800cf88 <set_modulus+0x248>
        case 1056440321: set_modulus_custom(q, 0x4, 0x10c52d4a, mod); return 1;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	4a38      	ldr	r2, [pc, #224]	; (800cff8 <set_modulus+0x2b8>)
 800cf16:	2104      	movs	r1, #4
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7ff fefb 	bl	800cd14 <set_modulus_custom>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e032      	b.n	800cf88 <set_modulus+0x248>
        case 1056178177: set_modulus_custom(q, 0x4, 0x11074e88, mod); return 1;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	4a35      	ldr	r2, [pc, #212]	; (800cffc <set_modulus+0x2bc>)
 800cf26:	2104      	movs	r1, #4
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7ff fef3 	bl	800cd14 <set_modulus_custom>
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e02a      	b.n	800cf88 <set_modulus+0x248>
        case 1055260673: set_modulus_custom(q, 0x4, 0x11ef051e, mod); return 1;
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	4a32      	ldr	r2, [pc, #200]	; (800d000 <set_modulus+0x2c0>)
 800cf36:	2104      	movs	r1, #4
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff feeb 	bl	800cd14 <set_modulus_custom>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e022      	b.n	800cf88 <set_modulus+0x248>
        case 1054212097: set_modulus_custom(q, 0x4, 0x12f85437, mod); return 1;
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	4a2f      	ldr	r2, [pc, #188]	; (800d004 <set_modulus+0x2c4>)
 800cf46:	2104      	movs	r1, #4
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff fee3 	bl	800cd14 <set_modulus_custom>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e01a      	b.n	800cf88 <set_modulus+0x248>
        case 1054015489: set_modulus_custom(q, 0x4, 0x132a2218, mod); return 1;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	4a2c      	ldr	r2, [pc, #176]	; (800d008 <set_modulus+0x2c8>)
 800cf56:	2104      	movs	r1, #4
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff fedb 	bl	800cd14 <set_modulus_custom>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e012      	b.n	800cf88 <set_modulus+0x248>
        case 1053818881: set_modulus_custom(q, 0x4, 0x135bf4ba, mod); return 1;
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	4a29      	ldr	r2, [pc, #164]	; (800d00c <set_modulus+0x2cc>)
 800cf66:	2104      	movs	r1, #4
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff fed3 	bl	800cd14 <set_modulus_custom>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e00a      	b.n	800cf88 <set_modulus+0x248>

        default:
            printf("Modulus const ratio values not found for ");
 800cf72:	4827      	ldr	r0, [pc, #156]	; (800d010 <set_modulus+0x2d0>)
 800cf74:	f001 fb92 	bl	800e69c <iprintf>
            print_zz("Modulus value", q);
 800cf78:	6879      	ldr	r1, [r7, #4]
 800cf7a:	4826      	ldr	r0, [pc, #152]	; (800d014 <set_modulus+0x2d4>)
 800cf7c:	f7ff feba 	bl	800ccf4 <print_zz>
            printf("Please try set_modulus_custom instead.");
 800cf80:	4825      	ldr	r0, [pc, #148]	; (800d018 <set_modulus+0x2d8>)
 800cf82:	f001 fb8b 	bl	800e69c <iprintf>
            return 0;
 800cf86:	2300      	movs	r3, #0
    }
    return 0;
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	3f550001 	.word	0x3f550001
 800cf94:	3f540001 	.word	0x3f540001
 800cf98:	3f3f0001 	.word	0x3f3f0001
 800cf9c:	3f3a0001 	.word	0x3f3a0001
 800cfa0:	3f390001 	.word	0x3f390001
 800cfa4:	3f310001 	.word	0x3f310001
 800cfa8:	3f130001 	.word	0x3f130001
 800cfac:	3ef80001 	.word	0x3ef80001
 800cfb0:	3ef40001 	.word	0x3ef40001
 800cfb4:	3ee60001 	.word	0x3ee60001
 800cfb8:	3ed60001 	.word	0x3ed60001
 800cfbc:	3ed30001 	.word	0x3ed30001
 800cfc0:	3ed00001 	.word	0x3ed00001
 800cfc4:	07ff6001 	.word	0x07ff6001
 800cfc8:	07fce001 	.word	0x07fce001
 800cfcc:	07fe6001 	.word	0x07fe6001
 800cfd0:	02802e03 	.word	0x02802e03
 800cfd4:	06814e43 	.word	0x06814e43
 800cfd8:	0c84dfe5 	.word	0x0c84dfe5
 800cfdc:	0accdb49 	.word	0x0accdb49
 800cfe0:	0add3267 	.word	0x0add3267
 800cfe4:	0c34cf30 	.word	0x0c34cf30
 800cfe8:	0c86c0d4 	.word	0x0c86c0d4
 800cfec:	0c9725e9 	.word	0x0c9725e9
 800cff0:	0d1a6142 	.word	0x0d1a6142
 800cff4:	0f07a84a 	.word	0x0f07a84a
 800cff8:	10c52d4a 	.word	0x10c52d4a
 800cffc:	11074e88 	.word	0x11074e88
 800d000:	11ef051e 	.word	0x11ef051e
 800d004:	12f85437 	.word	0x12f85437
 800d008:	132a2218 	.word	0x132a2218
 800d00c:	135bf4ba 	.word	0x135bf4ba
 800d010:	0800ff08 	.word	0x0800ff08
 800d014:	0800ff34 	.word	0x0800ff34
 800d018:	0800ff44 	.word	0x0800ff44

0800d01c <add_uint32>:
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
    *res = op1 + op2;
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	441a      	add	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	601a      	str	r2, [r3, #0]
    return (uint8_t)(*res < op1);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	429a      	cmp	r2, r3
 800d03a:	bf8c      	ite	hi
 800d03c:	2301      	movhi	r3, #1
 800d03e:	2300      	movls	r3, #0
 800d040:	b2db      	uxtb	r3, r3
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <mul_uint32_wide>:
{
 800d04e:	b4b0      	push	{r4, r5, r7}
 800d050:	b087      	sub	sp, #28
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
    uint64_t res_temp = (uint64_t)op1 * (uint64_t)op2;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f04f 0100 	mov.w	r1, #0
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	461a      	mov	r2, r3
 800d066:	f04f 0300 	mov.w	r3, #0
 800d06a:	fb02 f501 	mul.w	r5, r2, r1
 800d06e:	fb00 f403 	mul.w	r4, r0, r3
 800d072:	442c      	add	r4, r5
 800d074:	fba0 2302 	umull	r2, r3, r0, r2
 800d078:	18e1      	adds	r1, r4, r3
 800d07a:	460b      	mov	r3, r1
 800d07c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d080:	e9c7 2304 	strd	r2, r3, [r7, #16]
    res[0]            = (uint32_t)(res_temp & 0xFFFFFFFF);
 800d084:	693a      	ldr	r2, [r7, #16]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	601a      	str	r2, [r3, #0]
    res[1]            = (uint32_t)((res_temp >> 32) & 0xFFFFFFFF);
 800d08a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d08e:	f04f 0200 	mov.w	r2, #0
 800d092:	f04f 0300 	mov.w	r3, #0
 800d096:	000a      	movs	r2, r1
 800d098:	2300      	movs	r3, #0
 800d09a:	6879      	ldr	r1, [r7, #4]
 800d09c:	3104      	adds	r1, #4
 800d09e:	4613      	mov	r3, r2
 800d0a0:	600b      	str	r3, [r1, #0]
}
 800d0a2:	bf00      	nop
 800d0a4:	371c      	adds	r7, #28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bcb0      	pop	{r4, r5, r7}
 800d0aa:	4770      	bx	lr

0800d0ac <mul_uint32_high>:
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
    mul_uint32_wide(op1, op2, res);
 800d0b6:	f107 0308 	add.w	r3, r7, #8
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff ffc5 	bl	800d04e <mul_uint32_wide>
    return res[1];
 800d0c4:	68fb      	ldr	r3, [r7, #12]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <add_uint_nocarry>:
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	607a      	str	r2, [r7, #4]
    *res = op1 + op2;
 800d0da:	68fa      	ldr	r2, [r7, #12]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	441a      	add	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	601a      	str	r2, [r3, #0]
}
 800d0e4:	bf00      	nop
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <mul_uint_wide>:
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
    return mul_uint32_wide(op1, op2, res);
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	68b9      	ldr	r1, [r7, #8]
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff ffa4 	bl	800d04e <mul_uint32_wide>
}
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <shift_result>:
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
    ZZsign is_2q = (ZZsign)(input >= q);
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	bf2c      	ite	cs
 800d11e:	2301      	movcs	r3, #1
 800d120:	2300      	movcc	r3, #0
 800d122:	b2db      	uxtb	r3, r3
 800d124:	60fb      	str	r3, [r7, #12]
    ZZ mask = (ZZ)(-is_2q);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	425b      	negs	r3, r3
 800d12a:	60bb      	str	r3, [r7, #8]
    return (ZZ)(input) - (q & mask);
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	4013      	ands	r3, r2
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	1ad3      	subs	r3, r2, r3
}
 800d136:	4618      	mov	r0, r3
 800d138:	3714      	adds	r7, #20
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr

0800d142 <barrett_reduce_64input_32modulus>:
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b090      	sub	sp, #64	; 0x40
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
 800d14a:	6039      	str	r1, [r7, #0]
    const uint32_t *const_ratio = modulus->const_ratio;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	3304      	adds	r3, #4
 800d150:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t right_hw = mul_uint32_high(input[0], const_ratio[0]);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4619      	mov	r1, r3
 800d15c:	4610      	mov	r0, r2
 800d15e:	f7ff ffa5 	bl	800d0ac <mul_uint32_high>
 800d162:	63b8      	str	r0, [r7, #56]	; 0x38
    mul_uint32_wide(input[0], const_ratio[1], middle_temp);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6818      	ldr	r0, [r3, #0]
 800d168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16a:	3304      	adds	r3, #4
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f107 021c 	add.w	r2, r7, #28
 800d172:	4619      	mov	r1, r3
 800d174:	f7ff ff6b 	bl	800d04e <mul_uint32_wide>
    uint32_t middle_lw_carry = add_uint32(right_hw, middle_temp[0], &middle_lw);
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	f107 0218 	add.w	r2, r7, #24
 800d17e:	4619      	mov	r1, r3
 800d180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d182:	f7ff ff4b 	bl	800d01c <add_uint32>
 800d186:	4603      	mov	r3, r0
 800d188:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t middle_hw       = middle_temp[1] + middle_lw_carry;
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d18e:	4413      	add	r3, r2
 800d190:	633b      	str	r3, [r7, #48]	; 0x30
    mul_uint32_wide(input[1], const_ratio[0], middle2_temp);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	3304      	adds	r3, #4
 800d196:	6818      	ldr	r0, [r3, #0]
 800d198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f107 0210 	add.w	r2, r7, #16
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	f7ff ff54 	bl	800d04e <mul_uint32_wide>
    uint32_t middle2_lw_carry = add_uint32(middle_lw, middle2_temp[0], &middle2_lw);
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	6939      	ldr	r1, [r7, #16]
 800d1aa:	f107 020c 	add.w	r2, r7, #12
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff ff34 	bl	800d01c <add_uint32>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t middle2_hw       = middle2_temp[1] + middle2_lw_carry;  // We don't need the carry
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1bc:	4413      	add	r3, r2
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t tmp = input[1] * const_ratio[1] + middle_hw + middle2_hw;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1c8:	3204      	adds	r2, #4
 800d1ca:	6812      	ldr	r2, [r2, #0]
 800d1cc:	fb02 f203 	mul.w	r2, r2, r3
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	4413      	add	r3, r2
 800d1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1d6:	4413      	add	r3, r2
 800d1d8:	627b      	str	r3, [r7, #36]	; 0x24
    tmp = input[0] - tmp * modulus->value;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1e4:	fb01 f303 	mul.w	r3, r1, r3
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	627b      	str	r3, [r7, #36]	; 0x24
    return shift_result(tmp, modulus->value);
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1f4:	f7ff ff8a 	bl	800d10c <shift_result>
 800d1f8:	4603      	mov	r3, r0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3740      	adds	r7, #64	; 0x40
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <barrett_reduce_wide>:
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	6039      	str	r1, [r7, #0]
    return barrett_reduce_64input_32modulus(input, modulus);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff ff97 	bl	800d142 <barrett_reduce_64input_32modulus>
 800d214:	4603      	mov	r3, r0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <add_mod>:
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b086      	sub	sp, #24
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
    ZZ q_val = q->value;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	617b      	str	r3, [r7, #20]
    add_uint_nocarry(op1, op2, &sum);  // We don't need the carry
 800d230:	f107 0310 	add.w	r3, r7, #16
 800d234:	461a      	mov	r2, r3
 800d236:	68b9      	ldr	r1, [r7, #8]
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7ff ff48 	bl	800d0ce <add_uint_nocarry>
    return shift_result(sum, q_val);
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	6979      	ldr	r1, [r7, #20]
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff ff62 	bl	800d10c <shift_result>
 800d248:	4603      	mov	r3, r0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <neg_mod>:
{
 800d252:	b480      	push	{r7}
 800d254:	b085      	sub	sp, #20
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	6039      	str	r1, [r7, #0]
    ZZsign non_zero = (ZZsign)(op != 0);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	bf14      	ite	ne
 800d262:	2301      	movne	r3, #1
 800d264:	2300      	moveq	r3, #0
 800d266:	b2db      	uxtb	r3, r3
 800d268:	60fb      	str	r3, [r7, #12]
    ZZ mask         = (ZZ)(-non_zero);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	425b      	negs	r3, r3
 800d26e:	60bb      	str	r3, [r7, #8]
    return (q->value - op) & mask;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	1ad2      	subs	r2, r2, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	4013      	ands	r3, r2
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <sub_mod>:
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
    se_assert(op1 <= q->value && op2 <= q->value);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d804      	bhi.n	800d2a8 <sub_mod+0x20>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	bf00      	nop
    ZZ negated = neg_mod(op2, q);
 800d2a8:	6879      	ldr	r1, [r7, #4]
 800d2aa:	68b8      	ldr	r0, [r7, #8]
 800d2ac:	f7ff ffd1 	bl	800d252 <neg_mod>
 800d2b0:	6178      	str	r0, [r7, #20]
    return add_mod(op1, negated, q);
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	6979      	ldr	r1, [r7, #20]
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f7ff ffb1 	bl	800d21e <add_mod>
 800d2bc:	4603      	mov	r3, r0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <mul_mod>:
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b086      	sub	sp, #24
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	60b9      	str	r1, [r7, #8]
 800d2d0:	607a      	str	r2, [r7, #4]
    mul_uint_wide(op1, op2, product);
 800d2d2:	f107 0310 	add.w	r3, r7, #16
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	68b9      	ldr	r1, [r7, #8]
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f7ff ff08 	bl	800d0f0 <mul_uint_wide>
    return barrett_reduce_wide(product, q);
 800d2e0:	f107 0310 	add.w	r3, r7, #16
 800d2e4:	6879      	ldr	r1, [r7, #4]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff ff8b 	bl	800d202 <barrett_reduce_wide>
 800d2ec:	4603      	mov	r3, r0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <ntt_roots_initialize>:
#if defined(SE_NTT_OTF) || defined(SE_NTT_ONE_SHOT)
ZZ get_ntt_root(size_t n, ZZ q);  // defined below
#endif

void ntt_roots_initialize(const Parms *parms, ZZ *ntt_roots)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	6039      	str	r1, [r7, #0]
    SE_UNUSED(parms);
    SE_UNUSED(ntt_roots);
    return;
#endif

    se_assert(parms && parms->curr_modulus && ntt_roots);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d006      	beq.n	800d314 <ntt_roots_initialize+0x1e>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <ntt_roots_initialize+0x1e>
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	bf00      	nop
        power                      = mul_mod(power, root, mod);
    }
#elif defined(SE_NTT_FAST)
    load_ntt_fast_roots(parms, (MUMO *)ntt_roots);
#elif defined(SE_NTT_REG)
    load_ntt_roots(parms, ntt_roots);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7fc fb80 	bl	8009a1c <load_ntt_roots>
#else
    se_assert(0);
#endif
}
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <ntt_non_lazy_inpl>:
@param[in]     parms      Parameters set by ckks_setup
@param[in]     ntt_roots  NTT roots set by ntt_roots_initialize. Ignored if SE_NTT_OTF is defined.
@param[in,out] vec        Input/output polynomial of n ZZ elements
*/
void ntt_non_lazy_inpl(const Parms *parms, const ZZ *ntt_roots, ZZ *vec)
{
 800d324:	b590      	push	{r4, r7, lr}
 800d326:	b091      	sub	sp, #68	; 0x44
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
    se_assert(parms && parms->curr_modulus && vec);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d006      	beq.n	800d344 <ntt_non_lazy_inpl+0x20>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d002      	beq.n	800d344 <ntt_non_lazy_inpl+0x20>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	bf00      	nop
    size_t n = parms->coeff_count;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	627b      	str	r3, [r7, #36]	; 0x24
    size_t logn = parms->logn;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	623b      	str	r3, [r7, #32]
    Modulus *mod = parms->curr_modulus;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	61fb      	str	r3, [r7, #28]

    // -- Return the NTT in scrambled order
    size_t h = 1;
 800d356:	2301      	movs	r3, #1
 800d358:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t tt = n / 2;
 800d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35c:	085b      	lsrs	r3, r3, #1
 800d35e:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef SE_NTT_OTF
    SE_UNUSED(ntt_roots);
    ZZ root = get_ntt_root(n, mod->value);
#endif

    for (size_t i = 0; i < logn; i++, h *= 2, tt /= 2)  // rounds
 800d360:	2300      	movs	r3, #0
 800d362:	637b      	str	r3, [r7, #52]	; 0x34
 800d364:	e058      	b.n	800d418 <ntt_non_lazy_inpl+0xf4>
    {
        for (size_t j = 0, kstart = 0; j < h; j++, kstart += 2 * tt)  // groups
 800d366:	2300      	movs	r3, #0
 800d368:	633b      	str	r3, [r7, #48]	; 0x30
 800d36a:	2300      	movs	r3, #0
 800d36c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d36e:	e046      	b.n	800d3fe <ntt_non_lazy_inpl+0xda>
            // ZZ s     = exponentiate_uint_mod(root, power, mod);
            ZZ power = h + j;
            ZZ s = exponentiate_uint_mod_bitrev(root, power, logn, mod);
#else
            se_assert(ntt_roots);
            ZZ s = ntt_roots[h + j];
 800d370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	4413      	add	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	4413      	add	r3, r2
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	61bb      	str	r3, [r7, #24]
#endif
            // -- The Harvey butterfly. Assume val1, val2 in [0, 2p)
            // -- Return vec[k], vec[k+tt] in [0, 4p)
            for (size_t k = kstart; k < (kstart + tt); k++)  // pairs
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	62bb      	str	r3, [r7, #40]	; 0x28
 800d384:	e02d      	b.n	800d3e2 <ntt_non_lazy_inpl+0xbe>
            {
                ZZ u = vec[k];
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	4413      	add	r3, r2
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	617b      	str	r3, [r7, #20]
                ZZ v = mul_mod(vec[k + tt], s, mod);
 800d392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d396:	4413      	add	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	4413      	add	r3, r2
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	69fa      	ldr	r2, [r7, #28]
 800d3a2:	69b9      	ldr	r1, [r7, #24]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff ff8e 	bl	800d2c6 <mul_mod>
 800d3aa:	6138      	str	r0, [r7, #16]
                vec[k] = add_mod(u, v, mod);       // vec[k]    = u + v;
 800d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	18d4      	adds	r4, r2, r3
 800d3b4:	69fa      	ldr	r2, [r7, #28]
 800d3b6:	6939      	ldr	r1, [r7, #16]
 800d3b8:	6978      	ldr	r0, [r7, #20]
 800d3ba:	f7ff ff30 	bl	800d21e <add_mod>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	6023      	str	r3, [r4, #0]
                vec[k + tt] = sub_mod(u, v, mod);  // vec[k+tt] = u - v;
 800d3c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	18d4      	adds	r4, r2, r3
 800d3ce:	69fa      	ldr	r2, [r7, #28]
 800d3d0:	6939      	ldr	r1, [r7, #16]
 800d3d2:	6978      	ldr	r0, [r7, #20]
 800d3d4:	f7ff ff58 	bl	800d288 <sub_mod>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	6023      	str	r3, [r4, #0]
            for (size_t k = kstart; k < (kstart + tt); k++)  // pairs
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	3301      	adds	r3, #1
 800d3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	4413      	add	r3, r2
 800d3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d3cb      	bcc.n	800d386 <ntt_non_lazy_inpl+0x62>
        for (size_t j = 0, kstart = 0; j < h; j++, kstart += 2 * tt)  // groups
 800d3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	633b      	str	r3, [r7, #48]	; 0x30
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3fa:	4413      	add	r3, r2
 800d3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d402:	429a      	cmp	r2, r3
 800d404:	d3b4      	bcc.n	800d370 <ntt_non_lazy_inpl+0x4c>
    for (size_t i = 0; i < logn; i++, h *= 2, tt /= 2)  // rounds
 800d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d408:	3301      	adds	r3, #1
 800d40a:	637b      	str	r3, [r7, #52]	; 0x34
 800d40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d414:	085b      	lsrs	r3, r3, #1
 800d416:	63bb      	str	r3, [r7, #56]	; 0x38
 800d418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d3a2      	bcc.n	800d366 <ntt_non_lazy_inpl+0x42>
            }
        }
    }
}
 800d420:	bf00      	nop
 800d422:	bf00      	nop
 800d424:	3744      	adds	r7, #68	; 0x44
 800d426:	46bd      	mov	sp, r7
 800d428:	bd90      	pop	{r4, r7, pc}

0800d42a <ntt_inpl>:
#endif

void ntt_inpl(const Parms *parms, const ZZ *ntt_roots, ZZ *vec)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	60f8      	str	r0, [r7, #12]
 800d432:	60b9      	str	r1, [r7, #8]
 800d434:	607a      	str	r2, [r7, #4]
    se_assert(parms && parms->curr_modulus && vec);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d006      	beq.n	800d44a <ntt_inpl+0x20>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <ntt_inpl+0x20>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	bf00      	nop
    {
        if (vec[i] >= two_q) vec[i] -= two_q;
        if (vec[i] >= q) vec[i] -= q;
    }
#else
    ntt_non_lazy_inpl(parms, ntt_roots, vec);
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff ff68 	bl	800d324 <ntt_non_lazy_inpl>
#endif
}
 800d454:	bf00      	nop
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <is_power_of_2>:

@param[in] val  Value to verify if is a power of 2
@returns        True if val is a power of 2, false otherwise
*/
static bool is_power_of_2(size_t val)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
    return val && (!(val & (val - 1)));
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d007      	beq.n	800d47a <is_power_of_2+0x1e>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	1e5a      	subs	r2, r3, #1
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4013      	ands	r3, r2
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <is_power_of_2+0x1e>
 800d476:	2301      	movs	r3, #1
 800d478:	e000      	b.n	800d47c <is_power_of_2+0x20>
 800d47a:	2300      	movs	r3, #0
 800d47c:	f003 0301 	and.w	r3, r3, #1
 800d480:	b2db      	uxtb	r3, r3
}
 800d482:	4618      	mov	r0, r3
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <reset_primes>:
    SE_UNUSED(parms);
#endif
}

void reset_primes(Parms *parms)
{
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
    se_assert(parms);
#ifdef SE_REVERSE_CT_GEN_ENABLED
    parms->curr_param_direction = 0;
    parms->skip_ntt_load        = 0;
#endif
    parms->curr_modulus_idx = 0;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	611a      	str	r2, [r3, #16]
    parms->curr_modulus     = &(parms->moduli[0]);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	689a      	ldr	r2, [r3, #8]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	60da      	str	r2, [r3, #12]
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <next_modulus>:

bool next_modulus(Parms *parms)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
    se_assert(parms);
    bool ret_val = 1;  // success
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	73fb      	strb	r3, [r7, #15]
        }
        parms->curr_modulus_idx--;
    }
    parms->skip_ntt_load = 0;
#else
    if ((parms->curr_modulus_idx + 1) >= parms->nprimes)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d305      	bcc.n	800d4d6 <next_modulus+0x26>
    {
        parms->curr_modulus_idx = 0;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	611a      	str	r2, [r3, #16]
        ret_val                 = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73fb      	strb	r3, [r7, #15]
 800d4d4:	e004      	b.n	800d4e0 <next_modulus+0x30>
    }
    else
        parms->curr_modulus_idx++;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	611a      	str	r2, [r3, #16]
#endif
    parms->curr_modulus = &(parms->moduli[parms->curr_modulus_idx]);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6899      	ldr	r1, [r3, #8]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	691a      	ldr	r2, [r3, #16]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	4413      	add	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	18ca      	adds	r2, r1, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	60da      	str	r2, [r3, #12]
    return ret_val;
 800d4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr
 800d504:	0000      	movs	r0, r0
	...

0800d508 <set_params_base>:
@param[in]  degree   Polynomial ring degree
@param[in]  nprimes  Number of prime moduli
@param[out] parms    Parameters instance to set
*/
static void set_params_base(size_t degree, size_t nprimes, Parms *parms)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
    se_assert(degree >= 1024 && degree <= 16384);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d51a:	d303      	bcc.n	800d524 <set_params_base+0x1c>
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d522:	bf00      	nop
    se_assert(is_power_of_2(degree));
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7ff ff99 	bl	800d45c <is_power_of_2>
    se_assert(parms);
    se_assert(nprimes >= 1);

    parms->coeff_count = degree;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	601a      	str	r2, [r3, #0]
    parms->logn        = (size_t)log2(degree);
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f7f2 ffff 	bl	8000534 <__aeabi_ui2d>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	ec43 2b10 	vmov	d0, r2, r3
 800d53e:	f002 f873 	bl	800f628 <log>
 800d542:	ec51 0b10 	vmov	r0, r1, d0
 800d546:	a316      	add	r3, pc, #88	; (adr r3, 800d5a0 <set_params_base+0x98>)
 800d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54c:	f7f3 f996 	bl	800087c <__aeabi_ddiv>
 800d550:	4602      	mov	r2, r0
 800d552:	460b      	mov	r3, r1
 800d554:	4610      	mov	r0, r2
 800d556:	4619      	mov	r1, r3
 800d558:	f7f3 fb16 	bl	8000b88 <__aeabi_d2uiz>
 800d55c:	4602      	mov	r2, r0
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	605a      	str	r2, [r3, #4]
    parms->nprimes     = nprimes;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	615a      	str	r2, [r3, #20]
#ifdef SE_USE_MALLOC
    se_assert(parms && parms->nprimes);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <set_params_base+0x6e>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	bf00      	nop
    parms->moduli = calloc(parms->nprimes, sizeof(Modulus));
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	210c      	movs	r1, #12
 800d57c:	4618      	mov	r0, r3
 800d57e:	f000 ff77 	bl	800e470 <calloc>
 800d582:	4603      	mov	r3, r0
 800d584:	461a      	mov	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	609a      	str	r2, [r3, #8]
    se_assert(parms->moduli);
#endif

    // -- Set curr_modulus to first prime
    parms->curr_modulus_idx = 0;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	611a      	str	r2, [r3, #16]
    parms->curr_modulus     = &(parms->moduli[0]);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689a      	ldr	r2, [r3, #8]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	60da      	str	r2, [r3, #12]
    se_assert(parms->curr_modulus);
#ifdef SE_REVERSE_CT_GEN_ENABLED
    parms->curr_param_direction = 0;  // 0 = forward, 1 = reverse
    parms->skip_ntt_load        = 0;
#endif
}
 800d598:	bf00      	nop
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	fefa39ef 	.word	0xfefa39ef
 800d5a4:	3fe62e42 	.word	0x3fe62e42

0800d5a8 <set_parms_ckks_27bit_helper>:
Helper function to set 27-bit primes

@param[in, out] parms  Parameters object to set
*/
void set_parms_ckks_27bit_helper(Parms *parms)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
    se_assert(parms);
    se_assert(parms->nprimes >= 1);
    se_assert(parms->coeff_count == 1024 || parms->coeff_count == 2048 ||
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5b8:	d008      	beq.n	800d5cc <set_parms_ckks_27bit_helper+0x24>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5c2:	d003      	beq.n	800d5cc <set_parms_ckks_27bit_helper+0x24>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5cc:	bf00      	nop
              parms->coeff_count == 4096);
    switch (parms->nprimes)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	2b03      	cmp	r3, #3
 800d5d4:	d006      	beq.n	800d5e4 <set_parms_ckks_27bit_helper+0x3c>
 800d5d6:	2b03      	cmp	r3, #3
 800d5d8:	d818      	bhi.n	800d60c <set_parms_ckks_27bit_helper+0x64>
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d010      	beq.n	800d600 <set_parms_ckks_27bit_helper+0x58>
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d007      	beq.n	800d5f2 <set_parms_ckks_27bit_helper+0x4a>
        // -- 27-bit primes equal to 1 mod 8192
        case 3: set_modulus(134176769, &(parms->moduli[2]));
        case 2: set_modulus(134111233, &(parms->moduli[1]));
        case 1: set_modulus(134012929, &(parms->moduli[0]));
    }
}
 800d5e2:	e013      	b.n	800d60c <set_parms_ckks_27bit_helper+0x64>
        case 3: set_modulus(134176769, &(parms->moduli[2]));
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	3318      	adds	r3, #24
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4809      	ldr	r0, [pc, #36]	; (800d614 <set_parms_ckks_27bit_helper+0x6c>)
 800d5ee:	f7ff fba7 	bl	800cd40 <set_modulus>
        case 2: set_modulus(134111233, &(parms->moduli[1]));
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	330c      	adds	r3, #12
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4807      	ldr	r0, [pc, #28]	; (800d618 <set_parms_ckks_27bit_helper+0x70>)
 800d5fc:	f7ff fba0 	bl	800cd40 <set_modulus>
        case 1: set_modulus(134012929, &(parms->moduli[0]));
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	4619      	mov	r1, r3
 800d606:	4805      	ldr	r0, [pc, #20]	; (800d61c <set_parms_ckks_27bit_helper+0x74>)
 800d608:	f7ff fb9a 	bl	800cd40 <set_modulus>
}
 800d60c:	bf00      	nop
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	07ff6001 	.word	0x07ff6001
 800d618:	07fe6001 	.word	0x07fe6001
 800d61c:	07fce001 	.word	0x07fce001

0800d620 <set_parms_ckks_30bit_helper>:
Helper function to set 30-bit primes

@param[in, out] parms  Parameters object to set
*/
void set_parms_ckks_30bit_helper(Parms *parms)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
    se_assert(parms);
    se_assert(parms->nprimes >= 1);
    switch (parms->nprimes)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	695b      	ldr	r3, [r3, #20]
 800d62c:	3b01      	subs	r3, #1
 800d62e:	2b0c      	cmp	r3, #12
 800d630:	d876      	bhi.n	800d720 <set_parms_ckks_30bit_helper+0x100>
 800d632:	a201      	add	r2, pc, #4	; (adr r2, 800d638 <set_parms_ckks_30bit_helper+0x18>)
 800d634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d638:	0800d715 	.word	0x0800d715
 800d63c:	0800d707 	.word	0x0800d707
 800d640:	0800d6f9 	.word	0x0800d6f9
 800d644:	0800d6eb 	.word	0x0800d6eb
 800d648:	0800d6dd 	.word	0x0800d6dd
 800d64c:	0800d6cf 	.word	0x0800d6cf
 800d650:	0800d6c1 	.word	0x0800d6c1
 800d654:	0800d6b3 	.word	0x0800d6b3
 800d658:	0800d6a5 	.word	0x0800d6a5
 800d65c:	0800d697 	.word	0x0800d697
 800d660:	0800d689 	.word	0x0800d689
 800d664:	0800d67b 	.word	0x0800d67b
 800d668:	0800d66d 	.word	0x0800d66d
    {
        // -- 30-bits primes equal to 1 mod 65536?
        // TODO: are these pragmas ignored when necessary?
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Warray-bounds"
        case 13: set_modulus(1062535169, &(parms->moduli[12]));
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	3390      	adds	r3, #144	; 0x90
 800d672:	4619      	mov	r1, r3
 800d674:	482c      	ldr	r0, [pc, #176]	; (800d728 <set_parms_ckks_30bit_helper+0x108>)
 800d676:	f7ff fb63 	bl	800cd40 <set_modulus>
        case 12: set_modulus(1062469633, &(parms->moduli[11]));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	3384      	adds	r3, #132	; 0x84
 800d680:	4619      	mov	r1, r3
 800d682:	482a      	ldr	r0, [pc, #168]	; (800d72c <set_parms_ckks_30bit_helper+0x10c>)
 800d684:	f7ff fb5c 	bl	800cd40 <set_modulus>
        case 11: set_modulus(1061093377, &(parms->moduli[10]));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	3378      	adds	r3, #120	; 0x78
 800d68e:	4619      	mov	r1, r3
 800d690:	4827      	ldr	r0, [pc, #156]	; (800d730 <set_parms_ckks_30bit_helper+0x110>)
 800d692:	f7ff fb55 	bl	800cd40 <set_modulus>
        case 10: set_modulus(1060765697, &(parms->moduli[9]));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	336c      	adds	r3, #108	; 0x6c
 800d69c:	4619      	mov	r1, r3
 800d69e:	4825      	ldr	r0, [pc, #148]	; (800d734 <set_parms_ckks_30bit_helper+0x114>)
 800d6a0:	f7ff fb4e 	bl	800cd40 <set_modulus>
        case 9: set_modulus(1060700161, &(parms->moduli[8]));
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	3360      	adds	r3, #96	; 0x60
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	4822      	ldr	r0, [pc, #136]	; (800d738 <set_parms_ckks_30bit_helper+0x118>)
 800d6ae:	f7ff fb47 	bl	800cd40 <set_modulus>
        case 8: set_modulus(1060175873, &(parms->moduli[7]));
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	3354      	adds	r3, #84	; 0x54
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	4820      	ldr	r0, [pc, #128]	; (800d73c <set_parms_ckks_30bit_helper+0x11c>)
 800d6bc:	f7ff fb40 	bl	800cd40 <set_modulus>
        case 7: set_modulus(1058209793, &(parms->moduli[6]));
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	3348      	adds	r3, #72	; 0x48
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	481d      	ldr	r0, [pc, #116]	; (800d740 <set_parms_ckks_30bit_helper+0x120>)
 800d6ca:	f7ff fb39 	bl	800cd40 <set_modulus>
        case 6: set_modulus(1056440321, &(parms->moduli[5]));
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	333c      	adds	r3, #60	; 0x3c
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	481b      	ldr	r0, [pc, #108]	; (800d744 <set_parms_ckks_30bit_helper+0x124>)
 800d6d8:	f7ff fb32 	bl	800cd40 <set_modulus>
        case 5: set_modulus(1056178177, &(parms->moduli[4]));
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	3330      	adds	r3, #48	; 0x30
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4818      	ldr	r0, [pc, #96]	; (800d748 <set_parms_ckks_30bit_helper+0x128>)
 800d6e6:	f7ff fb2b 	bl	800cd40 <set_modulus>
        case 4: set_modulus(1055260673, &(parms->moduli[3]));
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	3324      	adds	r3, #36	; 0x24
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	4816      	ldr	r0, [pc, #88]	; (800d74c <set_parms_ckks_30bit_helper+0x12c>)
 800d6f4:	f7ff fb24 	bl	800cd40 <set_modulus>
        case 3: set_modulus(1054212097, &(parms->moduli[2]));
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	3318      	adds	r3, #24
 800d6fe:	4619      	mov	r1, r3
 800d700:	4813      	ldr	r0, [pc, #76]	; (800d750 <set_parms_ckks_30bit_helper+0x130>)
 800d702:	f7ff fb1d 	bl	800cd40 <set_modulus>
        case 2: set_modulus(1054015489, &(parms->moduli[1]));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	330c      	adds	r3, #12
 800d70c:	4619      	mov	r1, r3
 800d70e:	4811      	ldr	r0, [pc, #68]	; (800d754 <set_parms_ckks_30bit_helper+0x134>)
 800d710:	f7ff fb16 	bl	800cd40 <set_modulus>
        case 1: set_modulus(1053818881, &(parms->moduli[0]));
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	4619      	mov	r1, r3
 800d71a:	480f      	ldr	r0, [pc, #60]	; (800d758 <set_parms_ckks_30bit_helper+0x138>)
 800d71c:	f7ff fb10 	bl	800cd40 <set_modulus>
#pragma GCC diagnostic pop
    }
}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	3f550001 	.word	0x3f550001
 800d72c:	3f540001 	.word	0x3f540001
 800d730:	3f3f0001 	.word	0x3f3f0001
 800d734:	3f3a0001 	.word	0x3f3a0001
 800d738:	3f390001 	.word	0x3f390001
 800d73c:	3f310001 	.word	0x3f310001
 800d740:	3f130001 	.word	0x3f130001
 800d744:	3ef80001 	.word	0x3ef80001
 800d748:	3ef40001 	.word	0x3ef40001
 800d74c:	3ee60001 	.word	0x3ee60001
 800d750:	3ed60001 	.word	0x3ed60001
 800d754:	3ed30001 	.word	0x3ed30001
 800d758:	3ed00001 	.word	0x3ed00001

0800d75c <set_parms_ckks>:

void set_parms_ckks(size_t degree, size_t nprimes, Parms *parms)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
    se_assert(parms);
    se_assert(nprimes >= 1);
    set_params_base(degree, nprimes, parms);
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	68b9      	ldr	r1, [r7, #8]
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f7ff fecb 	bl	800d508 <set_params_base>
    //    also satisfies:
    //         q = 1 (mod m')  (m' = 2^(k-i), i = a positive integer < k)
    //    and we can use the same modulus q for all powers of 2 < m. Note that the
    //    reverse is not true. That is, a prime q that satisfies q = 1 (mod m')
    //    does not necessarily satisfy q = 1 (mod m).
    switch (degree)
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d778:	d047      	beq.n	800d80a <set_parms_ckks+0xae>
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d780:	d84e      	bhi.n	800d820 <set_parms_ckks+0xc4>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d788:	d034      	beq.n	800d7f4 <set_parms_ckks+0x98>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d790:	d846      	bhi.n	800d820 <set_parms_ckks+0xc4>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d798:	d021      	beq.n	800d7de <set_parms_ckks+0x82>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7a0:	d83e      	bhi.n	800d820 <set_parms_ckks+0xc4>
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7a8:	d004      	beq.n	800d7b4 <set_parms_ckks+0x58>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7b0:	d00a      	beq.n	800d7c8 <set_parms_ckks+0x6c>
            parms->scale = pow(2, 25);
            break;
    }
    // parms.scale = pow(2, 40);
    // parms.scale = n * n;
}
 800d7b2:	e035      	b.n	800d820 <set_parms_ckks+0xc4>
            set_parms_ckks_27bit_helper(parms);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff fef7 	bl	800d5a8 <set_parms_ckks_27bit_helper>
            parms->scale = pow(2, 20);
 800d7ba:	6879      	ldr	r1, [r7, #4]
 800d7bc:	f04f 0200 	mov.w	r2, #0
 800d7c0:	4b19      	ldr	r3, [pc, #100]	; (800d828 <set_parms_ckks+0xcc>)
 800d7c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
            break;
 800d7c6:	e02b      	b.n	800d820 <set_parms_ckks+0xc4>
            set_parms_ckks_27bit_helper(parms);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff feed 	bl	800d5a8 <set_parms_ckks_27bit_helper>
            parms->scale = pow(2, 25);
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	f04f 0200 	mov.w	r2, #0
 800d7d4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800d7d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
            break;
 800d7dc:	e020      	b.n	800d820 <set_parms_ckks+0xc4>
            set_parms_ckks_30bit_helper(parms);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff ff1e 	bl	800d620 <set_parms_ckks_30bit_helper>
            parms->scale = pow(2, 25);
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	f04f 0200 	mov.w	r2, #0
 800d7ea:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800d7ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
            break;
 800d7f2:	e015      	b.n	800d820 <set_parms_ckks+0xc4>
            set_parms_ckks_30bit_helper(parms);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7ff ff13 	bl	800d620 <set_parms_ckks_30bit_helper>
            parms->scale = pow(2, 25);
 800d7fa:	6879      	ldr	r1, [r7, #4]
 800d7fc:	f04f 0200 	mov.w	r2, #0
 800d800:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800d804:	e9c1 2306 	strd	r2, r3, [r1, #24]
            break;
 800d808:	e00a      	b.n	800d820 <set_parms_ckks+0xc4>
            set_parms_ckks_30bit_helper(parms);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7ff ff08 	bl	800d620 <set_parms_ckks_30bit_helper>
            parms->scale = pow(2, 25);
 800d810:	6879      	ldr	r1, [r7, #4]
 800d812:	f04f 0200 	mov.w	r2, #0
 800d816:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800d81a:	e9c1 2306 	strd	r2, r3, [r1, #24]
            break;
 800d81e:	bf00      	nop
}
 800d820:	bf00      	nop
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	41300000 	.word	0x41300000

0800d82c <prng_randomize_reset>:

@param[in,out] prng     PRNG instance to modify
@param[in]     seed_in  [Optional]. Seed to seed the prng with.
*/
inline void prng_randomize_reset(SE_PRNG *prng, uint8_t *seed_in)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
    se_assert(prng);
    prng->counter = 0;
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	f04f 0200 	mov.w	r2, #0
 800d83c:	f04f 0300 	mov.w	r3, #0
 800d840:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    if (seed_in)
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d006      	beq.n	800d858 <prng_randomize_reset+0x2c>
    {
        memcpy(&(prng->seed[0]), seed_in, SE_PRNG_SEED_BYTE_COUNT);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2240      	movs	r2, #64	; 0x40
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	4618      	mov	r0, r3
 800d852:	f000 fe53 	bl	800e4fc <memcpy>
        return;
 800d856:	e005      	b.n	800d864 <prng_randomize_reset+0x38>
            ;
    }
    se_assert(ret_val == NRF_SUCCESS);
#else
    // -- This should only be used for debugging!!
    memset(&(prng->seed[0]), 0, SE_PRNG_SEED_BYTE_COUNT);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2240      	movs	r2, #64	; 0x40
 800d85c:	2100      	movs	r1, #0
 800d85e:	4618      	mov	r0, r3
 800d860:	f000 fe5a 	bl	800e518 <memset>
    // prng->seed[0] = 1;
#endif
}
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
	...

0800d86c <prng_fill_buffer>:
@param[in]      byte_count  Number of random bytes to generate
@param[in,out]  prng        PRNG instance
@param[out]     buffer      Buffer to store the random bytes
*/
inline void prng_fill_buffer(size_t byte_count, SE_PRNG *prng, void *buffer)
{
 800d86c:	b5b0      	push	{r4, r5, r7, lr}
 800d86e:	b096      	sub	sp, #88	; 0x58
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
    uint8_t seed_ext[SE_PRNG_SEED_BYTE_COUNT + 8];
    memcpy(&(seed_ext[0]), &(prng->seed[0]), SE_PRNG_SEED_BYTE_COUNT);
 800d878:	68b9      	ldr	r1, [r7, #8]
 800d87a:	f107 0310 	add.w	r3, r7, #16
 800d87e:	2240      	movs	r2, #64	; 0x40
 800d880:	4618      	mov	r0, r3
 800d882:	f000 fe3b 	bl	800e4fc <memcpy>
    memcpy(&(seed_ext[SE_PRNG_SEED_BYTE_COUNT]), &(prng->counter), 8);
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d88c:	f107 0310 	add.w	r3, r7, #16
 800d890:	3340      	adds	r3, #64	; 0x40
 800d892:	2208      	movs	r2, #8
 800d894:	4618      	mov	r0, r3
 800d896:	f000 fe31 	bl	800e4fc <memcpy>
    shake256(buffer, byte_count, &(seed_ext[0]), SE_PRNG_SEED_BYTE_COUNT + 8);
 800d89a:	f107 0210 	add.w	r2, r7, #16
 800d89e:	2348      	movs	r3, #72	; 0x48
 800d8a0:	68f9      	ldr	r1, [r7, #12]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fc f96c 	bl	8009b80 <shake256>
    prng->counter++;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d8ae:	1c54      	adds	r4, r2, #1
 800d8b0:	f143 0500 	adc.w	r5, r3, #0
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
    if (prng->counter == 0)  // overflow!
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	d109      	bne.n	800d8d8 <prng_fill_buffer+0x6c>
    {
        printf("PRNG counter overflowed.");
 800d8c4:	4806      	ldr	r0, [pc, #24]	; (800d8e0 <prng_fill_buffer+0x74>)
 800d8c6:	f000 fee9 	bl	800e69c <iprintf>
        printf("Re-randomizing seed and resetting counter to 0.\n");
 800d8ca:	4806      	ldr	r0, [pc, #24]	; (800d8e4 <prng_fill_buffer+0x78>)
 800d8cc:	f000 ff82 	bl	800e7d4 <puts>
        prng_randomize_reset(prng, NULL);
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	68b8      	ldr	r0, [r7, #8]
 800d8d4:	f7ff ffaa 	bl	800d82c <prng_randomize_reset>
    }
}
 800d8d8:	bf00      	nop
 800d8da:	3758      	adds	r7, #88	; 0x58
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bdb0      	pop	{r4, r5, r7, pc}
 800d8e0:	0800ff6c 	.word	0x0800ff6c
 800d8e4:	0800ff88 	.word	0x0800ff88

0800d8e8 <mul_uint32_wide>:
{
 800d8e8:	b4b0      	push	{r4, r5, r7}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
    uint64_t res_temp = (uint64_t)op1 * (uint64_t)op2;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f04f 0100 	mov.w	r1, #0
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	461a      	mov	r2, r3
 800d900:	f04f 0300 	mov.w	r3, #0
 800d904:	fb02 f501 	mul.w	r5, r2, r1
 800d908:	fb00 f403 	mul.w	r4, r0, r3
 800d90c:	442c      	add	r4, r5
 800d90e:	fba0 2302 	umull	r2, r3, r0, r2
 800d912:	18e1      	adds	r1, r4, r3
 800d914:	460b      	mov	r3, r1
 800d916:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800d91a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    res[0]            = (uint32_t)(res_temp & 0xFFFFFFFF);
 800d91e:	693a      	ldr	r2, [r7, #16]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	601a      	str	r2, [r3, #0]
    res[1]            = (uint32_t)((res_temp >> 32) & 0xFFFFFFFF);
 800d924:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d928:	f04f 0200 	mov.w	r2, #0
 800d92c:	f04f 0300 	mov.w	r3, #0
 800d930:	000a      	movs	r2, r1
 800d932:	2300      	movs	r3, #0
 800d934:	6879      	ldr	r1, [r7, #4]
 800d936:	3104      	adds	r1, #4
 800d938:	4613      	mov	r3, r2
 800d93a:	600b      	str	r3, [r1, #0]
}
 800d93c:	bf00      	nop
 800d93e:	371c      	adds	r7, #28
 800d940:	46bd      	mov	sp, r7
 800d942:	bcb0      	pop	{r4, r5, r7}
 800d944:	4770      	bx	lr

0800d946 <mul_uint32_high>:
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b084      	sub	sp, #16
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
    mul_uint32_wide(op1, op2, res);
 800d950:	f107 0308 	add.w	r3, r7, #8
 800d954:	461a      	mov	r2, r3
 800d956:	6839      	ldr	r1, [r7, #0]
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff ffc5 	bl	800d8e8 <mul_uint32_wide>
    return res[1];
 800d95e:	68fb      	ldr	r3, [r7, #12]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <shift_result>:
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
    ZZsign is_2q = (ZZsign)(input >= q);
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	429a      	cmp	r2, r3
 800d978:	bf2c      	ite	cs
 800d97a:	2301      	movcs	r3, #1
 800d97c:	2300      	movcc	r3, #0
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	60fb      	str	r3, [r7, #12]
    ZZ mask = (ZZ)(-is_2q);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	425b      	negs	r3, r3
 800d986:	60bb      	str	r3, [r7, #8]
    return (ZZ)(input) - (q & mask);
 800d988:	683a      	ldr	r2, [r7, #0]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	4013      	ands	r3, r2
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	1ad3      	subs	r3, r2, r3
}
 800d992:	4618      	mov	r0, r3
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <barrett_reduce_32input_32modulus>:
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b084      	sub	sp, #16
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
    tmp = mul_uint32_high(input, modulus->const_ratio[1]);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f7ff ffc9 	bl	800d946 <mul_uint32_high>
 800d9b4:	60f8      	str	r0, [r7, #12]
    tmp = input - tmp * modulus->value;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	fb02 f303 	mul.w	r3, r2, r3
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	60fb      	str	r3, [r7, #12]
    return shift_result(tmp, modulus->value);
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7ff ffcb 	bl	800d968 <shift_result>
 800d9d2:	4603      	mov	r3, r0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <mod3_uint8input>:

@param[in] r  8-bit unsigned integer input
@returns     'r' mod 3
*/
static inline uint8_t mod3_uint8input(uint8_t r)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	71fb      	strb	r3, [r7, #7]
    // r        = (r >> 2) + (r & 0x3);  // r'= r mod 3, since 2^2=1
    // r        = (r >> 2) + (r & 0x3);  // r'= r mod 3, since 2^2=1, reducing r to [0, 3]
    // int8_t t = r - 3;                 // 0,1,2 --> 0xF?, 3 --> 0x00
    // int8_t c = t >> 7;                // 0xF? --> 0x01, 0x00 --> 0x00
    // return (c & r) ^ ((~c) & t);
    r        = (uint8_t)((r >> 4) + (r & 0xf));  // r' = r mod 3, since 2^4=1
 800d9e6:	79fb      	ldrb	r3, [r7, #7]
 800d9e8:	091b      	lsrs	r3, r3, #4
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	79fb      	ldrb	r3, [r7, #7]
 800d9ee:	f003 030f 	and.w	r3, r3, #15
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	4413      	add	r3, r2
 800d9f6:	71fb      	strb	r3, [r7, #7]
    r        = (uint8_t)((r >> 2) + (r & 0x3));  // r'= r mod 3, since 2^2=1
 800d9f8:	79fb      	ldrb	r3, [r7, #7]
 800d9fa:	089b      	lsrs	r3, r3, #2
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	79fb      	ldrb	r3, [r7, #7]
 800da00:	f003 0303 	and.w	r3, r3, #3
 800da04:	b2db      	uxtb	r3, r3
 800da06:	4413      	add	r3, r2
 800da08:	71fb      	strb	r3, [r7, #7]
    r        = (uint8_t)((r >> 2) + (r & 0x3));  // r'= r mod 3, since 2^2=1, reducing r to [0, 3]
 800da0a:	79fb      	ldrb	r3, [r7, #7]
 800da0c:	089b      	lsrs	r3, r3, #2
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	79fb      	ldrb	r3, [r7, #7]
 800da12:	f003 0303 	and.w	r3, r3, #3
 800da16:	b2db      	uxtb	r3, r3
 800da18:	4413      	add	r3, r2
 800da1a:	71fb      	strb	r3, [r7, #7]
    int8_t t = (int8_t)(r - 3);                  // 0,1,2 --> 0xF?, 3 --> 0x00
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	3b03      	subs	r3, #3
 800da20:	b2db      	uxtb	r3, r3
 800da22:	73fb      	strb	r3, [r7, #15]
    int8_t c = t >> 7;                           // 0xF? --> 0x01, 0x00 --> 0x00
 800da24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da28:	11db      	asrs	r3, r3, #7
 800da2a:	73bb      	strb	r3, [r7, #14]
    return (uint8_t)((c & r) ^ ((~c) & t));
 800da2c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800da30:	7bbb      	ldrb	r3, [r7, #14]
 800da32:	4013      	ands	r3, r2
 800da34:	b25a      	sxtb	r2, r3
 800da36:	7bbb      	ldrb	r3, [r7, #14]
 800da38:	43db      	mvns	r3, r3
 800da3a:	b259      	sxtb	r1, r3
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	400b      	ands	r3, r1
 800da40:	b25b      	sxtb	r3, r3
 800da42:	4053      	eors	r3, r2
 800da44:	b25b      	sxtb	r3, r3
 800da46:	b2db      	uxtb	r3, r3
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3714      	adds	r7, #20
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <mod3_zzinput>:

@param[in] input  Input to be reduced
@returns          'input' mod 3
*/
static inline uint8_t mod3_zzinput(uint32_t input)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
    uint32_t r;
    r = (input >> 16) + (input & 0xffff);  // r' = r mod 3, since 2^16=1
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	0c1a      	lsrs	r2, r3, #16
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	b29b      	uxth	r3, r3
 800da64:	4413      	add	r3, r2
 800da66:	60fb      	str	r3, [r7, #12]
    r = (r >> 8) + (r & 0xff);             // r' = r mod 3, since 2^8=1
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	0a1a      	lsrs	r2, r3, #8
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	4413      	add	r3, r2
 800da72:	60fb      	str	r3, [r7, #12]
    r = (r >> 4) + (r & 0xf);              // r' = r mod 3, since 2^4=1
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	091a      	lsrs	r2, r3, #4
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f003 030f 	and.w	r3, r3, #15
 800da7e:	4413      	add	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 0x3);              // r'= r mod 3, since 2^2=1
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	089a      	lsrs	r2, r3, #2
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f003 0303 	and.w	r3, r3, #3
 800da8c:	4413      	add	r3, r2
 800da8e:	60fb      	str	r3, [r7, #12]
    r = (r >> 2) + (r & 0x3);              // r'= r mod 3, since 2^2=1, reducing r to [0, 3]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	089a      	lsrs	r2, r3, #2
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f003 0303 	and.w	r3, r3, #3
 800da9a:	4413      	add	r3, r2
 800da9c:	60fb      	str	r3, [r7, #12]
    // int8_t t = (uint8_t)r - 3; // 0,1,2 --> 0xF?, 3 --> 0x00
    // int8_t c = t >> 7; // 0xF? --> 0x01, 0x00 --> 0x00
    // return (c & (uint8_t)r) ^ ((~c) & t);
    int8_t t = (int8_t)((uint8_t)r - 3);  // 0,1,2 --> 0xF?, 3 --> 0x00
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	3b03      	subs	r3, #3
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	72fb      	strb	r3, [r7, #11]
    int8_t c = t >> 7;                    // 0xF? --> 0x01, 0x00 --> 0x00
 800daa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800daac:	11db      	asrs	r3, r3, #7
 800daae:	72bb      	strb	r3, [r7, #10]
    return (uint8_t)((c & (uint8_t)r) ^ ((~c) & t));
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	b25a      	sxtb	r2, r3
 800dab4:	7abb      	ldrb	r3, [r7, #10]
 800dab6:	4013      	ands	r3, r2
 800dab8:	b25a      	sxtb	r2, r3
 800daba:	7abb      	ldrb	r3, [r7, #10]
 800dabc:	43db      	mvns	r3, r3
 800dabe:	b259      	sxtb	r1, r3
 800dac0:	7afb      	ldrb	r3, [r7, #11]
 800dac2:	400b      	ands	r3, r1
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	4053      	eors	r3, r2
 800dac8:	b25b      	sxtb	r3, r3
 800daca:	b2db      	uxtb	r3, r3
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <sample_poly_uniform>:
#endif

// -----------------------------  Uniform ---------------------------------

void sample_poly_uniform(const Parms *parms, SE_PRNG *prng, ZZ *poly)
{
 800dad8:	b590      	push	{r4, r7, lr}
 800dada:	b08b      	sub	sp, #44	; 0x2c
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	607a      	str	r2, [r7, #4]
    PolySizeType n   = parms->coeff_count;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	623b      	str	r3, [r7, #32]
    const Modulus *q = parms->curr_modulus;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	61fb      	str	r3, [r7, #28]

    // -- We sample numbers up to 2^32-1
    ZZ max_random   = (ZZ)0xFFFFFFFFUL;
 800daf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daf4:	61bb      	str	r3, [r7, #24]
    ZZ max_multiple = max_random - barrett_reduce_32input_32modulus(max_random, q) - 1;
 800daf6:	69f9      	ldr	r1, [r7, #28]
 800daf8:	69b8      	ldr	r0, [r7, #24]
 800dafa:	f7ff ff50 	bl	800d99e <barrett_reduce_32input_32modulus>
 800dafe:	4602      	mov	r2, r0
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	1a9b      	subs	r3, r3, r2
 800db04:	3b01      	subs	r3, #1
 800db06:	617b      	str	r3, [r7, #20]

    prng_fill_buffer(n * sizeof(ZZ), prng, (void *)poly);
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	68b9      	ldr	r1, [r7, #8]
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff feab 	bl	800d86c <prng_fill_buffer>

    for (size_t i = 0; i < n; i++)
 800db16:	2300      	movs	r3, #0
 800db18:	627b      	str	r3, [r7, #36]	; 0x24
 800db1a:	e01e      	b.n	800db5a <sample_poly_uniform+0x82>
    {
        // -- Rejection sampling
        ZZ rand_val = poly[i];
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	4413      	add	r3, r2
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	613b      	str	r3, [r7, #16]
        while (rand_val >= max_multiple) { prng_fill_buffer(sizeof(ZZ), prng, (void *)&rand_val); }
 800db28:	e006      	b.n	800db38 <sample_poly_uniform+0x60>
 800db2a:	f107 0310 	add.w	r3, r7, #16
 800db2e:	461a      	mov	r2, r3
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	2004      	movs	r0, #4
 800db34:	f7ff fe9a 	bl	800d86c <prng_fill_buffer>
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d9f4      	bls.n	800db2a <sample_poly_uniform+0x52>
        poly[i] = barrett_reduce_32input_32modulus(rand_val, q);
 800db40:	6938      	ldr	r0, [r7, #16]
 800db42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	18d4      	adds	r4, r2, r3
 800db4a:	69f9      	ldr	r1, [r7, #28]
 800db4c:	f7ff ff27 	bl	800d99e <barrett_reduce_32input_32modulus>
 800db50:	4603      	mov	r3, r0
 800db52:	6023      	str	r3, [r4, #0]
    for (size_t i = 0; i < n; i++)
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	3301      	adds	r3, #1
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
 800db5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db5c:	6a3b      	ldr	r3, [r7, #32]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d3dc      	bcc.n	800db1c <sample_poly_uniform+0x44>
    }
}
 800db62:	bf00      	nop
 800db64:	bf00      	nop
 800db66:	372c      	adds	r7, #44	; 0x2c
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd90      	pop	{r4, r7, pc}

0800db6c <set_small_poly_idx>:

// ----------------------------  Ternary ---------------------------------

void set_small_poly_idx(size_t idx, uint8_t val_in, ZZ *poly)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b089      	sub	sp, #36	; 0x24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	460b      	mov	r3, r1
 800db76:	607a      	str	r2, [r7, #4]
 800db78:	72fb      	strb	r3, [r7, #11]
    se_assert(val_in <= 2);

    // -- This isn't really necessary if inputs are correct
    val_in &= 0x3;
 800db7a:	7afb      	ldrb	r3, [r7, #11]
 800db7c:	f003 0303 	and.w	r3, r3, #3
 800db80:	72fb      	strb	r3, [r7, #11]

    // -- Every byte can hold 4 samples
    uint8_t *poly_small = (uint8_t *)(&(poly[0]));
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	61fb      	str	r3, [r7, #28]
    size_t byte_num     = idx / 4;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	089b      	lsrs	r3, r3, #2
 800db8a:	61bb      	str	r3, [r7, #24]
    size_t byte_pos     = idx % 4;  // 0, 1, 2, or 3
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	617b      	str	r3, [r7, #20]

    uint8_t byte_in  = poly_small[byte_num];
 800db94:	69fa      	ldr	r2, [r7, #28]
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	4413      	add	r3, r2
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	74fb      	strb	r3, [r7, #19]
    uint8_t get_mask = (uint8_t)(~(0x3 << (6 - byte_pos * 2)));
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f1c3 0303 	rsb	r3, r3, #3
 800dba4:	005b      	lsls	r3, r3, #1
 800dba6:	2203      	movs	r2, #3
 800dba8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	43db      	mvns	r3, r3
 800dbb0:	74bb      	strb	r3, [r7, #18]
    uint8_t old_val  = byte_in & get_mask;
 800dbb2:	7cfa      	ldrb	r2, [r7, #19]
 800dbb4:	7cbb      	ldrb	r3, [r7, #18]
 800dbb6:	4013      	ands	r3, r2
 800dbb8:	747b      	strb	r3, [r7, #17]
    uint8_t new_val  = (uint8_t)(old_val | (val_in << (6 - byte_pos * 2)));
 800dbba:	7afa      	ldrb	r2, [r7, #11]
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	f1c3 0303 	rsb	r3, r3, #3
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc8:	b25a      	sxtb	r2, r3
 800dbca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	b25b      	sxtb	r3, r3
 800dbd2:	743b      	strb	r3, [r7, #16]

    // -- Debugging
    // printf("idx:         %zu, val_in:      %"PRIu8"\n", idx, val_in);
    // printf("byte_num:    %zu, byte_pos:    %zu\n", byte_num, byte_pos);

    poly_small[byte_num] = new_val;
 800dbd4:	69fa      	ldr	r2, [r7, #28]
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	4413      	add	r3, r2
 800dbda:	7c3a      	ldrb	r2, [r7, #16]
 800dbdc:	701a      	strb	r2, [r3, #0]

    // -- Debugging
    // uint8_t byte_out = poly_small[byte_num];
    // printf("b_in:     0x%x, b_out:    0x%x\n\n", byte_in, byte_out);
}
 800dbde:	bf00      	nop
 800dbe0:	3724      	adds	r7, #36	; 0x24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <get_small_poly_idx>:

uint8_t get_small_poly_idx(const ZZ *poly, size_t idx)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b087      	sub	sp, #28
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	6039      	str	r1, [r7, #0]
    const uint8_t *poly_small = (uint8_t *)(&(poly[0]));
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	617b      	str	r3, [r7, #20]
    size_t byte_num           = idx / 4;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	089b      	lsrs	r3, r3, #2
 800dbfc:	613b      	str	r3, [r7, #16]
    size_t byte_pos           = idx % 4;  // 0, 1, 2, or 3
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	f003 0303 	and.w	r3, r3, #3
 800dc04:	60fb      	str	r3, [r7, #12]
    uint8_t byte_val          = poly_small[byte_num];
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	72fb      	strb	r3, [r7, #11]
    return (byte_val >> (6 - byte_pos * 2)) & 0x3;
 800dc10:	7afa      	ldrb	r2, [r7, #11]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f1c3 0303 	rsb	r3, r3, #3
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	fa42 f303 	asr.w	r3, r2, r3
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	f003 0303 	and.w	r3, r3, #3
 800dc24:	b2db      	uxtb	r3, r3
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	371c      	adds	r7, #28
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <get_small_poly_idx_expanded>:

ZZ get_small_poly_idx_expanded(const ZZ *poly, size_t idx, ZZ q)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b086      	sub	sp, #24
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60f8      	str	r0, [r7, #12]
 800dc3a:	60b9      	str	r1, [r7, #8]
 800dc3c:	607a      	str	r2, [r7, #4]
    uint8_t val = get_small_poly_idx(poly, idx);
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7ff ffd2 	bl	800dbea <get_small_poly_idx>
 800dc46:	4603      	mov	r3, r0
 800dc48:	75fb      	strb	r3, [r7, #23]
    // -- If debugging, want an easy mapping: 0 -> 0, 1 -> 1, 2 -> q-1
    return (val < 2) ? val : (q - 1);
#else
    // -- Mapping: 0 -> q-1, 1 -> 0, 2 -> 1 (see explanation below)
    // return (!val) ? (q-1) : (ZZ)(val - 1);
    return val + ((-(ZZ)(val == 0)) & q) - 1;
 800dc4a:	7dfa      	ldrb	r2, [r7, #23]
 800dc4c:	7dfb      	ldrb	r3, [r7, #23]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	bf0c      	ite	eq
 800dc52:	2301      	moveq	r3, #1
 800dc54:	2300      	movne	r3, #0
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	4259      	negs	r1, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	400b      	ands	r3, r1
 800dc5e:	4413      	add	r3, r2
 800dc60:	3b01      	subs	r3, #1
#endif
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3718      	adds	r7, #24
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <expand_poly_ternary>:

void expand_poly_ternary(const ZZ *src, const Parms *parms, ZZ *dest)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b088      	sub	sp, #32
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
    PolySizeType n = parms->coeff_count;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	61bb      	str	r3, [r7, #24]
    ZZ q           = parms->curr_modulus->value;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	617b      	str	r3, [r7, #20]
    // -- Debugging
    // print_poly_ternary_full("src", src, n, true);

    // -- Fill in back first so we don't overwrite any values
    // -- Need to be careful with overflow and backwards loops
    for (size_t i = n; i > 0; i--)
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	61fb      	str	r3, [r7, #28]
 800dc88:	e013      	b.n	800dcb2 <expand_poly_ternary+0x48>
    {
        // printf("current idx: %zu\n", i-1); // debugging
        ZZ val      = get_small_poly_idx_expanded(src, i - 1, q);
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	4619      	mov	r1, r3
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f7ff ffcd 	bl	800dc32 <get_small_poly_idx_expanded>
 800dc98:	6138      	str	r0, [r7, #16]
        dest[i - 1] = val;
 800dc9a:	69fa      	ldr	r2, [r7, #28]
 800dc9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	4413      	add	r3, r2
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	601a      	str	r2, [r3, #0]
    for (size_t i = n; i > 0; i--)
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	61fb      	str	r3, [r7, #28]
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1e8      	bne.n	800dc8a <expand_poly_ternary+0x20>
    }
}
 800dcb8:	bf00      	nop
 800dcba:	bf00      	nop
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <convert_poly_ternary>:
    // print_poly_ternary_full("src", poly, parms->coeff_count, true);
    expand_poly_ternary(poly, parms, poly);
}

void convert_poly_ternary(const ZZ *src, const Parms *parms, ZZ *dest)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b088      	sub	sp, #32
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	60f8      	str	r0, [r7, #12]
 800dcca:	60b9      	str	r1, [r7, #8]
 800dccc:	607a      	str	r2, [r7, #4]
    PolySizeType n = parms->coeff_count;
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	61bb      	str	r3, [r7, #24]
    ZZ q_m1        = parms->curr_modulus->value - 1;
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	617b      	str	r3, [r7, #20]

    if (src != dest) memcpy(dest, src, n * sizeof(ZZ));
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d006      	beq.n	800dcf4 <convert_poly_ternary+0x32>
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	461a      	mov	r2, r3
 800dcec:	68f9      	ldr	r1, [r7, #12]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 fc04 	bl	800e4fc <memcpy>
    for (size_t i = 0; i < n; i++)
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	61fb      	str	r3, [r7, #28]
 800dcf8:	e00f      	b.n	800dd1a <convert_poly_ternary+0x58>
    {
        if (src[i] > 1) dest[i] = q_m1;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	4413      	add	r3, r2
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d905      	bls.n	800dd14 <convert_poly_ternary+0x52>
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	4413      	add	r3, r2
 800dd10:	697a      	ldr	r2, [r7, #20]
 800dd12:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n; i++)
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	3301      	adds	r3, #1
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	69fa      	ldr	r2, [r7, #28]
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d3eb      	bcc.n	800dcfa <convert_poly_ternary+0x38>
    }
}
 800dd22:	bf00      	nop
 800dd24:	bf00      	nop
 800dd26:	3720      	adds	r7, #32
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <convert_poly_ternary_inpl>:

void convert_poly_ternary_inpl(ZZ *poly, const Parms *parms)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
    convert_poly_ternary(poly, parms, poly);
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	6839      	ldr	r1, [r7, #0]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f7ff ffc1 	bl	800dcc2 <convert_poly_ternary>
}
 800dd40:	bf00      	nop
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <sample_poly_ternary>:

void sample_poly_ternary(const Parms *parms, SE_PRNG *prng, ZZ *poly)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08a      	sub	sp, #40	; 0x28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
    PolySizeType n = parms->coeff_count;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	623b      	str	r3, [r7, #32]
    ZZ q           = parms->curr_modulus->value;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	61fb      	str	r3, [r7, #28]
    //    Uniform over [-1, 1] ---> Uniform over [0, 2]
    //    We know that max_random = 0xFFFF_FFFFULL = 0 (mod 3)
    //    So, max_multiple = max_random - (max_random % 3) - 1
    //                     = max_random - 1
    //                     = 0xFFFF_FFFEULL
    ZZ max_multiple = (ZZ)0xFFFFFFFEUL;
 800dd62:	f06f 0301 	mvn.w	r3, #1
 800dd66:	61bb      	str	r3, [r7, #24]

    prng_fill_buffer(n * sizeof(ZZ), prng, (void *)poly);
 800dd68:	6a3b      	ldr	r3, [r7, #32]
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	68b9      	ldr	r1, [r7, #8]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff fd7b 	bl	800d86c <prng_fill_buffer>

    for (size_t i = 0; i < n; i++)
 800dd76:	2300      	movs	r3, #0
 800dd78:	627b      	str	r3, [r7, #36]	; 0x24
 800dd7a:	e02b      	b.n	800ddd4 <sample_poly_ternary+0x8c>
    {
        // -- Rejection sampling
        ZZ rand_val = poly[i];
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	4413      	add	r3, r2
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	613b      	str	r3, [r7, #16]
        while (rand_val >= max_multiple) { prng_fill_buffer(sizeof(ZZ), prng, (void *)&rand_val); }
 800dd88:	e006      	b.n	800dd98 <sample_poly_ternary+0x50>
 800dd8a:	f107 0310 	add.w	r3, r7, #16
 800dd8e:	461a      	mov	r2, r3
 800dd90:	68b9      	ldr	r1, [r7, #8]
 800dd92:	2004      	movs	r0, #4
 800dd94:	f7ff fd6a 	bl	800d86c <prng_fill_buffer>
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	69ba      	ldr	r2, [r7, #24]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d9f4      	bls.n	800dd8a <sample_poly_ternary+0x42>
        poly[i]         = (rand_ternary > 1) ? q - 1 : rand_ternary;
#else
        // -- If not debugging, we want a constant time version of mod 3.
        //    This leads to a mapping of: 0 -> q-1, 1 -> 0, 2 -> 1
        //    This mapping matches the mapping in SEAL
        uint8_t rand_ternary = mod3_zzinput(rand_val);
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff fe56 	bl	800da54 <mod3_zzinput>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	75fb      	strb	r3, [r7, #23]
        poly[i]              = rand_ternary + ((-(ZZ)(rand_val == 0)) & q) - 1;
 800ddac:	7dfa      	ldrb	r2, [r7, #23]
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	bf0c      	ite	eq
 800ddb4:	2301      	moveq	r3, #1
 800ddb6:	2300      	movne	r3, #0
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	4259      	negs	r1, r3
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	400b      	ands	r3, r1
 800ddc0:	441a      	add	r2, r3
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	440b      	add	r3, r1
 800ddca:	3a01      	subs	r2, #1
 800ddcc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n; i++)
 800ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	627b      	str	r3, [r7, #36]	; 0x24
 800ddd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d3cf      	bcc.n	800dd7c <sample_poly_ternary+0x34>
#endif
    }
}
 800dddc:	bf00      	nop
 800ddde:	bf00      	nop
 800dde0:	3728      	adds	r7, #40	; 0x28
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <sample_small_poly_ternary_prng_96>:
    }
}
*/

void sample_small_poly_ternary_prng_96(PolySizeType n, SE_PRNG *prng, ZZ *poly)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b0a2      	sub	sp, #136	; 0x88
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	60f8      	str	r0, [r7, #12]
 800ddee:	60b9      	str	r1, [r7, #8]
 800ddf0:	607a      	str	r2, [r7, #4]
    se_assert(96 <= n);
    se_assert(prng && poly);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d002      	beq.n	800ddfe <sample_small_poly_ternary_prng_96+0x18>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	bf00      	nop
    uint8_t max_multiple = (uint8_t)(0xFE);
 800ddfe:	23fe      	movs	r3, #254	; 0xfe
 800de00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    for (size_t j = 0; j < n; j += 96)
 800de04:	2300      	movs	r3, #0
 800de06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800de0a:	e04f      	b.n	800deac <sample_small_poly_ternary_prng_96+0xc6>
    {
        uint8_t buffer[96];
        prng_fill_buffer(96, prng, &(buffer[0]));
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	461a      	mov	r2, r3
 800de12:	68b9      	ldr	r1, [r7, #8]
 800de14:	2060      	movs	r0, #96	; 0x60
 800de16:	f7ff fd29 	bl	800d86c <prng_fill_buffer>

        size_t i_stop = ((j + 95) < n) ? 96 : (n - j);
 800de1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de1e:	335f      	adds	r3, #95	; 0x5f
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	429a      	cmp	r2, r3
 800de24:	d804      	bhi.n	800de30 <sample_small_poly_ternary_prng_96+0x4a>
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de2c:	1ad3      	subs	r3, r2, r3
 800de2e:	e000      	b.n	800de32 <sample_small_poly_ternary_prng_96+0x4c>
 800de30:	2360      	movs	r3, #96	; 0x60
 800de32:	67bb      	str	r3, [r7, #120]	; 0x78

        for (size_t i = 0; i < i_stop; i++)
 800de34:	2300      	movs	r3, #0
 800de36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de3a:	e02d      	b.n	800de98 <sample_small_poly_ternary_prng_96+0xb2>
        {
            uint8_t rand_val = buffer[i];
 800de3c:	f107 0214 	add.w	r2, r7, #20
 800de40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de44:	4413      	add	r3, r2
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            while (rand_val >= max_multiple) { prng_fill_buffer(1, prng, (void *)&rand_val); }
 800de4c:	e006      	b.n	800de5c <sample_small_poly_ternary_prng_96+0x76>
 800de4e:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800de52:	461a      	mov	r2, r3
 800de54:	68b9      	ldr	r1, [r7, #8]
 800de56:	2001      	movs	r0, #1
 800de58:	f7ff fd08 	bl	800d86c <prng_fill_buffer>
 800de5c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800de60:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800de64:	429a      	cmp	r2, r3
 800de66:	d9f2      	bls.n	800de4e <sample_small_poly_ternary_prng_96+0x68>
#ifdef DEBUG_EASYMOD
            uint8_t rand_ternary = rand_val % 3;
#else
            uint8_t rand_ternary = mod3_uint8input(rand_val);
 800de68:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7ff fdb5 	bl	800d9dc <mod3_uint8input>
 800de72:	4603      	mov	r3, r0
 800de74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
            set_small_poly_idx(i + j, rand_ternary, poly);
 800de78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de80:	4413      	add	r3, r2
 800de82:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff fe6f 	bl	800db6c <set_small_poly_idx>
        for (size_t i = 0; i < i_stop; i++)
 800de8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de92:	3301      	adds	r3, #1
 800de94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800de98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d3cc      	bcc.n	800de3c <sample_small_poly_ternary_prng_96+0x56>
    for (size_t j = 0; j < n; j += 96)
 800dea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dea6:	3360      	adds	r3, #96	; 0x60
 800dea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800deac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d3aa      	bcc.n	800de0c <sample_small_poly_ternary_prng_96+0x26>
        }
    }
}
 800deb6:	bf00      	nop
 800deb8:	bf00      	nop
 800deba:	3788      	adds	r7, #136	; 0x88
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <hamming_weight>:

@param[in] value  A byte-sized value
@returns          Hamming weight of value
*/
static inline int8_t hamming_weight(uint8_t value)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	4603      	mov	r3, r0
 800dec8:	71fb      	strb	r3, [r7, #7]
    int t = (int)value;
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	60fb      	str	r3, [r7, #12]
    t -= (t >> 1) & 0x55;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	105b      	asrs	r3, r3, #1
 800ded2:	f003 0355 	and.w	r3, r3, #85	; 0x55
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	60fb      	str	r3, [r7, #12]
    t = (t & 0x33) + ((t >> 2) & 0x33);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f003 0233 	and.w	r2, r3, #51	; 0x33
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	109b      	asrs	r3, r3, #2
 800dee6:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800deea:	4413      	add	r3, r2
 800deec:	60fb      	str	r3, [r7, #12]
    return (int8_t)(t + (t >> 4)) & 0x0F;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	b2da      	uxtb	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	111b      	asrs	r3, r3, #4
 800def6:	b2db      	uxtb	r3, r3
 800def8:	4413      	add	r3, r2
 800defa:	b2db      	uxtb	r3, r3
 800defc:	b25b      	sxtb	r3, r3
 800defe:	f003 030f 	and.w	r3, r3, #15
 800df02:	b25b      	sxtb	r3, r3
}
 800df04:	4618      	mov	r0, r3
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <get_cbd_val>:

@param[in] x  Six random bytes
@returns      A (non-modulo-reduced) cbd sample
*/
static inline int8_t get_cbd_val(uint8_t x[6])
{
 800df10:	b590      	push	{r4, r7, lr}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
    x[2] &= 0x1F;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3302      	adds	r3, #2
 800df1c:	781a      	ldrb	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3302      	adds	r3, #2
 800df22:	f002 021f 	and.w	r2, r2, #31
 800df26:	b2d2      	uxtb	r2, r2
 800df28:	701a      	strb	r2, [r3, #0]
    x[5] &= 0x1F;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3305      	adds	r3, #5
 800df2e:	781a      	ldrb	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	3305      	adds	r3, #5
 800df34:	f002 021f 	and.w	r2, r2, #31
 800df38:	b2d2      	uxtb	r2, r2
 800df3a:	701a      	strb	r2, [r3, #0]
    return (int8_t)(hamming_weight(x[0]) + hamming_weight(x[1]) + hamming_weight(x[2]) -
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff ffbd 	bl	800dec0 <hamming_weight>
 800df46:	4603      	mov	r3, r0
 800df48:	b2dc      	uxtb	r4, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3301      	adds	r3, #1
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff ffb5 	bl	800dec0 <hamming_weight>
 800df56:	4603      	mov	r3, r0
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	4423      	add	r3, r4
 800df5c:	b2dc      	uxtb	r4, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	3302      	adds	r3, #2
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff ffab 	bl	800dec0 <hamming_weight>
 800df6a:	4603      	mov	r3, r0
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	4423      	add	r3, r4
 800df70:	b2dc      	uxtb	r4, r3
                    hamming_weight(x[3]) - hamming_weight(x[4]) - hamming_weight(x[5]));
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3303      	adds	r3, #3
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff ffa1 	bl	800dec0 <hamming_weight>
 800df7e:	4603      	mov	r3, r0
 800df80:	b2db      	uxtb	r3, r3
    return (int8_t)(hamming_weight(x[0]) + hamming_weight(x[1]) + hamming_weight(x[2]) -
 800df82:	1ae3      	subs	r3, r4, r3
 800df84:	b2dc      	uxtb	r4, r3
                    hamming_weight(x[3]) - hamming_weight(x[4]) - hamming_weight(x[5]));
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	3304      	adds	r3, #4
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7ff ff97 	bl	800dec0 <hamming_weight>
 800df92:	4603      	mov	r3, r0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	1ae3      	subs	r3, r4, r3
 800df98:	b2dc      	uxtb	r4, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	3305      	adds	r3, #5
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7ff ff8d 	bl	800dec0 <hamming_weight>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	1ae3      	subs	r3, r4, r3
 800dfac:	b2db      	uxtb	r3, r3
    return (int8_t)(hamming_weight(x[0]) + hamming_weight(x[1]) + hamming_weight(x[2]) -
 800dfae:	b25b      	sxtb	r3, r3
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	370c      	adds	r7, #12
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd90      	pop	{r4, r7, pc}

0800dfb8 <sample_poly_cbd_generic_prng_16>:
    }
}
*/

void sample_poly_cbd_generic_prng_16(PolySizeType n, SE_PRNG *prng, int8_t *poly)
{
 800dfb8:	b590      	push	{r4, r7, lr}
 800dfba:	b09f      	sub	sp, #124	; 0x7c
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
    for (size_t j = 0; j < n; j += 16)
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	677b      	str	r3, [r7, #116]	; 0x74
 800dfc8:	e025      	b.n	800e016 <sample_poly_cbd_generic_prng_16+0x5e>
    {
        // -- Every 42 bits (6 bytes) generates a sample
        uint8_t buffer[96];  // Generate 16 samples at once (6 * 16 = 96 bytes)
        prng_fill_buffer(96, prng, (void *)buffer);
 800dfca:	f107 0310 	add.w	r3, r7, #16
 800dfce:	461a      	mov	r2, r3
 800dfd0:	68b9      	ldr	r1, [r7, #8]
 800dfd2:	2060      	movs	r0, #96	; 0x60
 800dfd4:	f7ff fc4a 	bl	800d86c <prng_fill_buffer>

        for (size_t i = 0; i < 16; i++) { poly[i + j] = get_cbd_val(buffer + 6 * i); }
 800dfd8:	2300      	movs	r3, #0
 800dfda:	673b      	str	r3, [r7, #112]	; 0x70
 800dfdc:	e015      	b.n	800e00a <sample_poly_cbd_generic_prng_16+0x52>
 800dfde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	005b      	lsls	r3, r3, #1
 800dfe4:	4413      	add	r3, r2
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	461a      	mov	r2, r3
 800dfea:	f107 0310 	add.w	r3, r7, #16
 800dfee:	1899      	adds	r1, r3, r2
 800dff0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dff4:	4413      	add	r3, r2
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	18d4      	adds	r4, r2, r3
 800dffa:	4608      	mov	r0, r1
 800dffc:	f7ff ff88 	bl	800df10 <get_cbd_val>
 800e000:	4603      	mov	r3, r0
 800e002:	7023      	strb	r3, [r4, #0]
 800e004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e006:	3301      	adds	r3, #1
 800e008:	673b      	str	r3, [r7, #112]	; 0x70
 800e00a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e00c:	2b0f      	cmp	r3, #15
 800e00e:	d9e6      	bls.n	800dfde <sample_poly_cbd_generic_prng_16+0x26>
    for (size_t j = 0; j < n; j += 16)
 800e010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e012:	3310      	adds	r3, #16
 800e014:	677b      	str	r3, [r7, #116]	; 0x74
 800e016:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d3d5      	bcc.n	800dfca <sample_poly_cbd_generic_prng_16+0x12>
    }
}
 800e01e:	bf00      	nop
 800e020:	bf00      	nop
 800e022:	377c      	adds	r7, #124	; 0x7c
 800e024:	46bd      	mov	sp, r7
 800e026:	bd90      	pop	{r4, r7, pc}

0800e028 <sample_add_poly_cbd_generic_inpl_prng_16>:
    }
}
*/

void sample_add_poly_cbd_generic_inpl_prng_16(int64_t *poly, PolySizeType n, SE_PRNG *prng)
{
 800e028:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800e02c:	b09e      	sub	sp, #120	; 0x78
 800e02e:	af00      	add	r7, sp, #0
 800e030:	60f8      	str	r0, [r7, #12]
 800e032:	60b9      	str	r1, [r7, #8]
 800e034:	607a      	str	r2, [r7, #4]
    for (size_t j = 0; j < n; j += 16)
 800e036:	2300      	movs	r3, #0
 800e038:	677b      	str	r3, [r7, #116]	; 0x74
 800e03a:	e039      	b.n	800e0b0 <sample_add_poly_cbd_generic_inpl_prng_16+0x88>
    {
        // -- Every 42 bits (6 bytes) generates a sample
        uint8_t buffer[96];  // Generate 16 samples at once (6 * 16 = 96 bytes)
        prng_fill_buffer(96, prng, (void *)buffer);
 800e03c:	f107 0310 	add.w	r3, r7, #16
 800e040:	461a      	mov	r2, r3
 800e042:	6879      	ldr	r1, [r7, #4]
 800e044:	2060      	movs	r0, #96	; 0x60
 800e046:	f7ff fc11 	bl	800d86c <prng_fill_buffer>
        for (size_t i = 0; i < 16; i++) { poly[i + j] += get_cbd_val(buffer + 6 * i); }
 800e04a:	2300      	movs	r3, #0
 800e04c:	673b      	str	r3, [r7, #112]	; 0x70
 800e04e:	e029      	b.n	800e0a4 <sample_add_poly_cbd_generic_inpl_prng_16+0x7c>
 800e050:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e052:	4613      	mov	r3, r2
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	4413      	add	r3, r2
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	461a      	mov	r2, r3
 800e05c:	f107 0310 	add.w	r3, r7, #16
 800e060:	4413      	add	r3, r2
 800e062:	4618      	mov	r0, r3
 800e064:	f7ff ff54 	bl	800df10 <get_cbd_val>
 800e068:	4603      	mov	r3, r0
 800e06a:	461e      	mov	r6, r3
 800e06c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e06e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e070:	4413      	add	r3, r2
 800e072:	00db      	lsls	r3, r3, #3
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	4413      	add	r3, r2
 800e078:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e07c:	fa4f fb86 	sxtb.w	fp, r6
 800e080:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800e084:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800e086:	4633      	mov	r3, r6
 800e088:	6f7e      	ldr	r6, [r7, #116]	; 0x74
 800e08a:	441e      	add	r6, r3
 800e08c:	00f6      	lsls	r6, r6, #3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	441e      	add	r6, r3
 800e092:	eb10 040b 	adds.w	r4, r0, fp
 800e096:	eb41 050c 	adc.w	r5, r1, ip
 800e09a:	e9c6 4500 	strd	r4, r5, [r6]
 800e09e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	673b      	str	r3, [r7, #112]	; 0x70
 800e0a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0a6:	2b0f      	cmp	r3, #15
 800e0a8:	d9d2      	bls.n	800e050 <sample_add_poly_cbd_generic_inpl_prng_16+0x28>
    for (size_t j = 0; j < n; j += 16)
 800e0aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0ac:	3310      	adds	r3, #16
 800e0ae:	677b      	str	r3, [r7, #116]	; 0x74
 800e0b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d3c1      	bcc.n	800e03c <sample_add_poly_cbd_generic_inpl_prng_16+0x14>
    }
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	3778      	adds	r7, #120	; 0x78
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0800e0c4 <se_setup_custom>:
static SE_PRNG se_shareable_prng_global;
static SE_PRNG se_prng_global;

SE_PARMS *se_setup_custom(size_t degree, size_t nprimes, const ZZ *modulus_vals, const ZZ *ratios,
                          double scale, EncryptType encrypt_type)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b08e      	sub	sp, #56	; 0x38
 800e0c8:	af02      	add	r7, sp, #8
 800e0ca:	6178      	str	r0, [r7, #20]
 800e0cc:	6139      	str	r1, [r7, #16]
 800e0ce:	60fa      	str	r2, [r7, #12]
 800e0d0:	60bb      	str	r3, [r7, #8]
 800e0d2:	ed87 0b00 	vstr	d0, [r7]
    SE_PARMS *se_parms = &se_parms_global;
 800e0d6:	4b43      	ldr	r3, [pc, #268]	; (800e1e4 <se_setup_custom+0x120>)
 800e0d8:	62bb      	str	r3, [r7, #40]	; 0x28
    Parms *parms       = &se_encr_params_global;
 800e0da:	4b43      	ldr	r3, [pc, #268]	; (800e1e8 <se_setup_custom+0x124>)
 800e0dc:	627b      	str	r3, [r7, #36]	; 0x24
    SE_PTRS *se_ptrs   = &se_ptrs_global;
 800e0de:	4b43      	ldr	r3, [pc, #268]	; (800e1ec <se_setup_custom+0x128>)
 800e0e0:	623b      	str	r3, [r7, #32]

    se_assert(se_parms && parms && se_ptrs);
 800e0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d005      	beq.n	800e0f4 <se_setup_custom+0x30>
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d002      	beq.n	800e0f4 <se_setup_custom+0x30>
 800e0ee:	6a3b      	ldr	r3, [r7, #32]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bf00      	nop
    se_parms->parms   = parms;
 800e0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f8:	601a      	str	r2, [r3, #0]
    se_parms->se_ptrs = se_ptrs;
 800e0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fc:	6a3a      	ldr	r2, [r7, #32]
 800e0fe:	605a      	str	r2, [r3, #4]

    size_t n             = degree;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	61fb      	str	r3, [r7, #28]
    parms->scale         = scale;
 800e104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e10a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    parms->is_asymmetric = (encrypt_type == SE_ASYM_ENCR);
 800e10e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e112:	2b01      	cmp	r3, #1
 800e114:	bf0c      	ite	eq
 800e116:	2301      	moveq	r3, #1
 800e118:	2300      	movne	r3, #0
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	f883 2020 	strb.w	r2, [r3, #32]
    parms->pk_from_file  = 1;
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    parms->sample_s      = 0;
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    parms->small_u       = 1;
 800e132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e134:	2201      	movs	r2, #1
 800e136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    parms->small_s       = 1;
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    se_parms->parms      = parms;
 800e142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e146:	601a      	str	r2, [r3, #0]

#ifdef SE_USE_MALLOC
    ZZ *mempool;
    if (encrypt_type == SE_ASYM_ENCR)
 800e148:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d108      	bne.n	800e162 <se_setup_custom+0x9e>
    {
        print_ckks_mempool_size(n, 0);
 800e150:	2100      	movs	r1, #0
 800e152:	69f8      	ldr	r0, [r7, #28]
 800e154:	f7fa ff18 	bl	8008f88 <print_ckks_mempool_size>
        mempool = ckks_mempool_setup_asym(n);
 800e158:	69f8      	ldr	r0, [r7, #28]
 800e15a:	f7fa f8eb 	bl	8008334 <ckks_mempool_setup_asym>
 800e15e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e160:	e007      	b.n	800e172 <se_setup_custom+0xae>
    }
    else
    {
        print_ckks_mempool_size(n, 1);
 800e162:	2101      	movs	r1, #1
 800e164:	69f8      	ldr	r0, [r7, #28]
 800e166:	f7fa ff0f 	bl	8008f88 <print_ckks_mempool_size>
        mempool = ckks_mempool_setup_sym(n);
 800e16a:	69f8      	ldr	r0, [r7, #28]
 800e16c:	f7fb f98c 	bl	8009488 <ckks_mempool_setup_sym>
 800e170:	62f8      	str	r0, [r7, #44]	; 0x2c
    printf("Value of mempool_ptr_global (should be address of mempool_local): %p\n",
           mempool_ptr_global);
    printf("Value of mempool (should be equal to value of mempool_ptr_global): %p\n", mempool);
#endif

    if (encrypt_type == SE_ASYM_ENCR) { ckks_set_ptrs_asym(n, mempool, se_ptrs); }
 800e172:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e176:	2b01      	cmp	r3, #1
 800e178:	d105      	bne.n	800e186 <se_setup_custom+0xc2>
 800e17a:	6a3a      	ldr	r2, [r7, #32]
 800e17c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e17e:	69f8      	ldr	r0, [r7, #28]
 800e180:	f7fa f8fc 	bl	800837c <ckks_set_ptrs_asym>
 800e184:	e004      	b.n	800e190 <se_setup_custom+0xcc>
    else
    {
        ckks_set_ptrs_sym(n, mempool, se_ptrs);
 800e186:	6a3a      	ldr	r2, [r7, #32]
 800e188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e18a:	69f8      	ldr	r0, [r7, #28]
 800e18c:	f7fb f9a0 	bl	80094d0 <ckks_set_ptrs_sym>
    }

    if (!modulus_vals || !ratios) { ckks_setup(n, nprimes, se_ptrs->index_map_ptr, parms); }
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d002      	beq.n	800e19c <se_setup_custom+0xd8>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d107      	bne.n	800e1ac <se_setup_custom+0xe8>
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	69da      	ldr	r2, [r3, #28]
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	6939      	ldr	r1, [r7, #16]
 800e1a4:	69f8      	ldr	r0, [r7, #28]
 800e1a6:	f7fa fb3c 	bl	8008822 <ckks_setup>
 800e1aa:	e00a      	b.n	800e1c2 <se_setup_custom+0xfe>
    else
    {
        ckks_setup_custom(n, nprimes, modulus_vals, ratios, se_ptrs->index_map_ptr, parms);
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	69db      	ldr	r3, [r3, #28]
 800e1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1b2:	9201      	str	r2, [sp, #4]
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	6939      	ldr	r1, [r7, #16]
 800e1bc:	69f8      	ldr	r0, [r7, #28]
 800e1be:	f7fa fb40 	bl	8008842 <ckks_setup_custom>
    }

    if (encrypt_type == SE_SYM_ENCR) { ckks_setup_s(parms, NULL, NULL, se_ptrs->ternary); }
 800e1c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d106      	bne.n	800e1d8 <se_setup_custom+0x114>
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	68db      	ldr	r3, [r3, #12]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1d4:	f7fb fa02 	bl	80095dc <ckks_setup_s>

    return se_parms;
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3730      	adds	r7, #48	; 0x30
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop
 800e1e4:	20002194 	.word	0x20002194
 800e1e8:	20002140 	.word	0x20002140
 800e1ec:	20002168 	.word	0x20002168

0800e1f0 <se_setup>:

SE_PARMS *se_setup(size_t degree, size_t nprimes, double scale, EncryptType encrypt_type)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b088      	sub	sp, #32
 800e1f4:	af02      	add	r7, sp, #8
 800e1f6:	6178      	str	r0, [r7, #20]
 800e1f8:	6139      	str	r1, [r7, #16]
 800e1fa:	ed87 0b02 	vstr	d0, [r7, #8]
 800e1fe:	4613      	mov	r3, r2
 800e200:	71fb      	strb	r3, [r7, #7]
    return se_setup_custom(degree, nprimes, NULL, NULL, scale, encrypt_type);
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	ed97 0b02 	vldr	d0, [r7, #8]
 800e20a:	2300      	movs	r3, #0
 800e20c:	2200      	movs	r2, #0
 800e20e:	6939      	ldr	r1, [r7, #16]
 800e210:	6978      	ldr	r0, [r7, #20]
 800e212:	f7ff ff57 	bl	800e0c4 <se_setup_custom>
 800e216:	4603      	mov	r3, r0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <se_encrypt_seeded>:
}
extern uint8_t part1 ;

bool se_encrypt_seeded(uint8_t *shareable_seed, uint8_t *seed, SEND_FNCT_PTR network_send_function,
                       void *v, size_t vlen_bytes, bool print, SE_PARMS *se_parms)
{
 800e220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e222:	b097      	sub	sp, #92	; 0x5c
 800e224:	af08      	add	r7, sp, #32
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	603b      	str	r3, [r7, #0]
    se_assert(se_parms);
    se_assert(se_parms && se_parms->se_ptrs);
 800e22e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e230:	2b00      	cmp	r3, #0
 800e232:	d003      	beq.n	800e23c <se_encrypt_seeded+0x1c>
 800e234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	bf00      	nop
    se_assert(se_parms->parms && se_parms->se_ptrs->values);
 800e23c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d004      	beq.n	800e24e <se_encrypt_seeded+0x2e>
 800e244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	689b      	ldr	r3, [r3, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	bf00      	nop
    Parms *parms     = se_parms->parms;
 800e24e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	62bb      	str	r3, [r7, #40]	; 0x28
    SE_PTRS *se_ptrs = se_parms->se_ptrs;
 800e254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n         = parms->coeff_count;
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	623b      	str	r3, [r7, #32]

    size_t copy_size_bytes = (n / 2) * sizeof(ZZ);
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	085b      	lsrs	r3, r3, #1
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	637b      	str	r3, [r7, #52]	; 0x34
    if (vlen_bytes < copy_size_bytes) copy_size_bytes = vlen_bytes;
 800e268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d201      	bcs.n	800e274 <se_encrypt_seeded+0x54>
 800e270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e272:	637b      	str	r3, [r7, #52]	; 0x34
    memset(se_ptrs->values, 0, copy_size_bytes);
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e27a:	2100      	movs	r1, #0
 800e27c:	4618      	mov	r0, r3
 800e27e:	f000 f94b 	bl	800e518 <memset>
    memcpy(se_ptrs->values, v, copy_size_bytes);
 800e282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e288:	6839      	ldr	r1, [r7, #0]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f000 f936 	bl	800e4fc <memcpy>

    ckks_reset_primes(parms);
 800e290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e292:	f7fa faf7 	bl	8008884 <ckks_reset_primes>

    bool ret = ckks_encode_base(parms, se_ptrs->values, n / 2, se_ptrs->index_map_ptr,
 800e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e298:	6899      	ldr	r1, [r3, #8]
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	0858      	lsrs	r0, r3, #1
 800e29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a0:	69dc      	ldr	r4, [r3, #28]
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a8:	6812      	ldr	r2, [r2, #0]
 800e2aa:	9201      	str	r2, [sp, #4]
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	4623      	mov	r3, r4
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2b4:	f7fa faf2 	bl	800889c <ckks_encode_base>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	77fb      	strb	r3, [r7, #31]
                                se_ptrs->ifft_roots, se_ptrs->conj_vals);
    se_assert(ret);
    if (!ret) return ret;
 800e2bc:	7ffb      	ldrb	r3, [r7, #31]
 800e2be:	f083 0301 	eor.w	r3, r3, #1
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <se_encrypt_seeded+0xac>
 800e2c8:	7ffb      	ldrb	r3, [r7, #31]
 800e2ca:	e0af      	b.n	800e42c <se_encrypt_seeded+0x20c>
    // print_poly_int64_full("pt, reg", se_ptrs->conj_vals_int_ptr, n);

    //ckks_next_prime_sym(parms, se_ptrs->ternary);
   // ckks_next_prime_asym(parms, se_ptrs->ternary);

    if (parms->is_asymmetric)
 800e2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d01c      	beq.n	800e310 <se_encrypt_seeded+0xf0>
    {
        ckks_asym_init(parms, seed, &se_prng_global, se_ptrs->conj_vals_int_ptr, se_ptrs->ternary,
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d8:	6919      	ldr	r1, [r3, #16]
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e2e2:	9201      	str	r2, [sp, #4]
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	4a52      	ldr	r2, [pc, #328]	; (800e434 <se_encrypt_seeded+0x214>)
 800e2ea:	68b9      	ldr	r1, [r7, #8]
 800e2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2ee:	f7fa f8db 	bl	80084a8 <ckks_asym_init>
                       se_ptrs->e1_ptr);
        load_pki(0, parms, se_ptrs->c0_ptr);
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f4:	695b      	ldr	r3, [r3, #20]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	f7fb fb3a 	bl	8009974 <load_pki>
        load_pki(1, parms, se_ptrs->c1_ptr);
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	699b      	ldr	r3, [r3, #24]
 800e304:	461a      	mov	r2, r3
 800e306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e308:	2001      	movs	r0, #1
 800e30a:	f7fb fb33 	bl	8009974 <load_pki>
 800e30e:	e00a      	b.n	800e326 <se_encrypt_seeded+0x106>
    }
    else
    {
        ckks_sym_init(parms, shareable_seed, seed, &se_shareable_prng_global, &se_prng_global,
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	9301      	str	r3, [sp, #4]
 800e316:	4b47      	ldr	r3, [pc, #284]	; (800e434 <se_encrypt_seeded+0x214>)
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	4b47      	ldr	r3, [pc, #284]	; (800e438 <se_encrypt_seeded+0x218>)
 800e31c:	68ba      	ldr	r2, [r7, #8]
 800e31e:	68f9      	ldr	r1, [r7, #12]
 800e320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e322:	f7fb f97b 	bl	800961c <ckks_sym_init>

    // -- Uncomment this line and the similar line above to check against
    //    expected values with adapter
    // print_poly_int64_full("pte, reg", se_ptrs->conj_vals_int_ptr, n);parms->nprimes

   for (size_t i = 0; i < part1; i++) {
 800e326:	2300      	movs	r3, #0
 800e328:	633b      	str	r3, [r7, #48]	; 0x30
 800e32a:	e078      	b.n	800e41e <se_encrypt_seeded+0x1fe>


        if (parms->is_asymmetric)
 800e32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d01c      	beq.n	800e370 <se_encrypt_seeded+0x150>
        {
            ckks_encode_encrypt_asym(parms, se_ptrs->conj_vals_int_ptr, se_ptrs->ternary,
 800e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e338:	691c      	ldr	r4, [r3, #16]
 800e33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33c:	68dd      	ldr	r5, [r3, #12]
                                     se_ptrs->e1_ptr, se_ptrs->ntt_roots_ptr, se_ptrs->ntt_pte_ptr,
 800e33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e340:	6a9e      	ldr	r6, [r3, #40]	; 0x28
            ckks_encode_encrypt_asym(parms, se_ptrs->conj_vals_int_ptr, se_ptrs->ternary,
 800e342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e34a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e34c:	6949      	ldr	r1, [r1, #20]
 800e34e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e350:	6980      	ldr	r0, [r0, #24]
 800e352:	9005      	str	r0, [sp, #20]
 800e354:	9104      	str	r1, [sp, #16]
 800e356:	2100      	movs	r1, #0
 800e358:	9103      	str	r1, [sp, #12]
 800e35a:	2100      	movs	r1, #0
 800e35c:	9102      	str	r1, [sp, #8]
 800e35e:	9201      	str	r2, [sp, #4]
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	4633      	mov	r3, r6
 800e364:	462a      	mov	r2, r5
 800e366:	4621      	mov	r1, r4
 800e368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e36a:	f7fa f8cf 	bl	800850c <ckks_encode_encrypt_asym>
 800e36e:	e01a      	b.n	800e3a6 <se_encrypt_seeded+0x186>
                                     NULL, NULL, se_ptrs->c0_ptr, se_ptrs->c1_ptr);
        }
        else
        {

            ckks_encode_encrypt_sym(parms, se_ptrs->conj_vals_int_ptr, NULL, &se_shareable_prng_global, se_ptrs->ternary,
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	691d      	ldr	r5, [r3, #16]
 800e374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e37a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e37c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e37e:	6a09      	ldr	r1, [r1, #32]
 800e380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e382:	6940      	ldr	r0, [r0, #20]
 800e384:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e386:	69a4      	ldr	r4, [r4, #24]
 800e388:	2600      	movs	r6, #0
 800e38a:	9606      	str	r6, [sp, #24]
 800e38c:	2600      	movs	r6, #0
 800e38e:	9605      	str	r6, [sp, #20]
 800e390:	9404      	str	r4, [sp, #16]
 800e392:	9003      	str	r0, [sp, #12]
 800e394:	9102      	str	r1, [sp, #8]
 800e396:	9201      	str	r2, [sp, #4]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	4b27      	ldr	r3, [pc, #156]	; (800e438 <se_encrypt_seeded+0x218>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	4629      	mov	r1, r5
 800e3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3a2:	f7fb f955 	bl	8009650 <ckks_encode_encrypt_sym>
#ifndef SE_REVERSE_CT_GEN_ENABLED
        // -- Sanity check
       // se_assert(se_parms->parms->curr_modulus_idx == i);
#endif
        // -- Sanity checks
        for (size_t i = 0; i < n; i++)
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3aa:	e002      	b.n	800e3b2 <se_encrypt_seeded+0x192>
 800e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d3f8      	bcc.n	800e3ac <se_encrypt_seeded+0x18c>
            se_assert((se_ptrs->c0_ptr)[i] < se_parms->parms->curr_modulus->value);
            se_assert((se_ptrs->c1_ptr)[i] < se_parms->parms->curr_modulus->value);
        }
#endif

        if (network_send_function)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d013      	beq.n	800e3e8 <se_encrypt_seeded+0x1c8>
                se_assert(nbytes_recv == nbytes_send);
            }
            else
#endif
            {
                nbytes_send = n * sizeof(ZZ);
 800e3c0:	6a3b      	ldr	r3, [r7, #32]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	61bb      	str	r3, [r7, #24]
                nbytes_recv = network_send_function(se_ptrs->c0_ptr, nbytes_send);
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c8:	695a      	ldr	r2, [r3, #20]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	69b9      	ldr	r1, [r7, #24]
 800e3ce:	4610      	mov	r0, r2
 800e3d0:	4798      	blx	r3
 800e3d2:	6178      	str	r0, [r7, #20]
                se_assert(nbytes_recv == nbytes_send);
            }

            nbytes_send = n * sizeof(ZZ);
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	61bb      	str	r3, [r7, #24]
            nbytes_recv = network_send_function(se_ptrs->c1_ptr, nbytes_send);
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	699a      	ldr	r2, [r3, #24]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	69b9      	ldr	r1, [r7, #24]
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	4798      	blx	r3
 800e3e6:	6178      	str	r0, [r7, #20]
            se_assert(nbytes_recv == nbytes_send);
        }

        if ((i + 1) < parms->nprimes)
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ea:	1c5a      	adds	r2, r3, #1
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d211      	bcs.n	800e418 <se_encrypt_seeded+0x1f8>
        {
            if (parms->is_asymmetric)
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d006      	beq.n	800e40c <se_encrypt_seeded+0x1ec>
                ckks_next_prime_asym(parms, se_ptrs->ternary);
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	4619      	mov	r1, r3
 800e404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e406:	f7fa f8f4 	bl	80085f2 <ckks_next_prime_asym>
 800e40a:	e005      	b.n	800e418 <se_encrypt_seeded+0x1f8>
            else
                ckks_next_prime_sym(parms, se_ptrs->ternary);
 800e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	4619      	mov	r1, r3
 800e412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e414:	f7fb f97e 	bl	8009714 <ckks_next_prime_sym>
   for (size_t i = 0; i < part1; i++) {
 800e418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41a:	3301      	adds	r3, #1
 800e41c:	633b      	str	r3, [r7, #48]	; 0x30
 800e41e:	4b07      	ldr	r3, [pc, #28]	; (800e43c <se_encrypt_seeded+0x21c>)
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	461a      	mov	r2, r3
 800e424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e426:	4293      	cmp	r3, r2
 800e428:	d380      	bcc.n	800e32c <se_encrypt_seeded+0x10c>
        }
    }
    return true;
 800e42a:	2301      	movs	r3, #1
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	373c      	adds	r7, #60	; 0x3c
 800e430:	46bd      	mov	sp, r7
 800e432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e434:	200021e8 	.word	0x200021e8
 800e438:	200021a0 	.word	0x200021a0
 800e43c:	200020fc 	.word	0x200020fc

0800e440 <se_encrypt>:

bool se_encrypt(SEND_FNCT_PTR network_send_function, void *v, size_t vlen_bytes, bool print,
                SE_PARMS *se_parms)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b088      	sub	sp, #32
 800e444:	af04      	add	r7, sp, #16
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
 800e44c:	70fb      	strb	r3, [r7, #3]
    return se_encrypt_seeded(NULL, NULL, network_send_function, v, vlen_bytes, print, se_parms);
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	9302      	str	r3, [sp, #8]
 800e452:	78fb      	ldrb	r3, [r7, #3]
 800e454:	9301      	str	r3, [sp, #4]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	2100      	movs	r1, #0
 800e460:	2000      	movs	r0, #0
 800e462:	f7ff fedd 	bl	800e220 <se_encrypt_seeded>
 800e466:	4603      	mov	r3, r0
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <calloc>:
 800e470:	4b02      	ldr	r3, [pc, #8]	; (800e47c <calloc+0xc>)
 800e472:	460a      	mov	r2, r1
 800e474:	4601      	mov	r1, r0
 800e476:	6818      	ldr	r0, [r3, #0]
 800e478:	f000 b856 	b.w	800e528 <_calloc_r>
 800e47c:	20000078 	.word	0x20000078

0800e480 <__errno>:
 800e480:	4b01      	ldr	r3, [pc, #4]	; (800e488 <__errno+0x8>)
 800e482:	6818      	ldr	r0, [r3, #0]
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	20000078 	.word	0x20000078

0800e48c <exit>:
 800e48c:	b508      	push	{r3, lr}
 800e48e:	4b07      	ldr	r3, [pc, #28]	; (800e4ac <exit+0x20>)
 800e490:	4604      	mov	r4, r0
 800e492:	b113      	cbz	r3, 800e49a <exit+0xe>
 800e494:	2100      	movs	r1, #0
 800e496:	f3af 8000 	nop.w
 800e49a:	4b05      	ldr	r3, [pc, #20]	; (800e4b0 <exit+0x24>)
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e4a0:	b103      	cbz	r3, 800e4a4 <exit+0x18>
 800e4a2:	4798      	blx	r3
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f7f3 fcdd 	bl	8001e64 <_exit>
 800e4aa:	bf00      	nop
 800e4ac:	00000000 	.word	0x00000000
 800e4b0:	080c4890 	.word	0x080c4890

0800e4b4 <__libc_init_array>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	4d0d      	ldr	r5, [pc, #52]	; (800e4ec <__libc_init_array+0x38>)
 800e4b8:	4c0d      	ldr	r4, [pc, #52]	; (800e4f0 <__libc_init_array+0x3c>)
 800e4ba:	1b64      	subs	r4, r4, r5
 800e4bc:	10a4      	asrs	r4, r4, #2
 800e4be:	2600      	movs	r6, #0
 800e4c0:	42a6      	cmp	r6, r4
 800e4c2:	d109      	bne.n	800e4d8 <__libc_init_array+0x24>
 800e4c4:	4d0b      	ldr	r5, [pc, #44]	; (800e4f4 <__libc_init_array+0x40>)
 800e4c6:	4c0c      	ldr	r4, [pc, #48]	; (800e4f8 <__libc_init_array+0x44>)
 800e4c8:	f001 faba 	bl	800fa40 <_init>
 800e4cc:	1b64      	subs	r4, r4, r5
 800e4ce:	10a4      	asrs	r4, r4, #2
 800e4d0:	2600      	movs	r6, #0
 800e4d2:	42a6      	cmp	r6, r4
 800e4d4:	d105      	bne.n	800e4e2 <__libc_init_array+0x2e>
 800e4d6:	bd70      	pop	{r4, r5, r6, pc}
 800e4d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4dc:	4798      	blx	r3
 800e4de:	3601      	adds	r6, #1
 800e4e0:	e7ee      	b.n	800e4c0 <__libc_init_array+0xc>
 800e4e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4e6:	4798      	blx	r3
 800e4e8:	3601      	adds	r6, #1
 800e4ea:	e7f2      	b.n	800e4d2 <__libc_init_array+0x1e>
 800e4ec:	080c4930 	.word	0x080c4930
 800e4f0:	080c4930 	.word	0x080c4930
 800e4f4:	080c4930 	.word	0x080c4930
 800e4f8:	080c4934 	.word	0x080c4934

0800e4fc <memcpy>:
 800e4fc:	440a      	add	r2, r1
 800e4fe:	4291      	cmp	r1, r2
 800e500:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e504:	d100      	bne.n	800e508 <memcpy+0xc>
 800e506:	4770      	bx	lr
 800e508:	b510      	push	{r4, lr}
 800e50a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e50e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e512:	4291      	cmp	r1, r2
 800e514:	d1f9      	bne.n	800e50a <memcpy+0xe>
 800e516:	bd10      	pop	{r4, pc}

0800e518 <memset>:
 800e518:	4402      	add	r2, r0
 800e51a:	4603      	mov	r3, r0
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d100      	bne.n	800e522 <memset+0xa>
 800e520:	4770      	bx	lr
 800e522:	f803 1b01 	strb.w	r1, [r3], #1
 800e526:	e7f9      	b.n	800e51c <memset+0x4>

0800e528 <_calloc_r>:
 800e528:	b513      	push	{r0, r1, r4, lr}
 800e52a:	434a      	muls	r2, r1
 800e52c:	4611      	mov	r1, r2
 800e52e:	9201      	str	r2, [sp, #4]
 800e530:	f000 f85a 	bl	800e5e8 <_malloc_r>
 800e534:	4604      	mov	r4, r0
 800e536:	b118      	cbz	r0, 800e540 <_calloc_r+0x18>
 800e538:	9a01      	ldr	r2, [sp, #4]
 800e53a:	2100      	movs	r1, #0
 800e53c:	f7ff ffec 	bl	800e518 <memset>
 800e540:	4620      	mov	r0, r4
 800e542:	b002      	add	sp, #8
 800e544:	bd10      	pop	{r4, pc}
	...

0800e548 <_free_r>:
 800e548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e54a:	2900      	cmp	r1, #0
 800e54c:	d048      	beq.n	800e5e0 <_free_r+0x98>
 800e54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e552:	9001      	str	r0, [sp, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f1a1 0404 	sub.w	r4, r1, #4
 800e55a:	bfb8      	it	lt
 800e55c:	18e4      	addlt	r4, r4, r3
 800e55e:	f000 fc2f 	bl	800edc0 <__malloc_lock>
 800e562:	4a20      	ldr	r2, [pc, #128]	; (800e5e4 <_free_r+0x9c>)
 800e564:	9801      	ldr	r0, [sp, #4]
 800e566:	6813      	ldr	r3, [r2, #0]
 800e568:	4615      	mov	r5, r2
 800e56a:	b933      	cbnz	r3, 800e57a <_free_r+0x32>
 800e56c:	6063      	str	r3, [r4, #4]
 800e56e:	6014      	str	r4, [r2, #0]
 800e570:	b003      	add	sp, #12
 800e572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e576:	f000 bc29 	b.w	800edcc <__malloc_unlock>
 800e57a:	42a3      	cmp	r3, r4
 800e57c:	d90b      	bls.n	800e596 <_free_r+0x4e>
 800e57e:	6821      	ldr	r1, [r4, #0]
 800e580:	1862      	adds	r2, r4, r1
 800e582:	4293      	cmp	r3, r2
 800e584:	bf04      	itt	eq
 800e586:	681a      	ldreq	r2, [r3, #0]
 800e588:	685b      	ldreq	r3, [r3, #4]
 800e58a:	6063      	str	r3, [r4, #4]
 800e58c:	bf04      	itt	eq
 800e58e:	1852      	addeq	r2, r2, r1
 800e590:	6022      	streq	r2, [r4, #0]
 800e592:	602c      	str	r4, [r5, #0]
 800e594:	e7ec      	b.n	800e570 <_free_r+0x28>
 800e596:	461a      	mov	r2, r3
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	b10b      	cbz	r3, 800e5a0 <_free_r+0x58>
 800e59c:	42a3      	cmp	r3, r4
 800e59e:	d9fa      	bls.n	800e596 <_free_r+0x4e>
 800e5a0:	6811      	ldr	r1, [r2, #0]
 800e5a2:	1855      	adds	r5, r2, r1
 800e5a4:	42a5      	cmp	r5, r4
 800e5a6:	d10b      	bne.n	800e5c0 <_free_r+0x78>
 800e5a8:	6824      	ldr	r4, [r4, #0]
 800e5aa:	4421      	add	r1, r4
 800e5ac:	1854      	adds	r4, r2, r1
 800e5ae:	42a3      	cmp	r3, r4
 800e5b0:	6011      	str	r1, [r2, #0]
 800e5b2:	d1dd      	bne.n	800e570 <_free_r+0x28>
 800e5b4:	681c      	ldr	r4, [r3, #0]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	6053      	str	r3, [r2, #4]
 800e5ba:	4421      	add	r1, r4
 800e5bc:	6011      	str	r1, [r2, #0]
 800e5be:	e7d7      	b.n	800e570 <_free_r+0x28>
 800e5c0:	d902      	bls.n	800e5c8 <_free_r+0x80>
 800e5c2:	230c      	movs	r3, #12
 800e5c4:	6003      	str	r3, [r0, #0]
 800e5c6:	e7d3      	b.n	800e570 <_free_r+0x28>
 800e5c8:	6825      	ldr	r5, [r4, #0]
 800e5ca:	1961      	adds	r1, r4, r5
 800e5cc:	428b      	cmp	r3, r1
 800e5ce:	bf04      	itt	eq
 800e5d0:	6819      	ldreq	r1, [r3, #0]
 800e5d2:	685b      	ldreq	r3, [r3, #4]
 800e5d4:	6063      	str	r3, [r4, #4]
 800e5d6:	bf04      	itt	eq
 800e5d8:	1949      	addeq	r1, r1, r5
 800e5da:	6021      	streq	r1, [r4, #0]
 800e5dc:	6054      	str	r4, [r2, #4]
 800e5de:	e7c7      	b.n	800e570 <_free_r+0x28>
 800e5e0:	b003      	add	sp, #12
 800e5e2:	bd30      	pop	{r4, r5, pc}
 800e5e4:	20002230 	.word	0x20002230

0800e5e8 <_malloc_r>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	1ccd      	adds	r5, r1, #3
 800e5ec:	f025 0503 	bic.w	r5, r5, #3
 800e5f0:	3508      	adds	r5, #8
 800e5f2:	2d0c      	cmp	r5, #12
 800e5f4:	bf38      	it	cc
 800e5f6:	250c      	movcc	r5, #12
 800e5f8:	2d00      	cmp	r5, #0
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	db01      	blt.n	800e602 <_malloc_r+0x1a>
 800e5fe:	42a9      	cmp	r1, r5
 800e600:	d903      	bls.n	800e60a <_malloc_r+0x22>
 800e602:	230c      	movs	r3, #12
 800e604:	6033      	str	r3, [r6, #0]
 800e606:	2000      	movs	r0, #0
 800e608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e60a:	f000 fbd9 	bl	800edc0 <__malloc_lock>
 800e60e:	4921      	ldr	r1, [pc, #132]	; (800e694 <_malloc_r+0xac>)
 800e610:	680a      	ldr	r2, [r1, #0]
 800e612:	4614      	mov	r4, r2
 800e614:	b99c      	cbnz	r4, 800e63e <_malloc_r+0x56>
 800e616:	4f20      	ldr	r7, [pc, #128]	; (800e698 <_malloc_r+0xb0>)
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	b923      	cbnz	r3, 800e626 <_malloc_r+0x3e>
 800e61c:	4621      	mov	r1, r4
 800e61e:	4630      	mov	r0, r6
 800e620:	f000 f8e0 	bl	800e7e4 <_sbrk_r>
 800e624:	6038      	str	r0, [r7, #0]
 800e626:	4629      	mov	r1, r5
 800e628:	4630      	mov	r0, r6
 800e62a:	f000 f8db 	bl	800e7e4 <_sbrk_r>
 800e62e:	1c43      	adds	r3, r0, #1
 800e630:	d123      	bne.n	800e67a <_malloc_r+0x92>
 800e632:	230c      	movs	r3, #12
 800e634:	6033      	str	r3, [r6, #0]
 800e636:	4630      	mov	r0, r6
 800e638:	f000 fbc8 	bl	800edcc <__malloc_unlock>
 800e63c:	e7e3      	b.n	800e606 <_malloc_r+0x1e>
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	1b5b      	subs	r3, r3, r5
 800e642:	d417      	bmi.n	800e674 <_malloc_r+0x8c>
 800e644:	2b0b      	cmp	r3, #11
 800e646:	d903      	bls.n	800e650 <_malloc_r+0x68>
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	441c      	add	r4, r3
 800e64c:	6025      	str	r5, [r4, #0]
 800e64e:	e004      	b.n	800e65a <_malloc_r+0x72>
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	42a2      	cmp	r2, r4
 800e654:	bf0c      	ite	eq
 800e656:	600b      	streq	r3, [r1, #0]
 800e658:	6053      	strne	r3, [r2, #4]
 800e65a:	4630      	mov	r0, r6
 800e65c:	f000 fbb6 	bl	800edcc <__malloc_unlock>
 800e660:	f104 000b 	add.w	r0, r4, #11
 800e664:	1d23      	adds	r3, r4, #4
 800e666:	f020 0007 	bic.w	r0, r0, #7
 800e66a:	1ac2      	subs	r2, r0, r3
 800e66c:	d0cc      	beq.n	800e608 <_malloc_r+0x20>
 800e66e:	1a1b      	subs	r3, r3, r0
 800e670:	50a3      	str	r3, [r4, r2]
 800e672:	e7c9      	b.n	800e608 <_malloc_r+0x20>
 800e674:	4622      	mov	r2, r4
 800e676:	6864      	ldr	r4, [r4, #4]
 800e678:	e7cc      	b.n	800e614 <_malloc_r+0x2c>
 800e67a:	1cc4      	adds	r4, r0, #3
 800e67c:	f024 0403 	bic.w	r4, r4, #3
 800e680:	42a0      	cmp	r0, r4
 800e682:	d0e3      	beq.n	800e64c <_malloc_r+0x64>
 800e684:	1a21      	subs	r1, r4, r0
 800e686:	4630      	mov	r0, r6
 800e688:	f000 f8ac 	bl	800e7e4 <_sbrk_r>
 800e68c:	3001      	adds	r0, #1
 800e68e:	d1dd      	bne.n	800e64c <_malloc_r+0x64>
 800e690:	e7cf      	b.n	800e632 <_malloc_r+0x4a>
 800e692:	bf00      	nop
 800e694:	20002230 	.word	0x20002230
 800e698:	20002234 	.word	0x20002234

0800e69c <iprintf>:
 800e69c:	b40f      	push	{r0, r1, r2, r3}
 800e69e:	4b0a      	ldr	r3, [pc, #40]	; (800e6c8 <iprintf+0x2c>)
 800e6a0:	b513      	push	{r0, r1, r4, lr}
 800e6a2:	681c      	ldr	r4, [r3, #0]
 800e6a4:	b124      	cbz	r4, 800e6b0 <iprintf+0x14>
 800e6a6:	69a3      	ldr	r3, [r4, #24]
 800e6a8:	b913      	cbnz	r3, 800e6b0 <iprintf+0x14>
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 fa84 	bl	800ebb8 <__sinit>
 800e6b0:	ab05      	add	r3, sp, #20
 800e6b2:	9a04      	ldr	r2, [sp, #16]
 800e6b4:	68a1      	ldr	r1, [r4, #8]
 800e6b6:	9301      	str	r3, [sp, #4]
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f000 fbb7 	bl	800ee2c <_vfiprintf_r>
 800e6be:	b002      	add	sp, #8
 800e6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6c4:	b004      	add	sp, #16
 800e6c6:	4770      	bx	lr
 800e6c8:	20000078 	.word	0x20000078

0800e6cc <putchar>:
 800e6cc:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <putchar+0x28>)
 800e6ce:	b513      	push	{r0, r1, r4, lr}
 800e6d0:	681c      	ldr	r4, [r3, #0]
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	b134      	cbz	r4, 800e6e4 <putchar+0x18>
 800e6d6:	69a3      	ldr	r3, [r4, #24]
 800e6d8:	b923      	cbnz	r3, 800e6e4 <putchar+0x18>
 800e6da:	9001      	str	r0, [sp, #4]
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f000 fa6b 	bl	800ebb8 <__sinit>
 800e6e2:	9901      	ldr	r1, [sp, #4]
 800e6e4:	68a2      	ldr	r2, [r4, #8]
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	b002      	add	sp, #8
 800e6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6ee:	f000 be61 	b.w	800f3b4 <_putc_r>
 800e6f2:	bf00      	nop
 800e6f4:	20000078 	.word	0x20000078

0800e6f8 <_puts_r>:
 800e6f8:	b570      	push	{r4, r5, r6, lr}
 800e6fa:	460e      	mov	r6, r1
 800e6fc:	4605      	mov	r5, r0
 800e6fe:	b118      	cbz	r0, 800e708 <_puts_r+0x10>
 800e700:	6983      	ldr	r3, [r0, #24]
 800e702:	b90b      	cbnz	r3, 800e708 <_puts_r+0x10>
 800e704:	f000 fa58 	bl	800ebb8 <__sinit>
 800e708:	69ab      	ldr	r3, [r5, #24]
 800e70a:	68ac      	ldr	r4, [r5, #8]
 800e70c:	b913      	cbnz	r3, 800e714 <_puts_r+0x1c>
 800e70e:	4628      	mov	r0, r5
 800e710:	f000 fa52 	bl	800ebb8 <__sinit>
 800e714:	4b2c      	ldr	r3, [pc, #176]	; (800e7c8 <_puts_r+0xd0>)
 800e716:	429c      	cmp	r4, r3
 800e718:	d120      	bne.n	800e75c <_puts_r+0x64>
 800e71a:	686c      	ldr	r4, [r5, #4]
 800e71c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e71e:	07db      	lsls	r3, r3, #31
 800e720:	d405      	bmi.n	800e72e <_puts_r+0x36>
 800e722:	89a3      	ldrh	r3, [r4, #12]
 800e724:	0598      	lsls	r0, r3, #22
 800e726:	d402      	bmi.n	800e72e <_puts_r+0x36>
 800e728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e72a:	f000 fae3 	bl	800ecf4 <__retarget_lock_acquire_recursive>
 800e72e:	89a3      	ldrh	r3, [r4, #12]
 800e730:	0719      	lsls	r1, r3, #28
 800e732:	d51d      	bpl.n	800e770 <_puts_r+0x78>
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	b1db      	cbz	r3, 800e770 <_puts_r+0x78>
 800e738:	3e01      	subs	r6, #1
 800e73a:	68a3      	ldr	r3, [r4, #8]
 800e73c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e740:	3b01      	subs	r3, #1
 800e742:	60a3      	str	r3, [r4, #8]
 800e744:	bb39      	cbnz	r1, 800e796 <_puts_r+0x9e>
 800e746:	2b00      	cmp	r3, #0
 800e748:	da38      	bge.n	800e7bc <_puts_r+0xc4>
 800e74a:	4622      	mov	r2, r4
 800e74c:	210a      	movs	r1, #10
 800e74e:	4628      	mov	r0, r5
 800e750:	f000 f858 	bl	800e804 <__swbuf_r>
 800e754:	3001      	adds	r0, #1
 800e756:	d011      	beq.n	800e77c <_puts_r+0x84>
 800e758:	250a      	movs	r5, #10
 800e75a:	e011      	b.n	800e780 <_puts_r+0x88>
 800e75c:	4b1b      	ldr	r3, [pc, #108]	; (800e7cc <_puts_r+0xd4>)
 800e75e:	429c      	cmp	r4, r3
 800e760:	d101      	bne.n	800e766 <_puts_r+0x6e>
 800e762:	68ac      	ldr	r4, [r5, #8]
 800e764:	e7da      	b.n	800e71c <_puts_r+0x24>
 800e766:	4b1a      	ldr	r3, [pc, #104]	; (800e7d0 <_puts_r+0xd8>)
 800e768:	429c      	cmp	r4, r3
 800e76a:	bf08      	it	eq
 800e76c:	68ec      	ldreq	r4, [r5, #12]
 800e76e:	e7d5      	b.n	800e71c <_puts_r+0x24>
 800e770:	4621      	mov	r1, r4
 800e772:	4628      	mov	r0, r5
 800e774:	f000 f898 	bl	800e8a8 <__swsetup_r>
 800e778:	2800      	cmp	r0, #0
 800e77a:	d0dd      	beq.n	800e738 <_puts_r+0x40>
 800e77c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e782:	07da      	lsls	r2, r3, #31
 800e784:	d405      	bmi.n	800e792 <_puts_r+0x9a>
 800e786:	89a3      	ldrh	r3, [r4, #12]
 800e788:	059b      	lsls	r3, r3, #22
 800e78a:	d402      	bmi.n	800e792 <_puts_r+0x9a>
 800e78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e78e:	f000 fab2 	bl	800ecf6 <__retarget_lock_release_recursive>
 800e792:	4628      	mov	r0, r5
 800e794:	bd70      	pop	{r4, r5, r6, pc}
 800e796:	2b00      	cmp	r3, #0
 800e798:	da04      	bge.n	800e7a4 <_puts_r+0xac>
 800e79a:	69a2      	ldr	r2, [r4, #24]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	dc06      	bgt.n	800e7ae <_puts_r+0xb6>
 800e7a0:	290a      	cmp	r1, #10
 800e7a2:	d004      	beq.n	800e7ae <_puts_r+0xb6>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	6022      	str	r2, [r4, #0]
 800e7aa:	7019      	strb	r1, [r3, #0]
 800e7ac:	e7c5      	b.n	800e73a <_puts_r+0x42>
 800e7ae:	4622      	mov	r2, r4
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f000 f827 	bl	800e804 <__swbuf_r>
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	d1bf      	bne.n	800e73a <_puts_r+0x42>
 800e7ba:	e7df      	b.n	800e77c <_puts_r+0x84>
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	250a      	movs	r5, #10
 800e7c0:	1c5a      	adds	r2, r3, #1
 800e7c2:	6022      	str	r2, [r4, #0]
 800e7c4:	701d      	strb	r5, [r3, #0]
 800e7c6:	e7db      	b.n	800e780 <_puts_r+0x88>
 800e7c8:	080c48b4 	.word	0x080c48b4
 800e7cc:	080c48d4 	.word	0x080c48d4
 800e7d0:	080c4894 	.word	0x080c4894

0800e7d4 <puts>:
 800e7d4:	4b02      	ldr	r3, [pc, #8]	; (800e7e0 <puts+0xc>)
 800e7d6:	4601      	mov	r1, r0
 800e7d8:	6818      	ldr	r0, [r3, #0]
 800e7da:	f7ff bf8d 	b.w	800e6f8 <_puts_r>
 800e7de:	bf00      	nop
 800e7e0:	20000078 	.word	0x20000078

0800e7e4 <_sbrk_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4d06      	ldr	r5, [pc, #24]	; (800e800 <_sbrk_r+0x1c>)
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	4608      	mov	r0, r1
 800e7ee:	602b      	str	r3, [r5, #0]
 800e7f0:	f7f3 fb94 	bl	8001f1c <_sbrk>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	d102      	bne.n	800e7fe <_sbrk_r+0x1a>
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	b103      	cbz	r3, 800e7fe <_sbrk_r+0x1a>
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
 800e800:	200024e4 	.word	0x200024e4

0800e804 <__swbuf_r>:
 800e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e806:	460e      	mov	r6, r1
 800e808:	4614      	mov	r4, r2
 800e80a:	4605      	mov	r5, r0
 800e80c:	b118      	cbz	r0, 800e816 <__swbuf_r+0x12>
 800e80e:	6983      	ldr	r3, [r0, #24]
 800e810:	b90b      	cbnz	r3, 800e816 <__swbuf_r+0x12>
 800e812:	f000 f9d1 	bl	800ebb8 <__sinit>
 800e816:	4b21      	ldr	r3, [pc, #132]	; (800e89c <__swbuf_r+0x98>)
 800e818:	429c      	cmp	r4, r3
 800e81a:	d12b      	bne.n	800e874 <__swbuf_r+0x70>
 800e81c:	686c      	ldr	r4, [r5, #4]
 800e81e:	69a3      	ldr	r3, [r4, #24]
 800e820:	60a3      	str	r3, [r4, #8]
 800e822:	89a3      	ldrh	r3, [r4, #12]
 800e824:	071a      	lsls	r2, r3, #28
 800e826:	d52f      	bpl.n	800e888 <__swbuf_r+0x84>
 800e828:	6923      	ldr	r3, [r4, #16]
 800e82a:	b36b      	cbz	r3, 800e888 <__swbuf_r+0x84>
 800e82c:	6923      	ldr	r3, [r4, #16]
 800e82e:	6820      	ldr	r0, [r4, #0]
 800e830:	1ac0      	subs	r0, r0, r3
 800e832:	6963      	ldr	r3, [r4, #20]
 800e834:	b2f6      	uxtb	r6, r6
 800e836:	4283      	cmp	r3, r0
 800e838:	4637      	mov	r7, r6
 800e83a:	dc04      	bgt.n	800e846 <__swbuf_r+0x42>
 800e83c:	4621      	mov	r1, r4
 800e83e:	4628      	mov	r0, r5
 800e840:	f000 f926 	bl	800ea90 <_fflush_r>
 800e844:	bb30      	cbnz	r0, 800e894 <__swbuf_r+0x90>
 800e846:	68a3      	ldr	r3, [r4, #8]
 800e848:	3b01      	subs	r3, #1
 800e84a:	60a3      	str	r3, [r4, #8]
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	6022      	str	r2, [r4, #0]
 800e852:	701e      	strb	r6, [r3, #0]
 800e854:	6963      	ldr	r3, [r4, #20]
 800e856:	3001      	adds	r0, #1
 800e858:	4283      	cmp	r3, r0
 800e85a:	d004      	beq.n	800e866 <__swbuf_r+0x62>
 800e85c:	89a3      	ldrh	r3, [r4, #12]
 800e85e:	07db      	lsls	r3, r3, #31
 800e860:	d506      	bpl.n	800e870 <__swbuf_r+0x6c>
 800e862:	2e0a      	cmp	r6, #10
 800e864:	d104      	bne.n	800e870 <__swbuf_r+0x6c>
 800e866:	4621      	mov	r1, r4
 800e868:	4628      	mov	r0, r5
 800e86a:	f000 f911 	bl	800ea90 <_fflush_r>
 800e86e:	b988      	cbnz	r0, 800e894 <__swbuf_r+0x90>
 800e870:	4638      	mov	r0, r7
 800e872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e874:	4b0a      	ldr	r3, [pc, #40]	; (800e8a0 <__swbuf_r+0x9c>)
 800e876:	429c      	cmp	r4, r3
 800e878:	d101      	bne.n	800e87e <__swbuf_r+0x7a>
 800e87a:	68ac      	ldr	r4, [r5, #8]
 800e87c:	e7cf      	b.n	800e81e <__swbuf_r+0x1a>
 800e87e:	4b09      	ldr	r3, [pc, #36]	; (800e8a4 <__swbuf_r+0xa0>)
 800e880:	429c      	cmp	r4, r3
 800e882:	bf08      	it	eq
 800e884:	68ec      	ldreq	r4, [r5, #12]
 800e886:	e7ca      	b.n	800e81e <__swbuf_r+0x1a>
 800e888:	4621      	mov	r1, r4
 800e88a:	4628      	mov	r0, r5
 800e88c:	f000 f80c 	bl	800e8a8 <__swsetup_r>
 800e890:	2800      	cmp	r0, #0
 800e892:	d0cb      	beq.n	800e82c <__swbuf_r+0x28>
 800e894:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e898:	e7ea      	b.n	800e870 <__swbuf_r+0x6c>
 800e89a:	bf00      	nop
 800e89c:	080c48b4 	.word	0x080c48b4
 800e8a0:	080c48d4 	.word	0x080c48d4
 800e8a4:	080c4894 	.word	0x080c4894

0800e8a8 <__swsetup_r>:
 800e8a8:	4b32      	ldr	r3, [pc, #200]	; (800e974 <__swsetup_r+0xcc>)
 800e8aa:	b570      	push	{r4, r5, r6, lr}
 800e8ac:	681d      	ldr	r5, [r3, #0]
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	460c      	mov	r4, r1
 800e8b2:	b125      	cbz	r5, 800e8be <__swsetup_r+0x16>
 800e8b4:	69ab      	ldr	r3, [r5, #24]
 800e8b6:	b913      	cbnz	r3, 800e8be <__swsetup_r+0x16>
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	f000 f97d 	bl	800ebb8 <__sinit>
 800e8be:	4b2e      	ldr	r3, [pc, #184]	; (800e978 <__swsetup_r+0xd0>)
 800e8c0:	429c      	cmp	r4, r3
 800e8c2:	d10f      	bne.n	800e8e4 <__swsetup_r+0x3c>
 800e8c4:	686c      	ldr	r4, [r5, #4]
 800e8c6:	89a3      	ldrh	r3, [r4, #12]
 800e8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8cc:	0719      	lsls	r1, r3, #28
 800e8ce:	d42c      	bmi.n	800e92a <__swsetup_r+0x82>
 800e8d0:	06dd      	lsls	r5, r3, #27
 800e8d2:	d411      	bmi.n	800e8f8 <__swsetup_r+0x50>
 800e8d4:	2309      	movs	r3, #9
 800e8d6:	6033      	str	r3, [r6, #0]
 800e8d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8dc:	81a3      	strh	r3, [r4, #12]
 800e8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8e2:	e03e      	b.n	800e962 <__swsetup_r+0xba>
 800e8e4:	4b25      	ldr	r3, [pc, #148]	; (800e97c <__swsetup_r+0xd4>)
 800e8e6:	429c      	cmp	r4, r3
 800e8e8:	d101      	bne.n	800e8ee <__swsetup_r+0x46>
 800e8ea:	68ac      	ldr	r4, [r5, #8]
 800e8ec:	e7eb      	b.n	800e8c6 <__swsetup_r+0x1e>
 800e8ee:	4b24      	ldr	r3, [pc, #144]	; (800e980 <__swsetup_r+0xd8>)
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	bf08      	it	eq
 800e8f4:	68ec      	ldreq	r4, [r5, #12]
 800e8f6:	e7e6      	b.n	800e8c6 <__swsetup_r+0x1e>
 800e8f8:	0758      	lsls	r0, r3, #29
 800e8fa:	d512      	bpl.n	800e922 <__swsetup_r+0x7a>
 800e8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8fe:	b141      	cbz	r1, 800e912 <__swsetup_r+0x6a>
 800e900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e904:	4299      	cmp	r1, r3
 800e906:	d002      	beq.n	800e90e <__swsetup_r+0x66>
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff fe1d 	bl	800e548 <_free_r>
 800e90e:	2300      	movs	r3, #0
 800e910:	6363      	str	r3, [r4, #52]	; 0x34
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e918:	81a3      	strh	r3, [r4, #12]
 800e91a:	2300      	movs	r3, #0
 800e91c:	6063      	str	r3, [r4, #4]
 800e91e:	6923      	ldr	r3, [r4, #16]
 800e920:	6023      	str	r3, [r4, #0]
 800e922:	89a3      	ldrh	r3, [r4, #12]
 800e924:	f043 0308 	orr.w	r3, r3, #8
 800e928:	81a3      	strh	r3, [r4, #12]
 800e92a:	6923      	ldr	r3, [r4, #16]
 800e92c:	b94b      	cbnz	r3, 800e942 <__swsetup_r+0x9a>
 800e92e:	89a3      	ldrh	r3, [r4, #12]
 800e930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e938:	d003      	beq.n	800e942 <__swsetup_r+0x9a>
 800e93a:	4621      	mov	r1, r4
 800e93c:	4630      	mov	r0, r6
 800e93e:	f000 f9ff 	bl	800ed40 <__smakebuf_r>
 800e942:	89a0      	ldrh	r0, [r4, #12]
 800e944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e948:	f010 0301 	ands.w	r3, r0, #1
 800e94c:	d00a      	beq.n	800e964 <__swsetup_r+0xbc>
 800e94e:	2300      	movs	r3, #0
 800e950:	60a3      	str	r3, [r4, #8]
 800e952:	6963      	ldr	r3, [r4, #20]
 800e954:	425b      	negs	r3, r3
 800e956:	61a3      	str	r3, [r4, #24]
 800e958:	6923      	ldr	r3, [r4, #16]
 800e95a:	b943      	cbnz	r3, 800e96e <__swsetup_r+0xc6>
 800e95c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e960:	d1ba      	bne.n	800e8d8 <__swsetup_r+0x30>
 800e962:	bd70      	pop	{r4, r5, r6, pc}
 800e964:	0781      	lsls	r1, r0, #30
 800e966:	bf58      	it	pl
 800e968:	6963      	ldrpl	r3, [r4, #20]
 800e96a:	60a3      	str	r3, [r4, #8]
 800e96c:	e7f4      	b.n	800e958 <__swsetup_r+0xb0>
 800e96e:	2000      	movs	r0, #0
 800e970:	e7f7      	b.n	800e962 <__swsetup_r+0xba>
 800e972:	bf00      	nop
 800e974:	20000078 	.word	0x20000078
 800e978:	080c48b4 	.word	0x080c48b4
 800e97c:	080c48d4 	.word	0x080c48d4
 800e980:	080c4894 	.word	0x080c4894

0800e984 <__sflush_r>:
 800e984:	898a      	ldrh	r2, [r1, #12]
 800e986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e98a:	4605      	mov	r5, r0
 800e98c:	0710      	lsls	r0, r2, #28
 800e98e:	460c      	mov	r4, r1
 800e990:	d458      	bmi.n	800ea44 <__sflush_r+0xc0>
 800e992:	684b      	ldr	r3, [r1, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	dc05      	bgt.n	800e9a4 <__sflush_r+0x20>
 800e998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	dc02      	bgt.n	800e9a4 <__sflush_r+0x20>
 800e99e:	2000      	movs	r0, #0
 800e9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9a6:	2e00      	cmp	r6, #0
 800e9a8:	d0f9      	beq.n	800e99e <__sflush_r+0x1a>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9b0:	682f      	ldr	r7, [r5, #0]
 800e9b2:	602b      	str	r3, [r5, #0]
 800e9b4:	d032      	beq.n	800ea1c <__sflush_r+0x98>
 800e9b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9b8:	89a3      	ldrh	r3, [r4, #12]
 800e9ba:	075a      	lsls	r2, r3, #29
 800e9bc:	d505      	bpl.n	800e9ca <__sflush_r+0x46>
 800e9be:	6863      	ldr	r3, [r4, #4]
 800e9c0:	1ac0      	subs	r0, r0, r3
 800e9c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9c4:	b10b      	cbz	r3, 800e9ca <__sflush_r+0x46>
 800e9c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9c8:	1ac0      	subs	r0, r0, r3
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9d0:	6a21      	ldr	r1, [r4, #32]
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	47b0      	blx	r6
 800e9d6:	1c43      	adds	r3, r0, #1
 800e9d8:	89a3      	ldrh	r3, [r4, #12]
 800e9da:	d106      	bne.n	800e9ea <__sflush_r+0x66>
 800e9dc:	6829      	ldr	r1, [r5, #0]
 800e9de:	291d      	cmp	r1, #29
 800e9e0:	d82c      	bhi.n	800ea3c <__sflush_r+0xb8>
 800e9e2:	4a2a      	ldr	r2, [pc, #168]	; (800ea8c <__sflush_r+0x108>)
 800e9e4:	40ca      	lsrs	r2, r1
 800e9e6:	07d6      	lsls	r6, r2, #31
 800e9e8:	d528      	bpl.n	800ea3c <__sflush_r+0xb8>
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	6062      	str	r2, [r4, #4]
 800e9ee:	04d9      	lsls	r1, r3, #19
 800e9f0:	6922      	ldr	r2, [r4, #16]
 800e9f2:	6022      	str	r2, [r4, #0]
 800e9f4:	d504      	bpl.n	800ea00 <__sflush_r+0x7c>
 800e9f6:	1c42      	adds	r2, r0, #1
 800e9f8:	d101      	bne.n	800e9fe <__sflush_r+0x7a>
 800e9fa:	682b      	ldr	r3, [r5, #0]
 800e9fc:	b903      	cbnz	r3, 800ea00 <__sflush_r+0x7c>
 800e9fe:	6560      	str	r0, [r4, #84]	; 0x54
 800ea00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea02:	602f      	str	r7, [r5, #0]
 800ea04:	2900      	cmp	r1, #0
 800ea06:	d0ca      	beq.n	800e99e <__sflush_r+0x1a>
 800ea08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea0c:	4299      	cmp	r1, r3
 800ea0e:	d002      	beq.n	800ea16 <__sflush_r+0x92>
 800ea10:	4628      	mov	r0, r5
 800ea12:	f7ff fd99 	bl	800e548 <_free_r>
 800ea16:	2000      	movs	r0, #0
 800ea18:	6360      	str	r0, [r4, #52]	; 0x34
 800ea1a:	e7c1      	b.n	800e9a0 <__sflush_r+0x1c>
 800ea1c:	6a21      	ldr	r1, [r4, #32]
 800ea1e:	2301      	movs	r3, #1
 800ea20:	4628      	mov	r0, r5
 800ea22:	47b0      	blx	r6
 800ea24:	1c41      	adds	r1, r0, #1
 800ea26:	d1c7      	bne.n	800e9b8 <__sflush_r+0x34>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d0c4      	beq.n	800e9b8 <__sflush_r+0x34>
 800ea2e:	2b1d      	cmp	r3, #29
 800ea30:	d001      	beq.n	800ea36 <__sflush_r+0xb2>
 800ea32:	2b16      	cmp	r3, #22
 800ea34:	d101      	bne.n	800ea3a <__sflush_r+0xb6>
 800ea36:	602f      	str	r7, [r5, #0]
 800ea38:	e7b1      	b.n	800e99e <__sflush_r+0x1a>
 800ea3a:	89a3      	ldrh	r3, [r4, #12]
 800ea3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea40:	81a3      	strh	r3, [r4, #12]
 800ea42:	e7ad      	b.n	800e9a0 <__sflush_r+0x1c>
 800ea44:	690f      	ldr	r7, [r1, #16]
 800ea46:	2f00      	cmp	r7, #0
 800ea48:	d0a9      	beq.n	800e99e <__sflush_r+0x1a>
 800ea4a:	0793      	lsls	r3, r2, #30
 800ea4c:	680e      	ldr	r6, [r1, #0]
 800ea4e:	bf08      	it	eq
 800ea50:	694b      	ldreq	r3, [r1, #20]
 800ea52:	600f      	str	r7, [r1, #0]
 800ea54:	bf18      	it	ne
 800ea56:	2300      	movne	r3, #0
 800ea58:	eba6 0807 	sub.w	r8, r6, r7
 800ea5c:	608b      	str	r3, [r1, #8]
 800ea5e:	f1b8 0f00 	cmp.w	r8, #0
 800ea62:	dd9c      	ble.n	800e99e <__sflush_r+0x1a>
 800ea64:	6a21      	ldr	r1, [r4, #32]
 800ea66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea68:	4643      	mov	r3, r8
 800ea6a:	463a      	mov	r2, r7
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	47b0      	blx	r6
 800ea70:	2800      	cmp	r0, #0
 800ea72:	dc06      	bgt.n	800ea82 <__sflush_r+0xfe>
 800ea74:	89a3      	ldrh	r3, [r4, #12]
 800ea76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea7a:	81a3      	strh	r3, [r4, #12]
 800ea7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea80:	e78e      	b.n	800e9a0 <__sflush_r+0x1c>
 800ea82:	4407      	add	r7, r0
 800ea84:	eba8 0800 	sub.w	r8, r8, r0
 800ea88:	e7e9      	b.n	800ea5e <__sflush_r+0xda>
 800ea8a:	bf00      	nop
 800ea8c:	20400001 	.word	0x20400001

0800ea90 <_fflush_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	690b      	ldr	r3, [r1, #16]
 800ea94:	4605      	mov	r5, r0
 800ea96:	460c      	mov	r4, r1
 800ea98:	b913      	cbnz	r3, 800eaa0 <_fflush_r+0x10>
 800ea9a:	2500      	movs	r5, #0
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	bd38      	pop	{r3, r4, r5, pc}
 800eaa0:	b118      	cbz	r0, 800eaaa <_fflush_r+0x1a>
 800eaa2:	6983      	ldr	r3, [r0, #24]
 800eaa4:	b90b      	cbnz	r3, 800eaaa <_fflush_r+0x1a>
 800eaa6:	f000 f887 	bl	800ebb8 <__sinit>
 800eaaa:	4b14      	ldr	r3, [pc, #80]	; (800eafc <_fflush_r+0x6c>)
 800eaac:	429c      	cmp	r4, r3
 800eaae:	d11b      	bne.n	800eae8 <_fflush_r+0x58>
 800eab0:	686c      	ldr	r4, [r5, #4]
 800eab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d0ef      	beq.n	800ea9a <_fflush_r+0xa>
 800eaba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eabc:	07d0      	lsls	r0, r2, #31
 800eabe:	d404      	bmi.n	800eaca <_fflush_r+0x3a>
 800eac0:	0599      	lsls	r1, r3, #22
 800eac2:	d402      	bmi.n	800eaca <_fflush_r+0x3a>
 800eac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eac6:	f000 f915 	bl	800ecf4 <__retarget_lock_acquire_recursive>
 800eaca:	4628      	mov	r0, r5
 800eacc:	4621      	mov	r1, r4
 800eace:	f7ff ff59 	bl	800e984 <__sflush_r>
 800ead2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ead4:	07da      	lsls	r2, r3, #31
 800ead6:	4605      	mov	r5, r0
 800ead8:	d4e0      	bmi.n	800ea9c <_fflush_r+0xc>
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	059b      	lsls	r3, r3, #22
 800eade:	d4dd      	bmi.n	800ea9c <_fflush_r+0xc>
 800eae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eae2:	f000 f908 	bl	800ecf6 <__retarget_lock_release_recursive>
 800eae6:	e7d9      	b.n	800ea9c <_fflush_r+0xc>
 800eae8:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <_fflush_r+0x70>)
 800eaea:	429c      	cmp	r4, r3
 800eaec:	d101      	bne.n	800eaf2 <_fflush_r+0x62>
 800eaee:	68ac      	ldr	r4, [r5, #8]
 800eaf0:	e7df      	b.n	800eab2 <_fflush_r+0x22>
 800eaf2:	4b04      	ldr	r3, [pc, #16]	; (800eb04 <_fflush_r+0x74>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	bf08      	it	eq
 800eaf8:	68ec      	ldreq	r4, [r5, #12]
 800eafa:	e7da      	b.n	800eab2 <_fflush_r+0x22>
 800eafc:	080c48b4 	.word	0x080c48b4
 800eb00:	080c48d4 	.word	0x080c48d4
 800eb04:	080c4894 	.word	0x080c4894

0800eb08 <std>:
 800eb08:	2300      	movs	r3, #0
 800eb0a:	b510      	push	{r4, lr}
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	e9c0 3300 	strd	r3, r3, [r0]
 800eb12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb16:	6083      	str	r3, [r0, #8]
 800eb18:	8181      	strh	r1, [r0, #12]
 800eb1a:	6643      	str	r3, [r0, #100]	; 0x64
 800eb1c:	81c2      	strh	r2, [r0, #14]
 800eb1e:	6183      	str	r3, [r0, #24]
 800eb20:	4619      	mov	r1, r3
 800eb22:	2208      	movs	r2, #8
 800eb24:	305c      	adds	r0, #92	; 0x5c
 800eb26:	f7ff fcf7 	bl	800e518 <memset>
 800eb2a:	4b05      	ldr	r3, [pc, #20]	; (800eb40 <std+0x38>)
 800eb2c:	6263      	str	r3, [r4, #36]	; 0x24
 800eb2e:	4b05      	ldr	r3, [pc, #20]	; (800eb44 <std+0x3c>)
 800eb30:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb32:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <std+0x40>)
 800eb34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb36:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <std+0x44>)
 800eb38:	6224      	str	r4, [r4, #32]
 800eb3a:	6323      	str	r3, [r4, #48]	; 0x30
 800eb3c:	bd10      	pop	{r4, pc}
 800eb3e:	bf00      	nop
 800eb40:	0800f445 	.word	0x0800f445
 800eb44:	0800f467 	.word	0x0800f467
 800eb48:	0800f49f 	.word	0x0800f49f
 800eb4c:	0800f4c3 	.word	0x0800f4c3

0800eb50 <_cleanup_r>:
 800eb50:	4901      	ldr	r1, [pc, #4]	; (800eb58 <_cleanup_r+0x8>)
 800eb52:	f000 b8af 	b.w	800ecb4 <_fwalk_reent>
 800eb56:	bf00      	nop
 800eb58:	0800ea91 	.word	0x0800ea91

0800eb5c <__sfmoreglue>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	1e4a      	subs	r2, r1, #1
 800eb60:	2568      	movs	r5, #104	; 0x68
 800eb62:	4355      	muls	r5, r2
 800eb64:	460e      	mov	r6, r1
 800eb66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb6a:	f7ff fd3d 	bl	800e5e8 <_malloc_r>
 800eb6e:	4604      	mov	r4, r0
 800eb70:	b140      	cbz	r0, 800eb84 <__sfmoreglue+0x28>
 800eb72:	2100      	movs	r1, #0
 800eb74:	e9c0 1600 	strd	r1, r6, [r0]
 800eb78:	300c      	adds	r0, #12
 800eb7a:	60a0      	str	r0, [r4, #8]
 800eb7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb80:	f7ff fcca 	bl	800e518 <memset>
 800eb84:	4620      	mov	r0, r4
 800eb86:	bd70      	pop	{r4, r5, r6, pc}

0800eb88 <__sfp_lock_acquire>:
 800eb88:	4801      	ldr	r0, [pc, #4]	; (800eb90 <__sfp_lock_acquire+0x8>)
 800eb8a:	f000 b8b3 	b.w	800ecf4 <__retarget_lock_acquire_recursive>
 800eb8e:	bf00      	nop
 800eb90:	200024e1 	.word	0x200024e1

0800eb94 <__sfp_lock_release>:
 800eb94:	4801      	ldr	r0, [pc, #4]	; (800eb9c <__sfp_lock_release+0x8>)
 800eb96:	f000 b8ae 	b.w	800ecf6 <__retarget_lock_release_recursive>
 800eb9a:	bf00      	nop
 800eb9c:	200024e1 	.word	0x200024e1

0800eba0 <__sinit_lock_acquire>:
 800eba0:	4801      	ldr	r0, [pc, #4]	; (800eba8 <__sinit_lock_acquire+0x8>)
 800eba2:	f000 b8a7 	b.w	800ecf4 <__retarget_lock_acquire_recursive>
 800eba6:	bf00      	nop
 800eba8:	200024dc 	.word	0x200024dc

0800ebac <__sinit_lock_release>:
 800ebac:	4801      	ldr	r0, [pc, #4]	; (800ebb4 <__sinit_lock_release+0x8>)
 800ebae:	f000 b8a2 	b.w	800ecf6 <__retarget_lock_release_recursive>
 800ebb2:	bf00      	nop
 800ebb4:	200024dc 	.word	0x200024dc

0800ebb8 <__sinit>:
 800ebb8:	b510      	push	{r4, lr}
 800ebba:	4604      	mov	r4, r0
 800ebbc:	f7ff fff0 	bl	800eba0 <__sinit_lock_acquire>
 800ebc0:	69a3      	ldr	r3, [r4, #24]
 800ebc2:	b11b      	cbz	r3, 800ebcc <__sinit+0x14>
 800ebc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc8:	f7ff bff0 	b.w	800ebac <__sinit_lock_release>
 800ebcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebd0:	6523      	str	r3, [r4, #80]	; 0x50
 800ebd2:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <__sinit+0x68>)
 800ebd4:	4a13      	ldr	r2, [pc, #76]	; (800ec24 <__sinit+0x6c>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebda:	42a3      	cmp	r3, r4
 800ebdc:	bf04      	itt	eq
 800ebde:	2301      	moveq	r3, #1
 800ebe0:	61a3      	streq	r3, [r4, #24]
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 f820 	bl	800ec28 <__sfp>
 800ebe8:	6060      	str	r0, [r4, #4]
 800ebea:	4620      	mov	r0, r4
 800ebec:	f000 f81c 	bl	800ec28 <__sfp>
 800ebf0:	60a0      	str	r0, [r4, #8]
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 f818 	bl	800ec28 <__sfp>
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	60e0      	str	r0, [r4, #12]
 800ebfc:	2104      	movs	r1, #4
 800ebfe:	6860      	ldr	r0, [r4, #4]
 800ec00:	f7ff ff82 	bl	800eb08 <std>
 800ec04:	68a0      	ldr	r0, [r4, #8]
 800ec06:	2201      	movs	r2, #1
 800ec08:	2109      	movs	r1, #9
 800ec0a:	f7ff ff7d 	bl	800eb08 <std>
 800ec0e:	68e0      	ldr	r0, [r4, #12]
 800ec10:	2202      	movs	r2, #2
 800ec12:	2112      	movs	r1, #18
 800ec14:	f7ff ff78 	bl	800eb08 <std>
 800ec18:	2301      	movs	r3, #1
 800ec1a:	61a3      	str	r3, [r4, #24]
 800ec1c:	e7d2      	b.n	800ebc4 <__sinit+0xc>
 800ec1e:	bf00      	nop
 800ec20:	080c4890 	.word	0x080c4890
 800ec24:	0800eb51 	.word	0x0800eb51

0800ec28 <__sfp>:
 800ec28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2a:	4607      	mov	r7, r0
 800ec2c:	f7ff ffac 	bl	800eb88 <__sfp_lock_acquire>
 800ec30:	4b1e      	ldr	r3, [pc, #120]	; (800ecac <__sfp+0x84>)
 800ec32:	681e      	ldr	r6, [r3, #0]
 800ec34:	69b3      	ldr	r3, [r6, #24]
 800ec36:	b913      	cbnz	r3, 800ec3e <__sfp+0x16>
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f7ff ffbd 	bl	800ebb8 <__sinit>
 800ec3e:	3648      	adds	r6, #72	; 0x48
 800ec40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec44:	3b01      	subs	r3, #1
 800ec46:	d503      	bpl.n	800ec50 <__sfp+0x28>
 800ec48:	6833      	ldr	r3, [r6, #0]
 800ec4a:	b30b      	cbz	r3, 800ec90 <__sfp+0x68>
 800ec4c:	6836      	ldr	r6, [r6, #0]
 800ec4e:	e7f7      	b.n	800ec40 <__sfp+0x18>
 800ec50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec54:	b9d5      	cbnz	r5, 800ec8c <__sfp+0x64>
 800ec56:	4b16      	ldr	r3, [pc, #88]	; (800ecb0 <__sfp+0x88>)
 800ec58:	60e3      	str	r3, [r4, #12]
 800ec5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec5e:	6665      	str	r5, [r4, #100]	; 0x64
 800ec60:	f000 f847 	bl	800ecf2 <__retarget_lock_init_recursive>
 800ec64:	f7ff ff96 	bl	800eb94 <__sfp_lock_release>
 800ec68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec70:	6025      	str	r5, [r4, #0]
 800ec72:	61a5      	str	r5, [r4, #24]
 800ec74:	2208      	movs	r2, #8
 800ec76:	4629      	mov	r1, r5
 800ec78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec7c:	f7ff fc4c 	bl	800e518 <memset>
 800ec80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec88:	4620      	mov	r0, r4
 800ec8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec8c:	3468      	adds	r4, #104	; 0x68
 800ec8e:	e7d9      	b.n	800ec44 <__sfp+0x1c>
 800ec90:	2104      	movs	r1, #4
 800ec92:	4638      	mov	r0, r7
 800ec94:	f7ff ff62 	bl	800eb5c <__sfmoreglue>
 800ec98:	4604      	mov	r4, r0
 800ec9a:	6030      	str	r0, [r6, #0]
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d1d5      	bne.n	800ec4c <__sfp+0x24>
 800eca0:	f7ff ff78 	bl	800eb94 <__sfp_lock_release>
 800eca4:	230c      	movs	r3, #12
 800eca6:	603b      	str	r3, [r7, #0]
 800eca8:	e7ee      	b.n	800ec88 <__sfp+0x60>
 800ecaa:	bf00      	nop
 800ecac:	080c4890 	.word	0x080c4890
 800ecb0:	ffff0001 	.word	0xffff0001

0800ecb4 <_fwalk_reent>:
 800ecb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb8:	4606      	mov	r6, r0
 800ecba:	4688      	mov	r8, r1
 800ecbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecc0:	2700      	movs	r7, #0
 800ecc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecc6:	f1b9 0901 	subs.w	r9, r9, #1
 800ecca:	d505      	bpl.n	800ecd8 <_fwalk_reent+0x24>
 800eccc:	6824      	ldr	r4, [r4, #0]
 800ecce:	2c00      	cmp	r4, #0
 800ecd0:	d1f7      	bne.n	800ecc2 <_fwalk_reent+0xe>
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd8:	89ab      	ldrh	r3, [r5, #12]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d907      	bls.n	800ecee <_fwalk_reent+0x3a>
 800ecde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ece2:	3301      	adds	r3, #1
 800ece4:	d003      	beq.n	800ecee <_fwalk_reent+0x3a>
 800ece6:	4629      	mov	r1, r5
 800ece8:	4630      	mov	r0, r6
 800ecea:	47c0      	blx	r8
 800ecec:	4307      	orrs	r7, r0
 800ecee:	3568      	adds	r5, #104	; 0x68
 800ecf0:	e7e9      	b.n	800ecc6 <_fwalk_reent+0x12>

0800ecf2 <__retarget_lock_init_recursive>:
 800ecf2:	4770      	bx	lr

0800ecf4 <__retarget_lock_acquire_recursive>:
 800ecf4:	4770      	bx	lr

0800ecf6 <__retarget_lock_release_recursive>:
 800ecf6:	4770      	bx	lr

0800ecf8 <__swhatbuf_r>:
 800ecf8:	b570      	push	{r4, r5, r6, lr}
 800ecfa:	460e      	mov	r6, r1
 800ecfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed00:	2900      	cmp	r1, #0
 800ed02:	b096      	sub	sp, #88	; 0x58
 800ed04:	4614      	mov	r4, r2
 800ed06:	461d      	mov	r5, r3
 800ed08:	da07      	bge.n	800ed1a <__swhatbuf_r+0x22>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	602b      	str	r3, [r5, #0]
 800ed0e:	89b3      	ldrh	r3, [r6, #12]
 800ed10:	061a      	lsls	r2, r3, #24
 800ed12:	d410      	bmi.n	800ed36 <__swhatbuf_r+0x3e>
 800ed14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed18:	e00e      	b.n	800ed38 <__swhatbuf_r+0x40>
 800ed1a:	466a      	mov	r2, sp
 800ed1c:	f000 fbf8 	bl	800f510 <_fstat_r>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	dbf2      	blt.n	800ed0a <__swhatbuf_r+0x12>
 800ed24:	9a01      	ldr	r2, [sp, #4]
 800ed26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed2e:	425a      	negs	r2, r3
 800ed30:	415a      	adcs	r2, r3
 800ed32:	602a      	str	r2, [r5, #0]
 800ed34:	e7ee      	b.n	800ed14 <__swhatbuf_r+0x1c>
 800ed36:	2340      	movs	r3, #64	; 0x40
 800ed38:	2000      	movs	r0, #0
 800ed3a:	6023      	str	r3, [r4, #0]
 800ed3c:	b016      	add	sp, #88	; 0x58
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}

0800ed40 <__smakebuf_r>:
 800ed40:	898b      	ldrh	r3, [r1, #12]
 800ed42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed44:	079d      	lsls	r5, r3, #30
 800ed46:	4606      	mov	r6, r0
 800ed48:	460c      	mov	r4, r1
 800ed4a:	d507      	bpl.n	800ed5c <__smakebuf_r+0x1c>
 800ed4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed50:	6023      	str	r3, [r4, #0]
 800ed52:	6123      	str	r3, [r4, #16]
 800ed54:	2301      	movs	r3, #1
 800ed56:	6163      	str	r3, [r4, #20]
 800ed58:	b002      	add	sp, #8
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
 800ed5c:	ab01      	add	r3, sp, #4
 800ed5e:	466a      	mov	r2, sp
 800ed60:	f7ff ffca 	bl	800ecf8 <__swhatbuf_r>
 800ed64:	9900      	ldr	r1, [sp, #0]
 800ed66:	4605      	mov	r5, r0
 800ed68:	4630      	mov	r0, r6
 800ed6a:	f7ff fc3d 	bl	800e5e8 <_malloc_r>
 800ed6e:	b948      	cbnz	r0, 800ed84 <__smakebuf_r+0x44>
 800ed70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed74:	059a      	lsls	r2, r3, #22
 800ed76:	d4ef      	bmi.n	800ed58 <__smakebuf_r+0x18>
 800ed78:	f023 0303 	bic.w	r3, r3, #3
 800ed7c:	f043 0302 	orr.w	r3, r3, #2
 800ed80:	81a3      	strh	r3, [r4, #12]
 800ed82:	e7e3      	b.n	800ed4c <__smakebuf_r+0xc>
 800ed84:	4b0d      	ldr	r3, [pc, #52]	; (800edbc <__smakebuf_r+0x7c>)
 800ed86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed88:	89a3      	ldrh	r3, [r4, #12]
 800ed8a:	6020      	str	r0, [r4, #0]
 800ed8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed90:	81a3      	strh	r3, [r4, #12]
 800ed92:	9b00      	ldr	r3, [sp, #0]
 800ed94:	6163      	str	r3, [r4, #20]
 800ed96:	9b01      	ldr	r3, [sp, #4]
 800ed98:	6120      	str	r0, [r4, #16]
 800ed9a:	b15b      	cbz	r3, 800edb4 <__smakebuf_r+0x74>
 800ed9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eda0:	4630      	mov	r0, r6
 800eda2:	f000 fbc7 	bl	800f534 <_isatty_r>
 800eda6:	b128      	cbz	r0, 800edb4 <__smakebuf_r+0x74>
 800eda8:	89a3      	ldrh	r3, [r4, #12]
 800edaa:	f023 0303 	bic.w	r3, r3, #3
 800edae:	f043 0301 	orr.w	r3, r3, #1
 800edb2:	81a3      	strh	r3, [r4, #12]
 800edb4:	89a0      	ldrh	r0, [r4, #12]
 800edb6:	4305      	orrs	r5, r0
 800edb8:	81a5      	strh	r5, [r4, #12]
 800edba:	e7cd      	b.n	800ed58 <__smakebuf_r+0x18>
 800edbc:	0800eb51 	.word	0x0800eb51

0800edc0 <__malloc_lock>:
 800edc0:	4801      	ldr	r0, [pc, #4]	; (800edc8 <__malloc_lock+0x8>)
 800edc2:	f7ff bf97 	b.w	800ecf4 <__retarget_lock_acquire_recursive>
 800edc6:	bf00      	nop
 800edc8:	200024dd 	.word	0x200024dd

0800edcc <__malloc_unlock>:
 800edcc:	4801      	ldr	r0, [pc, #4]	; (800edd4 <__malloc_unlock+0x8>)
 800edce:	f7ff bf92 	b.w	800ecf6 <__retarget_lock_release_recursive>
 800edd2:	bf00      	nop
 800edd4:	200024dd 	.word	0x200024dd

0800edd8 <__sfputc_r>:
 800edd8:	6893      	ldr	r3, [r2, #8]
 800edda:	3b01      	subs	r3, #1
 800eddc:	2b00      	cmp	r3, #0
 800edde:	b410      	push	{r4}
 800ede0:	6093      	str	r3, [r2, #8]
 800ede2:	da08      	bge.n	800edf6 <__sfputc_r+0x1e>
 800ede4:	6994      	ldr	r4, [r2, #24]
 800ede6:	42a3      	cmp	r3, r4
 800ede8:	db01      	blt.n	800edee <__sfputc_r+0x16>
 800edea:	290a      	cmp	r1, #10
 800edec:	d103      	bne.n	800edf6 <__sfputc_r+0x1e>
 800edee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf2:	f7ff bd07 	b.w	800e804 <__swbuf_r>
 800edf6:	6813      	ldr	r3, [r2, #0]
 800edf8:	1c58      	adds	r0, r3, #1
 800edfa:	6010      	str	r0, [r2, #0]
 800edfc:	7019      	strb	r1, [r3, #0]
 800edfe:	4608      	mov	r0, r1
 800ee00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <__sfputs_r>:
 800ee06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee08:	4606      	mov	r6, r0
 800ee0a:	460f      	mov	r7, r1
 800ee0c:	4614      	mov	r4, r2
 800ee0e:	18d5      	adds	r5, r2, r3
 800ee10:	42ac      	cmp	r4, r5
 800ee12:	d101      	bne.n	800ee18 <__sfputs_r+0x12>
 800ee14:	2000      	movs	r0, #0
 800ee16:	e007      	b.n	800ee28 <__sfputs_r+0x22>
 800ee18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee1c:	463a      	mov	r2, r7
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f7ff ffda 	bl	800edd8 <__sfputc_r>
 800ee24:	1c43      	adds	r3, r0, #1
 800ee26:	d1f3      	bne.n	800ee10 <__sfputs_r+0xa>
 800ee28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee2c <_vfiprintf_r>:
 800ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee30:	460d      	mov	r5, r1
 800ee32:	b09d      	sub	sp, #116	; 0x74
 800ee34:	4614      	mov	r4, r2
 800ee36:	4698      	mov	r8, r3
 800ee38:	4606      	mov	r6, r0
 800ee3a:	b118      	cbz	r0, 800ee44 <_vfiprintf_r+0x18>
 800ee3c:	6983      	ldr	r3, [r0, #24]
 800ee3e:	b90b      	cbnz	r3, 800ee44 <_vfiprintf_r+0x18>
 800ee40:	f7ff feba 	bl	800ebb8 <__sinit>
 800ee44:	4b89      	ldr	r3, [pc, #548]	; (800f06c <_vfiprintf_r+0x240>)
 800ee46:	429d      	cmp	r5, r3
 800ee48:	d11b      	bne.n	800ee82 <_vfiprintf_r+0x56>
 800ee4a:	6875      	ldr	r5, [r6, #4]
 800ee4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee4e:	07d9      	lsls	r1, r3, #31
 800ee50:	d405      	bmi.n	800ee5e <_vfiprintf_r+0x32>
 800ee52:	89ab      	ldrh	r3, [r5, #12]
 800ee54:	059a      	lsls	r2, r3, #22
 800ee56:	d402      	bmi.n	800ee5e <_vfiprintf_r+0x32>
 800ee58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee5a:	f7ff ff4b 	bl	800ecf4 <__retarget_lock_acquire_recursive>
 800ee5e:	89ab      	ldrh	r3, [r5, #12]
 800ee60:	071b      	lsls	r3, r3, #28
 800ee62:	d501      	bpl.n	800ee68 <_vfiprintf_r+0x3c>
 800ee64:	692b      	ldr	r3, [r5, #16]
 800ee66:	b9eb      	cbnz	r3, 800eea4 <_vfiprintf_r+0x78>
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f7ff fd1c 	bl	800e8a8 <__swsetup_r>
 800ee70:	b1c0      	cbz	r0, 800eea4 <_vfiprintf_r+0x78>
 800ee72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee74:	07dc      	lsls	r4, r3, #31
 800ee76:	d50e      	bpl.n	800ee96 <_vfiprintf_r+0x6a>
 800ee78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee7c:	b01d      	add	sp, #116	; 0x74
 800ee7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee82:	4b7b      	ldr	r3, [pc, #492]	; (800f070 <_vfiprintf_r+0x244>)
 800ee84:	429d      	cmp	r5, r3
 800ee86:	d101      	bne.n	800ee8c <_vfiprintf_r+0x60>
 800ee88:	68b5      	ldr	r5, [r6, #8]
 800ee8a:	e7df      	b.n	800ee4c <_vfiprintf_r+0x20>
 800ee8c:	4b79      	ldr	r3, [pc, #484]	; (800f074 <_vfiprintf_r+0x248>)
 800ee8e:	429d      	cmp	r5, r3
 800ee90:	bf08      	it	eq
 800ee92:	68f5      	ldreq	r5, [r6, #12]
 800ee94:	e7da      	b.n	800ee4c <_vfiprintf_r+0x20>
 800ee96:	89ab      	ldrh	r3, [r5, #12]
 800ee98:	0598      	lsls	r0, r3, #22
 800ee9a:	d4ed      	bmi.n	800ee78 <_vfiprintf_r+0x4c>
 800ee9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee9e:	f7ff ff2a 	bl	800ecf6 <__retarget_lock_release_recursive>
 800eea2:	e7e9      	b.n	800ee78 <_vfiprintf_r+0x4c>
 800eea4:	2300      	movs	r3, #0
 800eea6:	9309      	str	r3, [sp, #36]	; 0x24
 800eea8:	2320      	movs	r3, #32
 800eeaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eeae:	f8cd 800c 	str.w	r8, [sp, #12]
 800eeb2:	2330      	movs	r3, #48	; 0x30
 800eeb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f078 <_vfiprintf_r+0x24c>
 800eeb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eebc:	f04f 0901 	mov.w	r9, #1
 800eec0:	4623      	mov	r3, r4
 800eec2:	469a      	mov	sl, r3
 800eec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eec8:	b10a      	cbz	r2, 800eece <_vfiprintf_r+0xa2>
 800eeca:	2a25      	cmp	r2, #37	; 0x25
 800eecc:	d1f9      	bne.n	800eec2 <_vfiprintf_r+0x96>
 800eece:	ebba 0b04 	subs.w	fp, sl, r4
 800eed2:	d00b      	beq.n	800eeec <_vfiprintf_r+0xc0>
 800eed4:	465b      	mov	r3, fp
 800eed6:	4622      	mov	r2, r4
 800eed8:	4629      	mov	r1, r5
 800eeda:	4630      	mov	r0, r6
 800eedc:	f7ff ff93 	bl	800ee06 <__sfputs_r>
 800eee0:	3001      	adds	r0, #1
 800eee2:	f000 80aa 	beq.w	800f03a <_vfiprintf_r+0x20e>
 800eee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eee8:	445a      	add	r2, fp
 800eeea:	9209      	str	r2, [sp, #36]	; 0x24
 800eeec:	f89a 3000 	ldrb.w	r3, [sl]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f000 80a2 	beq.w	800f03a <_vfiprintf_r+0x20e>
 800eef6:	2300      	movs	r3, #0
 800eef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eefc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef00:	f10a 0a01 	add.w	sl, sl, #1
 800ef04:	9304      	str	r3, [sp, #16]
 800ef06:	9307      	str	r3, [sp, #28]
 800ef08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ef0e:	4654      	mov	r4, sl
 800ef10:	2205      	movs	r2, #5
 800ef12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef16:	4858      	ldr	r0, [pc, #352]	; (800f078 <_vfiprintf_r+0x24c>)
 800ef18:	f7f1 f97a 	bl	8000210 <memchr>
 800ef1c:	9a04      	ldr	r2, [sp, #16]
 800ef1e:	b9d8      	cbnz	r0, 800ef58 <_vfiprintf_r+0x12c>
 800ef20:	06d1      	lsls	r1, r2, #27
 800ef22:	bf44      	itt	mi
 800ef24:	2320      	movmi	r3, #32
 800ef26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef2a:	0713      	lsls	r3, r2, #28
 800ef2c:	bf44      	itt	mi
 800ef2e:	232b      	movmi	r3, #43	; 0x2b
 800ef30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef34:	f89a 3000 	ldrb.w	r3, [sl]
 800ef38:	2b2a      	cmp	r3, #42	; 0x2a
 800ef3a:	d015      	beq.n	800ef68 <_vfiprintf_r+0x13c>
 800ef3c:	9a07      	ldr	r2, [sp, #28]
 800ef3e:	4654      	mov	r4, sl
 800ef40:	2000      	movs	r0, #0
 800ef42:	f04f 0c0a 	mov.w	ip, #10
 800ef46:	4621      	mov	r1, r4
 800ef48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef4c:	3b30      	subs	r3, #48	; 0x30
 800ef4e:	2b09      	cmp	r3, #9
 800ef50:	d94e      	bls.n	800eff0 <_vfiprintf_r+0x1c4>
 800ef52:	b1b0      	cbz	r0, 800ef82 <_vfiprintf_r+0x156>
 800ef54:	9207      	str	r2, [sp, #28]
 800ef56:	e014      	b.n	800ef82 <_vfiprintf_r+0x156>
 800ef58:	eba0 0308 	sub.w	r3, r0, r8
 800ef5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ef60:	4313      	orrs	r3, r2
 800ef62:	9304      	str	r3, [sp, #16]
 800ef64:	46a2      	mov	sl, r4
 800ef66:	e7d2      	b.n	800ef0e <_vfiprintf_r+0xe2>
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	1d19      	adds	r1, r3, #4
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	9103      	str	r1, [sp, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	bfbb      	ittet	lt
 800ef74:	425b      	neglt	r3, r3
 800ef76:	f042 0202 	orrlt.w	r2, r2, #2
 800ef7a:	9307      	strge	r3, [sp, #28]
 800ef7c:	9307      	strlt	r3, [sp, #28]
 800ef7e:	bfb8      	it	lt
 800ef80:	9204      	strlt	r2, [sp, #16]
 800ef82:	7823      	ldrb	r3, [r4, #0]
 800ef84:	2b2e      	cmp	r3, #46	; 0x2e
 800ef86:	d10c      	bne.n	800efa2 <_vfiprintf_r+0x176>
 800ef88:	7863      	ldrb	r3, [r4, #1]
 800ef8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef8c:	d135      	bne.n	800effa <_vfiprintf_r+0x1ce>
 800ef8e:	9b03      	ldr	r3, [sp, #12]
 800ef90:	1d1a      	adds	r2, r3, #4
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	9203      	str	r2, [sp, #12]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	bfb8      	it	lt
 800ef9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef9e:	3402      	adds	r4, #2
 800efa0:	9305      	str	r3, [sp, #20]
 800efa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f088 <_vfiprintf_r+0x25c>
 800efa6:	7821      	ldrb	r1, [r4, #0]
 800efa8:	2203      	movs	r2, #3
 800efaa:	4650      	mov	r0, sl
 800efac:	f7f1 f930 	bl	8000210 <memchr>
 800efb0:	b140      	cbz	r0, 800efc4 <_vfiprintf_r+0x198>
 800efb2:	2340      	movs	r3, #64	; 0x40
 800efb4:	eba0 000a 	sub.w	r0, r0, sl
 800efb8:	fa03 f000 	lsl.w	r0, r3, r0
 800efbc:	9b04      	ldr	r3, [sp, #16]
 800efbe:	4303      	orrs	r3, r0
 800efc0:	3401      	adds	r4, #1
 800efc2:	9304      	str	r3, [sp, #16]
 800efc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc8:	482c      	ldr	r0, [pc, #176]	; (800f07c <_vfiprintf_r+0x250>)
 800efca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efce:	2206      	movs	r2, #6
 800efd0:	f7f1 f91e 	bl	8000210 <memchr>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	d03f      	beq.n	800f058 <_vfiprintf_r+0x22c>
 800efd8:	4b29      	ldr	r3, [pc, #164]	; (800f080 <_vfiprintf_r+0x254>)
 800efda:	bb1b      	cbnz	r3, 800f024 <_vfiprintf_r+0x1f8>
 800efdc:	9b03      	ldr	r3, [sp, #12]
 800efde:	3307      	adds	r3, #7
 800efe0:	f023 0307 	bic.w	r3, r3, #7
 800efe4:	3308      	adds	r3, #8
 800efe6:	9303      	str	r3, [sp, #12]
 800efe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efea:	443b      	add	r3, r7
 800efec:	9309      	str	r3, [sp, #36]	; 0x24
 800efee:	e767      	b.n	800eec0 <_vfiprintf_r+0x94>
 800eff0:	fb0c 3202 	mla	r2, ip, r2, r3
 800eff4:	460c      	mov	r4, r1
 800eff6:	2001      	movs	r0, #1
 800eff8:	e7a5      	b.n	800ef46 <_vfiprintf_r+0x11a>
 800effa:	2300      	movs	r3, #0
 800effc:	3401      	adds	r4, #1
 800effe:	9305      	str	r3, [sp, #20]
 800f000:	4619      	mov	r1, r3
 800f002:	f04f 0c0a 	mov.w	ip, #10
 800f006:	4620      	mov	r0, r4
 800f008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f00c:	3a30      	subs	r2, #48	; 0x30
 800f00e:	2a09      	cmp	r2, #9
 800f010:	d903      	bls.n	800f01a <_vfiprintf_r+0x1ee>
 800f012:	2b00      	cmp	r3, #0
 800f014:	d0c5      	beq.n	800efa2 <_vfiprintf_r+0x176>
 800f016:	9105      	str	r1, [sp, #20]
 800f018:	e7c3      	b.n	800efa2 <_vfiprintf_r+0x176>
 800f01a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f01e:	4604      	mov	r4, r0
 800f020:	2301      	movs	r3, #1
 800f022:	e7f0      	b.n	800f006 <_vfiprintf_r+0x1da>
 800f024:	ab03      	add	r3, sp, #12
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	462a      	mov	r2, r5
 800f02a:	4b16      	ldr	r3, [pc, #88]	; (800f084 <_vfiprintf_r+0x258>)
 800f02c:	a904      	add	r1, sp, #16
 800f02e:	4630      	mov	r0, r6
 800f030:	f3af 8000 	nop.w
 800f034:	4607      	mov	r7, r0
 800f036:	1c78      	adds	r0, r7, #1
 800f038:	d1d6      	bne.n	800efe8 <_vfiprintf_r+0x1bc>
 800f03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f03c:	07d9      	lsls	r1, r3, #31
 800f03e:	d405      	bmi.n	800f04c <_vfiprintf_r+0x220>
 800f040:	89ab      	ldrh	r3, [r5, #12]
 800f042:	059a      	lsls	r2, r3, #22
 800f044:	d402      	bmi.n	800f04c <_vfiprintf_r+0x220>
 800f046:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f048:	f7ff fe55 	bl	800ecf6 <__retarget_lock_release_recursive>
 800f04c:	89ab      	ldrh	r3, [r5, #12]
 800f04e:	065b      	lsls	r3, r3, #25
 800f050:	f53f af12 	bmi.w	800ee78 <_vfiprintf_r+0x4c>
 800f054:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f056:	e711      	b.n	800ee7c <_vfiprintf_r+0x50>
 800f058:	ab03      	add	r3, sp, #12
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	462a      	mov	r2, r5
 800f05e:	4b09      	ldr	r3, [pc, #36]	; (800f084 <_vfiprintf_r+0x258>)
 800f060:	a904      	add	r1, sp, #16
 800f062:	4630      	mov	r0, r6
 800f064:	f000 f880 	bl	800f168 <_printf_i>
 800f068:	e7e4      	b.n	800f034 <_vfiprintf_r+0x208>
 800f06a:	bf00      	nop
 800f06c:	080c48b4 	.word	0x080c48b4
 800f070:	080c48d4 	.word	0x080c48d4
 800f074:	080c4894 	.word	0x080c4894
 800f078:	080c48f4 	.word	0x080c48f4
 800f07c:	080c48fe 	.word	0x080c48fe
 800f080:	00000000 	.word	0x00000000
 800f084:	0800ee07 	.word	0x0800ee07
 800f088:	080c48fa 	.word	0x080c48fa

0800f08c <_printf_common>:
 800f08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f090:	4616      	mov	r6, r2
 800f092:	4699      	mov	r9, r3
 800f094:	688a      	ldr	r2, [r1, #8]
 800f096:	690b      	ldr	r3, [r1, #16]
 800f098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f09c:	4293      	cmp	r3, r2
 800f09e:	bfb8      	it	lt
 800f0a0:	4613      	movlt	r3, r2
 800f0a2:	6033      	str	r3, [r6, #0]
 800f0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0a8:	4607      	mov	r7, r0
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	b10a      	cbz	r2, 800f0b2 <_printf_common+0x26>
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	6033      	str	r3, [r6, #0]
 800f0b2:	6823      	ldr	r3, [r4, #0]
 800f0b4:	0699      	lsls	r1, r3, #26
 800f0b6:	bf42      	ittt	mi
 800f0b8:	6833      	ldrmi	r3, [r6, #0]
 800f0ba:	3302      	addmi	r3, #2
 800f0bc:	6033      	strmi	r3, [r6, #0]
 800f0be:	6825      	ldr	r5, [r4, #0]
 800f0c0:	f015 0506 	ands.w	r5, r5, #6
 800f0c4:	d106      	bne.n	800f0d4 <_printf_common+0x48>
 800f0c6:	f104 0a19 	add.w	sl, r4, #25
 800f0ca:	68e3      	ldr	r3, [r4, #12]
 800f0cc:	6832      	ldr	r2, [r6, #0]
 800f0ce:	1a9b      	subs	r3, r3, r2
 800f0d0:	42ab      	cmp	r3, r5
 800f0d2:	dc26      	bgt.n	800f122 <_printf_common+0x96>
 800f0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0d8:	1e13      	subs	r3, r2, #0
 800f0da:	6822      	ldr	r2, [r4, #0]
 800f0dc:	bf18      	it	ne
 800f0de:	2301      	movne	r3, #1
 800f0e0:	0692      	lsls	r2, r2, #26
 800f0e2:	d42b      	bmi.n	800f13c <_printf_common+0xb0>
 800f0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0e8:	4649      	mov	r1, r9
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	47c0      	blx	r8
 800f0ee:	3001      	adds	r0, #1
 800f0f0:	d01e      	beq.n	800f130 <_printf_common+0xa4>
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	68e5      	ldr	r5, [r4, #12]
 800f0f6:	6832      	ldr	r2, [r6, #0]
 800f0f8:	f003 0306 	and.w	r3, r3, #6
 800f0fc:	2b04      	cmp	r3, #4
 800f0fe:	bf08      	it	eq
 800f100:	1aad      	subeq	r5, r5, r2
 800f102:	68a3      	ldr	r3, [r4, #8]
 800f104:	6922      	ldr	r2, [r4, #16]
 800f106:	bf0c      	ite	eq
 800f108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f10c:	2500      	movne	r5, #0
 800f10e:	4293      	cmp	r3, r2
 800f110:	bfc4      	itt	gt
 800f112:	1a9b      	subgt	r3, r3, r2
 800f114:	18ed      	addgt	r5, r5, r3
 800f116:	2600      	movs	r6, #0
 800f118:	341a      	adds	r4, #26
 800f11a:	42b5      	cmp	r5, r6
 800f11c:	d11a      	bne.n	800f154 <_printf_common+0xc8>
 800f11e:	2000      	movs	r0, #0
 800f120:	e008      	b.n	800f134 <_printf_common+0xa8>
 800f122:	2301      	movs	r3, #1
 800f124:	4652      	mov	r2, sl
 800f126:	4649      	mov	r1, r9
 800f128:	4638      	mov	r0, r7
 800f12a:	47c0      	blx	r8
 800f12c:	3001      	adds	r0, #1
 800f12e:	d103      	bne.n	800f138 <_printf_common+0xac>
 800f130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f138:	3501      	adds	r5, #1
 800f13a:	e7c6      	b.n	800f0ca <_printf_common+0x3e>
 800f13c:	18e1      	adds	r1, r4, r3
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	2030      	movs	r0, #48	; 0x30
 800f142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f146:	4422      	add	r2, r4
 800f148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f150:	3302      	adds	r3, #2
 800f152:	e7c7      	b.n	800f0e4 <_printf_common+0x58>
 800f154:	2301      	movs	r3, #1
 800f156:	4622      	mov	r2, r4
 800f158:	4649      	mov	r1, r9
 800f15a:	4638      	mov	r0, r7
 800f15c:	47c0      	blx	r8
 800f15e:	3001      	adds	r0, #1
 800f160:	d0e6      	beq.n	800f130 <_printf_common+0xa4>
 800f162:	3601      	adds	r6, #1
 800f164:	e7d9      	b.n	800f11a <_printf_common+0x8e>
	...

0800f168 <_printf_i>:
 800f168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f16c:	460c      	mov	r4, r1
 800f16e:	4691      	mov	r9, r2
 800f170:	7e27      	ldrb	r7, [r4, #24]
 800f172:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f174:	2f78      	cmp	r7, #120	; 0x78
 800f176:	4680      	mov	r8, r0
 800f178:	469a      	mov	sl, r3
 800f17a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f17e:	d807      	bhi.n	800f190 <_printf_i+0x28>
 800f180:	2f62      	cmp	r7, #98	; 0x62
 800f182:	d80a      	bhi.n	800f19a <_printf_i+0x32>
 800f184:	2f00      	cmp	r7, #0
 800f186:	f000 80d8 	beq.w	800f33a <_printf_i+0x1d2>
 800f18a:	2f58      	cmp	r7, #88	; 0x58
 800f18c:	f000 80a3 	beq.w	800f2d6 <_printf_i+0x16e>
 800f190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f198:	e03a      	b.n	800f210 <_printf_i+0xa8>
 800f19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f19e:	2b15      	cmp	r3, #21
 800f1a0:	d8f6      	bhi.n	800f190 <_printf_i+0x28>
 800f1a2:	a001      	add	r0, pc, #4	; (adr r0, 800f1a8 <_printf_i+0x40>)
 800f1a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f1a8:	0800f201 	.word	0x0800f201
 800f1ac:	0800f215 	.word	0x0800f215
 800f1b0:	0800f191 	.word	0x0800f191
 800f1b4:	0800f191 	.word	0x0800f191
 800f1b8:	0800f191 	.word	0x0800f191
 800f1bc:	0800f191 	.word	0x0800f191
 800f1c0:	0800f215 	.word	0x0800f215
 800f1c4:	0800f191 	.word	0x0800f191
 800f1c8:	0800f191 	.word	0x0800f191
 800f1cc:	0800f191 	.word	0x0800f191
 800f1d0:	0800f191 	.word	0x0800f191
 800f1d4:	0800f321 	.word	0x0800f321
 800f1d8:	0800f245 	.word	0x0800f245
 800f1dc:	0800f303 	.word	0x0800f303
 800f1e0:	0800f191 	.word	0x0800f191
 800f1e4:	0800f191 	.word	0x0800f191
 800f1e8:	0800f343 	.word	0x0800f343
 800f1ec:	0800f191 	.word	0x0800f191
 800f1f0:	0800f245 	.word	0x0800f245
 800f1f4:	0800f191 	.word	0x0800f191
 800f1f8:	0800f191 	.word	0x0800f191
 800f1fc:	0800f30b 	.word	0x0800f30b
 800f200:	680b      	ldr	r3, [r1, #0]
 800f202:	1d1a      	adds	r2, r3, #4
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	600a      	str	r2, [r1, #0]
 800f208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f210:	2301      	movs	r3, #1
 800f212:	e0a3      	b.n	800f35c <_printf_i+0x1f4>
 800f214:	6825      	ldr	r5, [r4, #0]
 800f216:	6808      	ldr	r0, [r1, #0]
 800f218:	062e      	lsls	r6, r5, #24
 800f21a:	f100 0304 	add.w	r3, r0, #4
 800f21e:	d50a      	bpl.n	800f236 <_printf_i+0xce>
 800f220:	6805      	ldr	r5, [r0, #0]
 800f222:	600b      	str	r3, [r1, #0]
 800f224:	2d00      	cmp	r5, #0
 800f226:	da03      	bge.n	800f230 <_printf_i+0xc8>
 800f228:	232d      	movs	r3, #45	; 0x2d
 800f22a:	426d      	negs	r5, r5
 800f22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f230:	485e      	ldr	r0, [pc, #376]	; (800f3ac <_printf_i+0x244>)
 800f232:	230a      	movs	r3, #10
 800f234:	e019      	b.n	800f26a <_printf_i+0x102>
 800f236:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f23a:	6805      	ldr	r5, [r0, #0]
 800f23c:	600b      	str	r3, [r1, #0]
 800f23e:	bf18      	it	ne
 800f240:	b22d      	sxthne	r5, r5
 800f242:	e7ef      	b.n	800f224 <_printf_i+0xbc>
 800f244:	680b      	ldr	r3, [r1, #0]
 800f246:	6825      	ldr	r5, [r4, #0]
 800f248:	1d18      	adds	r0, r3, #4
 800f24a:	6008      	str	r0, [r1, #0]
 800f24c:	0628      	lsls	r0, r5, #24
 800f24e:	d501      	bpl.n	800f254 <_printf_i+0xec>
 800f250:	681d      	ldr	r5, [r3, #0]
 800f252:	e002      	b.n	800f25a <_printf_i+0xf2>
 800f254:	0669      	lsls	r1, r5, #25
 800f256:	d5fb      	bpl.n	800f250 <_printf_i+0xe8>
 800f258:	881d      	ldrh	r5, [r3, #0]
 800f25a:	4854      	ldr	r0, [pc, #336]	; (800f3ac <_printf_i+0x244>)
 800f25c:	2f6f      	cmp	r7, #111	; 0x6f
 800f25e:	bf0c      	ite	eq
 800f260:	2308      	moveq	r3, #8
 800f262:	230a      	movne	r3, #10
 800f264:	2100      	movs	r1, #0
 800f266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f26a:	6866      	ldr	r6, [r4, #4]
 800f26c:	60a6      	str	r6, [r4, #8]
 800f26e:	2e00      	cmp	r6, #0
 800f270:	bfa2      	ittt	ge
 800f272:	6821      	ldrge	r1, [r4, #0]
 800f274:	f021 0104 	bicge.w	r1, r1, #4
 800f278:	6021      	strge	r1, [r4, #0]
 800f27a:	b90d      	cbnz	r5, 800f280 <_printf_i+0x118>
 800f27c:	2e00      	cmp	r6, #0
 800f27e:	d04d      	beq.n	800f31c <_printf_i+0x1b4>
 800f280:	4616      	mov	r6, r2
 800f282:	fbb5 f1f3 	udiv	r1, r5, r3
 800f286:	fb03 5711 	mls	r7, r3, r1, r5
 800f28a:	5dc7      	ldrb	r7, [r0, r7]
 800f28c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f290:	462f      	mov	r7, r5
 800f292:	42bb      	cmp	r3, r7
 800f294:	460d      	mov	r5, r1
 800f296:	d9f4      	bls.n	800f282 <_printf_i+0x11a>
 800f298:	2b08      	cmp	r3, #8
 800f29a:	d10b      	bne.n	800f2b4 <_printf_i+0x14c>
 800f29c:	6823      	ldr	r3, [r4, #0]
 800f29e:	07df      	lsls	r7, r3, #31
 800f2a0:	d508      	bpl.n	800f2b4 <_printf_i+0x14c>
 800f2a2:	6923      	ldr	r3, [r4, #16]
 800f2a4:	6861      	ldr	r1, [r4, #4]
 800f2a6:	4299      	cmp	r1, r3
 800f2a8:	bfde      	ittt	le
 800f2aa:	2330      	movle	r3, #48	; 0x30
 800f2ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f2b0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f2b4:	1b92      	subs	r2, r2, r6
 800f2b6:	6122      	str	r2, [r4, #16]
 800f2b8:	f8cd a000 	str.w	sl, [sp]
 800f2bc:	464b      	mov	r3, r9
 800f2be:	aa03      	add	r2, sp, #12
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	4640      	mov	r0, r8
 800f2c4:	f7ff fee2 	bl	800f08c <_printf_common>
 800f2c8:	3001      	adds	r0, #1
 800f2ca:	d14c      	bne.n	800f366 <_printf_i+0x1fe>
 800f2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2d0:	b004      	add	sp, #16
 800f2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2d6:	4835      	ldr	r0, [pc, #212]	; (800f3ac <_printf_i+0x244>)
 800f2d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	680e      	ldr	r6, [r1, #0]
 800f2e0:	061f      	lsls	r7, r3, #24
 800f2e2:	f856 5b04 	ldr.w	r5, [r6], #4
 800f2e6:	600e      	str	r6, [r1, #0]
 800f2e8:	d514      	bpl.n	800f314 <_printf_i+0x1ac>
 800f2ea:	07d9      	lsls	r1, r3, #31
 800f2ec:	bf44      	itt	mi
 800f2ee:	f043 0320 	orrmi.w	r3, r3, #32
 800f2f2:	6023      	strmi	r3, [r4, #0]
 800f2f4:	b91d      	cbnz	r5, 800f2fe <_printf_i+0x196>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	f023 0320 	bic.w	r3, r3, #32
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	2310      	movs	r3, #16
 800f300:	e7b0      	b.n	800f264 <_printf_i+0xfc>
 800f302:	6823      	ldr	r3, [r4, #0]
 800f304:	f043 0320 	orr.w	r3, r3, #32
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	2378      	movs	r3, #120	; 0x78
 800f30c:	4828      	ldr	r0, [pc, #160]	; (800f3b0 <_printf_i+0x248>)
 800f30e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f312:	e7e3      	b.n	800f2dc <_printf_i+0x174>
 800f314:	065e      	lsls	r6, r3, #25
 800f316:	bf48      	it	mi
 800f318:	b2ad      	uxthmi	r5, r5
 800f31a:	e7e6      	b.n	800f2ea <_printf_i+0x182>
 800f31c:	4616      	mov	r6, r2
 800f31e:	e7bb      	b.n	800f298 <_printf_i+0x130>
 800f320:	680b      	ldr	r3, [r1, #0]
 800f322:	6826      	ldr	r6, [r4, #0]
 800f324:	6960      	ldr	r0, [r4, #20]
 800f326:	1d1d      	adds	r5, r3, #4
 800f328:	600d      	str	r5, [r1, #0]
 800f32a:	0635      	lsls	r5, r6, #24
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	d501      	bpl.n	800f334 <_printf_i+0x1cc>
 800f330:	6018      	str	r0, [r3, #0]
 800f332:	e002      	b.n	800f33a <_printf_i+0x1d2>
 800f334:	0671      	lsls	r1, r6, #25
 800f336:	d5fb      	bpl.n	800f330 <_printf_i+0x1c8>
 800f338:	8018      	strh	r0, [r3, #0]
 800f33a:	2300      	movs	r3, #0
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	4616      	mov	r6, r2
 800f340:	e7ba      	b.n	800f2b8 <_printf_i+0x150>
 800f342:	680b      	ldr	r3, [r1, #0]
 800f344:	1d1a      	adds	r2, r3, #4
 800f346:	600a      	str	r2, [r1, #0]
 800f348:	681e      	ldr	r6, [r3, #0]
 800f34a:	6862      	ldr	r2, [r4, #4]
 800f34c:	2100      	movs	r1, #0
 800f34e:	4630      	mov	r0, r6
 800f350:	f7f0 ff5e 	bl	8000210 <memchr>
 800f354:	b108      	cbz	r0, 800f35a <_printf_i+0x1f2>
 800f356:	1b80      	subs	r0, r0, r6
 800f358:	6060      	str	r0, [r4, #4]
 800f35a:	6863      	ldr	r3, [r4, #4]
 800f35c:	6123      	str	r3, [r4, #16]
 800f35e:	2300      	movs	r3, #0
 800f360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f364:	e7a8      	b.n	800f2b8 <_printf_i+0x150>
 800f366:	6923      	ldr	r3, [r4, #16]
 800f368:	4632      	mov	r2, r6
 800f36a:	4649      	mov	r1, r9
 800f36c:	4640      	mov	r0, r8
 800f36e:	47d0      	blx	sl
 800f370:	3001      	adds	r0, #1
 800f372:	d0ab      	beq.n	800f2cc <_printf_i+0x164>
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	079b      	lsls	r3, r3, #30
 800f378:	d413      	bmi.n	800f3a2 <_printf_i+0x23a>
 800f37a:	68e0      	ldr	r0, [r4, #12]
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	4298      	cmp	r0, r3
 800f380:	bfb8      	it	lt
 800f382:	4618      	movlt	r0, r3
 800f384:	e7a4      	b.n	800f2d0 <_printf_i+0x168>
 800f386:	2301      	movs	r3, #1
 800f388:	4632      	mov	r2, r6
 800f38a:	4649      	mov	r1, r9
 800f38c:	4640      	mov	r0, r8
 800f38e:	47d0      	blx	sl
 800f390:	3001      	adds	r0, #1
 800f392:	d09b      	beq.n	800f2cc <_printf_i+0x164>
 800f394:	3501      	adds	r5, #1
 800f396:	68e3      	ldr	r3, [r4, #12]
 800f398:	9903      	ldr	r1, [sp, #12]
 800f39a:	1a5b      	subs	r3, r3, r1
 800f39c:	42ab      	cmp	r3, r5
 800f39e:	dcf2      	bgt.n	800f386 <_printf_i+0x21e>
 800f3a0:	e7eb      	b.n	800f37a <_printf_i+0x212>
 800f3a2:	2500      	movs	r5, #0
 800f3a4:	f104 0619 	add.w	r6, r4, #25
 800f3a8:	e7f5      	b.n	800f396 <_printf_i+0x22e>
 800f3aa:	bf00      	nop
 800f3ac:	080c4905 	.word	0x080c4905
 800f3b0:	080c4916 	.word	0x080c4916

0800f3b4 <_putc_r>:
 800f3b4:	b570      	push	{r4, r5, r6, lr}
 800f3b6:	460d      	mov	r5, r1
 800f3b8:	4614      	mov	r4, r2
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	b118      	cbz	r0, 800f3c6 <_putc_r+0x12>
 800f3be:	6983      	ldr	r3, [r0, #24]
 800f3c0:	b90b      	cbnz	r3, 800f3c6 <_putc_r+0x12>
 800f3c2:	f7ff fbf9 	bl	800ebb8 <__sinit>
 800f3c6:	4b1c      	ldr	r3, [pc, #112]	; (800f438 <_putc_r+0x84>)
 800f3c8:	429c      	cmp	r4, r3
 800f3ca:	d124      	bne.n	800f416 <_putc_r+0x62>
 800f3cc:	6874      	ldr	r4, [r6, #4]
 800f3ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3d0:	07d8      	lsls	r0, r3, #31
 800f3d2:	d405      	bmi.n	800f3e0 <_putc_r+0x2c>
 800f3d4:	89a3      	ldrh	r3, [r4, #12]
 800f3d6:	0599      	lsls	r1, r3, #22
 800f3d8:	d402      	bmi.n	800f3e0 <_putc_r+0x2c>
 800f3da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3dc:	f7ff fc8a 	bl	800ecf4 <__retarget_lock_acquire_recursive>
 800f3e0:	68a3      	ldr	r3, [r4, #8]
 800f3e2:	3b01      	subs	r3, #1
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	60a3      	str	r3, [r4, #8]
 800f3e8:	da05      	bge.n	800f3f6 <_putc_r+0x42>
 800f3ea:	69a2      	ldr	r2, [r4, #24]
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	db1c      	blt.n	800f42a <_putc_r+0x76>
 800f3f0:	b2eb      	uxtb	r3, r5
 800f3f2:	2b0a      	cmp	r3, #10
 800f3f4:	d019      	beq.n	800f42a <_putc_r+0x76>
 800f3f6:	6823      	ldr	r3, [r4, #0]
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	6022      	str	r2, [r4, #0]
 800f3fc:	701d      	strb	r5, [r3, #0]
 800f3fe:	b2ed      	uxtb	r5, r5
 800f400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f402:	07da      	lsls	r2, r3, #31
 800f404:	d405      	bmi.n	800f412 <_putc_r+0x5e>
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	059b      	lsls	r3, r3, #22
 800f40a:	d402      	bmi.n	800f412 <_putc_r+0x5e>
 800f40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f40e:	f7ff fc72 	bl	800ecf6 <__retarget_lock_release_recursive>
 800f412:	4628      	mov	r0, r5
 800f414:	bd70      	pop	{r4, r5, r6, pc}
 800f416:	4b09      	ldr	r3, [pc, #36]	; (800f43c <_putc_r+0x88>)
 800f418:	429c      	cmp	r4, r3
 800f41a:	d101      	bne.n	800f420 <_putc_r+0x6c>
 800f41c:	68b4      	ldr	r4, [r6, #8]
 800f41e:	e7d6      	b.n	800f3ce <_putc_r+0x1a>
 800f420:	4b07      	ldr	r3, [pc, #28]	; (800f440 <_putc_r+0x8c>)
 800f422:	429c      	cmp	r4, r3
 800f424:	bf08      	it	eq
 800f426:	68f4      	ldreq	r4, [r6, #12]
 800f428:	e7d1      	b.n	800f3ce <_putc_r+0x1a>
 800f42a:	4629      	mov	r1, r5
 800f42c:	4622      	mov	r2, r4
 800f42e:	4630      	mov	r0, r6
 800f430:	f7ff f9e8 	bl	800e804 <__swbuf_r>
 800f434:	4605      	mov	r5, r0
 800f436:	e7e3      	b.n	800f400 <_putc_r+0x4c>
 800f438:	080c48b4 	.word	0x080c48b4
 800f43c:	080c48d4 	.word	0x080c48d4
 800f440:	080c4894 	.word	0x080c4894

0800f444 <__sread>:
 800f444:	b510      	push	{r4, lr}
 800f446:	460c      	mov	r4, r1
 800f448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f44c:	f000 f894 	bl	800f578 <_read_r>
 800f450:	2800      	cmp	r0, #0
 800f452:	bfab      	itete	ge
 800f454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f456:	89a3      	ldrhlt	r3, [r4, #12]
 800f458:	181b      	addge	r3, r3, r0
 800f45a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f45e:	bfac      	ite	ge
 800f460:	6563      	strge	r3, [r4, #84]	; 0x54
 800f462:	81a3      	strhlt	r3, [r4, #12]
 800f464:	bd10      	pop	{r4, pc}

0800f466 <__swrite>:
 800f466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f46a:	461f      	mov	r7, r3
 800f46c:	898b      	ldrh	r3, [r1, #12]
 800f46e:	05db      	lsls	r3, r3, #23
 800f470:	4605      	mov	r5, r0
 800f472:	460c      	mov	r4, r1
 800f474:	4616      	mov	r6, r2
 800f476:	d505      	bpl.n	800f484 <__swrite+0x1e>
 800f478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f47c:	2302      	movs	r3, #2
 800f47e:	2200      	movs	r2, #0
 800f480:	f000 f868 	bl	800f554 <_lseek_r>
 800f484:	89a3      	ldrh	r3, [r4, #12]
 800f486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f48a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f48e:	81a3      	strh	r3, [r4, #12]
 800f490:	4632      	mov	r2, r6
 800f492:	463b      	mov	r3, r7
 800f494:	4628      	mov	r0, r5
 800f496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f49a:	f000 b817 	b.w	800f4cc <_write_r>

0800f49e <__sseek>:
 800f49e:	b510      	push	{r4, lr}
 800f4a0:	460c      	mov	r4, r1
 800f4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a6:	f000 f855 	bl	800f554 <_lseek_r>
 800f4aa:	1c43      	adds	r3, r0, #1
 800f4ac:	89a3      	ldrh	r3, [r4, #12]
 800f4ae:	bf15      	itete	ne
 800f4b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4ba:	81a3      	strheq	r3, [r4, #12]
 800f4bc:	bf18      	it	ne
 800f4be:	81a3      	strhne	r3, [r4, #12]
 800f4c0:	bd10      	pop	{r4, pc}

0800f4c2 <__sclose>:
 800f4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4c6:	f000 b813 	b.w	800f4f0 <_close_r>
	...

0800f4cc <_write_r>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	4d07      	ldr	r5, [pc, #28]	; (800f4ec <_write_r+0x20>)
 800f4d0:	4604      	mov	r4, r0
 800f4d2:	4608      	mov	r0, r1
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	602a      	str	r2, [r5, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	f7f1 fff2 	bl	80014c4 <_write>
 800f4e0:	1c43      	adds	r3, r0, #1
 800f4e2:	d102      	bne.n	800f4ea <_write_r+0x1e>
 800f4e4:	682b      	ldr	r3, [r5, #0]
 800f4e6:	b103      	cbz	r3, 800f4ea <_write_r+0x1e>
 800f4e8:	6023      	str	r3, [r4, #0]
 800f4ea:	bd38      	pop	{r3, r4, r5, pc}
 800f4ec:	200024e4 	.word	0x200024e4

0800f4f0 <_close_r>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	4d06      	ldr	r5, [pc, #24]	; (800f50c <_close_r+0x1c>)
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	4608      	mov	r0, r1
 800f4fa:	602b      	str	r3, [r5, #0]
 800f4fc:	f7f2 fcd9 	bl	8001eb2 <_close>
 800f500:	1c43      	adds	r3, r0, #1
 800f502:	d102      	bne.n	800f50a <_close_r+0x1a>
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	b103      	cbz	r3, 800f50a <_close_r+0x1a>
 800f508:	6023      	str	r3, [r4, #0]
 800f50a:	bd38      	pop	{r3, r4, r5, pc}
 800f50c:	200024e4 	.word	0x200024e4

0800f510 <_fstat_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4d07      	ldr	r5, [pc, #28]	; (800f530 <_fstat_r+0x20>)
 800f514:	2300      	movs	r3, #0
 800f516:	4604      	mov	r4, r0
 800f518:	4608      	mov	r0, r1
 800f51a:	4611      	mov	r1, r2
 800f51c:	602b      	str	r3, [r5, #0]
 800f51e:	f7f2 fcd4 	bl	8001eca <_fstat>
 800f522:	1c43      	adds	r3, r0, #1
 800f524:	d102      	bne.n	800f52c <_fstat_r+0x1c>
 800f526:	682b      	ldr	r3, [r5, #0]
 800f528:	b103      	cbz	r3, 800f52c <_fstat_r+0x1c>
 800f52a:	6023      	str	r3, [r4, #0]
 800f52c:	bd38      	pop	{r3, r4, r5, pc}
 800f52e:	bf00      	nop
 800f530:	200024e4 	.word	0x200024e4

0800f534 <_isatty_r>:
 800f534:	b538      	push	{r3, r4, r5, lr}
 800f536:	4d06      	ldr	r5, [pc, #24]	; (800f550 <_isatty_r+0x1c>)
 800f538:	2300      	movs	r3, #0
 800f53a:	4604      	mov	r4, r0
 800f53c:	4608      	mov	r0, r1
 800f53e:	602b      	str	r3, [r5, #0]
 800f540:	f7f2 fcd3 	bl	8001eea <_isatty>
 800f544:	1c43      	adds	r3, r0, #1
 800f546:	d102      	bne.n	800f54e <_isatty_r+0x1a>
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	b103      	cbz	r3, 800f54e <_isatty_r+0x1a>
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	bd38      	pop	{r3, r4, r5, pc}
 800f550:	200024e4 	.word	0x200024e4

0800f554 <_lseek_r>:
 800f554:	b538      	push	{r3, r4, r5, lr}
 800f556:	4d07      	ldr	r5, [pc, #28]	; (800f574 <_lseek_r+0x20>)
 800f558:	4604      	mov	r4, r0
 800f55a:	4608      	mov	r0, r1
 800f55c:	4611      	mov	r1, r2
 800f55e:	2200      	movs	r2, #0
 800f560:	602a      	str	r2, [r5, #0]
 800f562:	461a      	mov	r2, r3
 800f564:	f7f2 fccc 	bl	8001f00 <_lseek>
 800f568:	1c43      	adds	r3, r0, #1
 800f56a:	d102      	bne.n	800f572 <_lseek_r+0x1e>
 800f56c:	682b      	ldr	r3, [r5, #0]
 800f56e:	b103      	cbz	r3, 800f572 <_lseek_r+0x1e>
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	bd38      	pop	{r3, r4, r5, pc}
 800f574:	200024e4 	.word	0x200024e4

0800f578 <_read_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4d07      	ldr	r5, [pc, #28]	; (800f598 <_read_r+0x20>)
 800f57c:	4604      	mov	r4, r0
 800f57e:	4608      	mov	r0, r1
 800f580:	4611      	mov	r1, r2
 800f582:	2200      	movs	r2, #0
 800f584:	602a      	str	r2, [r5, #0]
 800f586:	461a      	mov	r2, r3
 800f588:	f7f2 fc76 	bl	8001e78 <_read>
 800f58c:	1c43      	adds	r3, r0, #1
 800f58e:	d102      	bne.n	800f596 <_read_r+0x1e>
 800f590:	682b      	ldr	r3, [r5, #0]
 800f592:	b103      	cbz	r3, 800f596 <_read_r+0x1e>
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	bd38      	pop	{r3, r4, r5, pc}
 800f598:	200024e4 	.word	0x200024e4

0800f59c <round>:
 800f59c:	ec51 0b10 	vmov	r0, r1, d0
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800f5a6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800f5aa:	2c13      	cmp	r4, #19
 800f5ac:	ee10 2a10 	vmov	r2, s0
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	dc19      	bgt.n	800f5e8 <round+0x4c>
 800f5b4:	2c00      	cmp	r4, #0
 800f5b6:	da09      	bge.n	800f5cc <round+0x30>
 800f5b8:	3401      	adds	r4, #1
 800f5ba:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f5be:	d103      	bne.n	800f5c8 <round+0x2c>
 800f5c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f5c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	e028      	b.n	800f61e <round+0x82>
 800f5cc:	4d15      	ldr	r5, [pc, #84]	; (800f624 <round+0x88>)
 800f5ce:	4125      	asrs	r5, r4
 800f5d0:	ea01 0605 	and.w	r6, r1, r5
 800f5d4:	4332      	orrs	r2, r6
 800f5d6:	d00e      	beq.n	800f5f6 <round+0x5a>
 800f5d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f5dc:	fa42 f404 	asr.w	r4, r2, r4
 800f5e0:	4423      	add	r3, r4
 800f5e2:	ea23 0305 	bic.w	r3, r3, r5
 800f5e6:	e7ef      	b.n	800f5c8 <round+0x2c>
 800f5e8:	2c33      	cmp	r4, #51	; 0x33
 800f5ea:	dd07      	ble.n	800f5fc <round+0x60>
 800f5ec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f5f0:	d101      	bne.n	800f5f6 <round+0x5a>
 800f5f2:	f7f0 fe63 	bl	80002bc <__adddf3>
 800f5f6:	ec41 0b10 	vmov	d0, r0, r1
 800f5fa:	bd70      	pop	{r4, r5, r6, pc}
 800f5fc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800f600:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f604:	40f5      	lsrs	r5, r6
 800f606:	4228      	tst	r0, r5
 800f608:	d0f5      	beq.n	800f5f6 <round+0x5a>
 800f60a:	2101      	movs	r1, #1
 800f60c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800f610:	fa01 f404 	lsl.w	r4, r1, r4
 800f614:	1912      	adds	r2, r2, r4
 800f616:	bf28      	it	cs
 800f618:	185b      	addcs	r3, r3, r1
 800f61a:	ea22 0105 	bic.w	r1, r2, r5
 800f61e:	4608      	mov	r0, r1
 800f620:	4619      	mov	r1, r3
 800f622:	e7e8      	b.n	800f5f6 <round+0x5a>
 800f624:	000fffff 	.word	0x000fffff

0800f628 <log>:
 800f628:	b538      	push	{r3, r4, r5, lr}
 800f62a:	ed2d 8b02 	vpush	{d8}
 800f62e:	ec55 4b10 	vmov	r4, r5, d0
 800f632:	f000 f841 	bl	800f6b8 <__ieee754_log>
 800f636:	4b1e      	ldr	r3, [pc, #120]	; (800f6b0 <log+0x88>)
 800f638:	eeb0 8a40 	vmov.f32	s16, s0
 800f63c:	eef0 8a60 	vmov.f32	s17, s1
 800f640:	f993 3000 	ldrsb.w	r3, [r3]
 800f644:	3301      	adds	r3, #1
 800f646:	d01a      	beq.n	800f67e <log+0x56>
 800f648:	4622      	mov	r2, r4
 800f64a:	462b      	mov	r3, r5
 800f64c:	4620      	mov	r0, r4
 800f64e:	4629      	mov	r1, r5
 800f650:	f7f1 fa84 	bl	8000b5c <__aeabi_dcmpun>
 800f654:	b998      	cbnz	r0, 800f67e <log+0x56>
 800f656:	2200      	movs	r2, #0
 800f658:	2300      	movs	r3, #0
 800f65a:	4620      	mov	r0, r4
 800f65c:	4629      	mov	r1, r5
 800f65e:	f7f1 fa73 	bl	8000b48 <__aeabi_dcmpgt>
 800f662:	b960      	cbnz	r0, 800f67e <log+0x56>
 800f664:	2200      	movs	r2, #0
 800f666:	2300      	movs	r3, #0
 800f668:	4620      	mov	r0, r4
 800f66a:	4629      	mov	r1, r5
 800f66c:	f7f1 fa44 	bl	8000af8 <__aeabi_dcmpeq>
 800f670:	b160      	cbz	r0, 800f68c <log+0x64>
 800f672:	f7fe ff05 	bl	800e480 <__errno>
 800f676:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800f6a8 <log+0x80>
 800f67a:	2322      	movs	r3, #34	; 0x22
 800f67c:	6003      	str	r3, [r0, #0]
 800f67e:	eeb0 0a48 	vmov.f32	s0, s16
 800f682:	eef0 0a68 	vmov.f32	s1, s17
 800f686:	ecbd 8b02 	vpop	{d8}
 800f68a:	bd38      	pop	{r3, r4, r5, pc}
 800f68c:	f7fe fef8 	bl	800e480 <__errno>
 800f690:	ecbd 8b02 	vpop	{d8}
 800f694:	2321      	movs	r3, #33	; 0x21
 800f696:	6003      	str	r3, [r0, #0]
 800f698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f69c:	4805      	ldr	r0, [pc, #20]	; (800f6b4 <log+0x8c>)
 800f69e:	f000 b9c7 	b.w	800fa30 <nan>
 800f6a2:	bf00      	nop
 800f6a4:	f3af 8000 	nop.w
 800f6a8:	00000000 	.word	0x00000000
 800f6ac:	fff00000 	.word	0xfff00000
 800f6b0:	200000dc 	.word	0x200000dc
 800f6b4:	080c48f9 	.word	0x080c48f9

0800f6b8 <__ieee754_log>:
 800f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6bc:	ec51 0b10 	vmov	r0, r1, d0
 800f6c0:	ed2d 8b04 	vpush	{d8-d9}
 800f6c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f6c8:	b083      	sub	sp, #12
 800f6ca:	460d      	mov	r5, r1
 800f6cc:	da29      	bge.n	800f722 <__ieee754_log+0x6a>
 800f6ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f6d2:	4303      	orrs	r3, r0
 800f6d4:	ee10 2a10 	vmov	r2, s0
 800f6d8:	d10c      	bne.n	800f6f4 <__ieee754_log+0x3c>
 800f6da:	49cf      	ldr	r1, [pc, #828]	; (800fa18 <__ieee754_log+0x360>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	2300      	movs	r3, #0
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	f7f1 f8cb 	bl	800087c <__aeabi_ddiv>
 800f6e6:	ec41 0b10 	vmov	d0, r0, r1
 800f6ea:	b003      	add	sp, #12
 800f6ec:	ecbd 8b04 	vpop	{d8-d9}
 800f6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	da05      	bge.n	800f704 <__ieee754_log+0x4c>
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	f7f0 fddd 	bl	80002b8 <__aeabi_dsub>
 800f6fe:	2200      	movs	r2, #0
 800f700:	2300      	movs	r3, #0
 800f702:	e7ee      	b.n	800f6e2 <__ieee754_log+0x2a>
 800f704:	4bc5      	ldr	r3, [pc, #788]	; (800fa1c <__ieee754_log+0x364>)
 800f706:	2200      	movs	r2, #0
 800f708:	f7f0 ff8e 	bl	8000628 <__aeabi_dmul>
 800f70c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800f710:	460d      	mov	r5, r1
 800f712:	4ac3      	ldr	r2, [pc, #780]	; (800fa20 <__ieee754_log+0x368>)
 800f714:	4295      	cmp	r5, r2
 800f716:	dd06      	ble.n	800f726 <__ieee754_log+0x6e>
 800f718:	4602      	mov	r2, r0
 800f71a:	460b      	mov	r3, r1
 800f71c:	f7f0 fdce 	bl	80002bc <__adddf3>
 800f720:	e7e1      	b.n	800f6e6 <__ieee754_log+0x2e>
 800f722:	2300      	movs	r3, #0
 800f724:	e7f5      	b.n	800f712 <__ieee754_log+0x5a>
 800f726:	152c      	asrs	r4, r5, #20
 800f728:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f72c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f730:	441c      	add	r4, r3
 800f732:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800f736:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800f73a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f73e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800f742:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800f746:	ea42 0105 	orr.w	r1, r2, r5
 800f74a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f74e:	2200      	movs	r2, #0
 800f750:	4bb4      	ldr	r3, [pc, #720]	; (800fa24 <__ieee754_log+0x36c>)
 800f752:	f7f0 fdb1 	bl	80002b8 <__aeabi_dsub>
 800f756:	1cab      	adds	r3, r5, #2
 800f758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	4682      	mov	sl, r0
 800f760:	468b      	mov	fp, r1
 800f762:	f04f 0200 	mov.w	r2, #0
 800f766:	dc53      	bgt.n	800f810 <__ieee754_log+0x158>
 800f768:	2300      	movs	r3, #0
 800f76a:	f7f1 f9c5 	bl	8000af8 <__aeabi_dcmpeq>
 800f76e:	b1d0      	cbz	r0, 800f7a6 <__ieee754_log+0xee>
 800f770:	2c00      	cmp	r4, #0
 800f772:	f000 8122 	beq.w	800f9ba <__ieee754_log+0x302>
 800f776:	4620      	mov	r0, r4
 800f778:	f7f0 feec 	bl	8000554 <__aeabi_i2d>
 800f77c:	a390      	add	r3, pc, #576	; (adr r3, 800f9c0 <__ieee754_log+0x308>)
 800f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f782:	4606      	mov	r6, r0
 800f784:	460f      	mov	r7, r1
 800f786:	f7f0 ff4f 	bl	8000628 <__aeabi_dmul>
 800f78a:	a38f      	add	r3, pc, #572	; (adr r3, 800f9c8 <__ieee754_log+0x310>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	4604      	mov	r4, r0
 800f792:	460d      	mov	r5, r1
 800f794:	4630      	mov	r0, r6
 800f796:	4639      	mov	r1, r7
 800f798:	f7f0 ff46 	bl	8000628 <__aeabi_dmul>
 800f79c:	4602      	mov	r2, r0
 800f79e:	460b      	mov	r3, r1
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	4629      	mov	r1, r5
 800f7a4:	e7ba      	b.n	800f71c <__ieee754_log+0x64>
 800f7a6:	a38a      	add	r3, pc, #552	; (adr r3, 800f9d0 <__ieee754_log+0x318>)
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	4650      	mov	r0, sl
 800f7ae:	4659      	mov	r1, fp
 800f7b0:	f7f0 ff3a 	bl	8000628 <__aeabi_dmul>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	499b      	ldr	r1, [pc, #620]	; (800fa28 <__ieee754_log+0x370>)
 800f7bc:	f7f0 fd7c 	bl	80002b8 <__aeabi_dsub>
 800f7c0:	4652      	mov	r2, sl
 800f7c2:	4606      	mov	r6, r0
 800f7c4:	460f      	mov	r7, r1
 800f7c6:	465b      	mov	r3, fp
 800f7c8:	4650      	mov	r0, sl
 800f7ca:	4659      	mov	r1, fp
 800f7cc:	f7f0 ff2c 	bl	8000628 <__aeabi_dmul>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	f7f0 ff26 	bl	8000628 <__aeabi_dmul>
 800f7dc:	4606      	mov	r6, r0
 800f7de:	460f      	mov	r7, r1
 800f7e0:	b914      	cbnz	r4, 800f7e8 <__ieee754_log+0x130>
 800f7e2:	4632      	mov	r2, r6
 800f7e4:	463b      	mov	r3, r7
 800f7e6:	e0a2      	b.n	800f92e <__ieee754_log+0x276>
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f7f0 feb3 	bl	8000554 <__aeabi_i2d>
 800f7ee:	a374      	add	r3, pc, #464	; (adr r3, 800f9c0 <__ieee754_log+0x308>)
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	4680      	mov	r8, r0
 800f7f6:	4689      	mov	r9, r1
 800f7f8:	f7f0 ff16 	bl	8000628 <__aeabi_dmul>
 800f7fc:	a372      	add	r3, pc, #456	; (adr r3, 800f9c8 <__ieee754_log+0x310>)
 800f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f802:	4604      	mov	r4, r0
 800f804:	460d      	mov	r5, r1
 800f806:	4640      	mov	r0, r8
 800f808:	4649      	mov	r1, r9
 800f80a:	f7f0 ff0d 	bl	8000628 <__aeabi_dmul>
 800f80e:	e0a7      	b.n	800f960 <__ieee754_log+0x2a8>
 800f810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f814:	f7f0 fd52 	bl	80002bc <__adddf3>
 800f818:	4602      	mov	r2, r0
 800f81a:	460b      	mov	r3, r1
 800f81c:	4650      	mov	r0, sl
 800f81e:	4659      	mov	r1, fp
 800f820:	f7f1 f82c 	bl	800087c <__aeabi_ddiv>
 800f824:	ec41 0b18 	vmov	d8, r0, r1
 800f828:	4620      	mov	r0, r4
 800f82a:	f7f0 fe93 	bl	8000554 <__aeabi_i2d>
 800f82e:	ec53 2b18 	vmov	r2, r3, d8
 800f832:	ec41 0b19 	vmov	d9, r0, r1
 800f836:	ec51 0b18 	vmov	r0, r1, d8
 800f83a:	f7f0 fef5 	bl	8000628 <__aeabi_dmul>
 800f83e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800f842:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800f846:	9301      	str	r3, [sp, #4]
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	4680      	mov	r8, r0
 800f84e:	4689      	mov	r9, r1
 800f850:	f7f0 feea 	bl	8000628 <__aeabi_dmul>
 800f854:	a360      	add	r3, pc, #384	; (adr r3, 800f9d8 <__ieee754_log+0x320>)
 800f856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85a:	4606      	mov	r6, r0
 800f85c:	460f      	mov	r7, r1
 800f85e:	f7f0 fee3 	bl	8000628 <__aeabi_dmul>
 800f862:	a35f      	add	r3, pc, #380	; (adr r3, 800f9e0 <__ieee754_log+0x328>)
 800f864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f868:	f7f0 fd28 	bl	80002bc <__adddf3>
 800f86c:	4632      	mov	r2, r6
 800f86e:	463b      	mov	r3, r7
 800f870:	f7f0 feda 	bl	8000628 <__aeabi_dmul>
 800f874:	a35c      	add	r3, pc, #368	; (adr r3, 800f9e8 <__ieee754_log+0x330>)
 800f876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87a:	f7f0 fd1f 	bl	80002bc <__adddf3>
 800f87e:	4632      	mov	r2, r6
 800f880:	463b      	mov	r3, r7
 800f882:	f7f0 fed1 	bl	8000628 <__aeabi_dmul>
 800f886:	a35a      	add	r3, pc, #360	; (adr r3, 800f9f0 <__ieee754_log+0x338>)
 800f888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88c:	f7f0 fd16 	bl	80002bc <__adddf3>
 800f890:	4642      	mov	r2, r8
 800f892:	464b      	mov	r3, r9
 800f894:	f7f0 fec8 	bl	8000628 <__aeabi_dmul>
 800f898:	a357      	add	r3, pc, #348	; (adr r3, 800f9f8 <__ieee754_log+0x340>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	4680      	mov	r8, r0
 800f8a0:	4689      	mov	r9, r1
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	f7f0 febf 	bl	8000628 <__aeabi_dmul>
 800f8aa:	a355      	add	r3, pc, #340	; (adr r3, 800fa00 <__ieee754_log+0x348>)
 800f8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b0:	f7f0 fd04 	bl	80002bc <__adddf3>
 800f8b4:	4632      	mov	r2, r6
 800f8b6:	463b      	mov	r3, r7
 800f8b8:	f7f0 feb6 	bl	8000628 <__aeabi_dmul>
 800f8bc:	a352      	add	r3, pc, #328	; (adr r3, 800fa08 <__ieee754_log+0x350>)
 800f8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c2:	f7f0 fcfb 	bl	80002bc <__adddf3>
 800f8c6:	4632      	mov	r2, r6
 800f8c8:	463b      	mov	r3, r7
 800f8ca:	f7f0 fead 	bl	8000628 <__aeabi_dmul>
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	4649      	mov	r1, r9
 800f8d4:	4640      	mov	r0, r8
 800f8d6:	f7f0 fcf1 	bl	80002bc <__adddf3>
 800f8da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	3551      	adds	r5, #81	; 0x51
 800f8e2:	431d      	orrs	r5, r3
 800f8e4:	2d00      	cmp	r5, #0
 800f8e6:	4680      	mov	r8, r0
 800f8e8:	4689      	mov	r9, r1
 800f8ea:	dd48      	ble.n	800f97e <__ieee754_log+0x2c6>
 800f8ec:	4b4e      	ldr	r3, [pc, #312]	; (800fa28 <__ieee754_log+0x370>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	4650      	mov	r0, sl
 800f8f2:	4659      	mov	r1, fp
 800f8f4:	f7f0 fe98 	bl	8000628 <__aeabi_dmul>
 800f8f8:	4652      	mov	r2, sl
 800f8fa:	465b      	mov	r3, fp
 800f8fc:	f7f0 fe94 	bl	8000628 <__aeabi_dmul>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4606      	mov	r6, r0
 800f906:	460f      	mov	r7, r1
 800f908:	4640      	mov	r0, r8
 800f90a:	4649      	mov	r1, r9
 800f90c:	f7f0 fcd6 	bl	80002bc <__adddf3>
 800f910:	ec53 2b18 	vmov	r2, r3, d8
 800f914:	f7f0 fe88 	bl	8000628 <__aeabi_dmul>
 800f918:	4680      	mov	r8, r0
 800f91a:	4689      	mov	r9, r1
 800f91c:	b964      	cbnz	r4, 800f938 <__ieee754_log+0x280>
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	4630      	mov	r0, r6
 800f924:	4639      	mov	r1, r7
 800f926:	f7f0 fcc7 	bl	80002b8 <__aeabi_dsub>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	4650      	mov	r0, sl
 800f930:	4659      	mov	r1, fp
 800f932:	f7f0 fcc1 	bl	80002b8 <__aeabi_dsub>
 800f936:	e6d6      	b.n	800f6e6 <__ieee754_log+0x2e>
 800f938:	a321      	add	r3, pc, #132	; (adr r3, 800f9c0 <__ieee754_log+0x308>)
 800f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93e:	ec51 0b19 	vmov	r0, r1, d9
 800f942:	f7f0 fe71 	bl	8000628 <__aeabi_dmul>
 800f946:	a320      	add	r3, pc, #128	; (adr r3, 800f9c8 <__ieee754_log+0x310>)
 800f948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f94c:	4604      	mov	r4, r0
 800f94e:	460d      	mov	r5, r1
 800f950:	ec51 0b19 	vmov	r0, r1, d9
 800f954:	f7f0 fe68 	bl	8000628 <__aeabi_dmul>
 800f958:	4642      	mov	r2, r8
 800f95a:	464b      	mov	r3, r9
 800f95c:	f7f0 fcae 	bl	80002bc <__adddf3>
 800f960:	4602      	mov	r2, r0
 800f962:	460b      	mov	r3, r1
 800f964:	4630      	mov	r0, r6
 800f966:	4639      	mov	r1, r7
 800f968:	f7f0 fca6 	bl	80002b8 <__aeabi_dsub>
 800f96c:	4652      	mov	r2, sl
 800f96e:	465b      	mov	r3, fp
 800f970:	f7f0 fca2 	bl	80002b8 <__aeabi_dsub>
 800f974:	4602      	mov	r2, r0
 800f976:	460b      	mov	r3, r1
 800f978:	4620      	mov	r0, r4
 800f97a:	4629      	mov	r1, r5
 800f97c:	e7d9      	b.n	800f932 <__ieee754_log+0x27a>
 800f97e:	4602      	mov	r2, r0
 800f980:	460b      	mov	r3, r1
 800f982:	4650      	mov	r0, sl
 800f984:	4659      	mov	r1, fp
 800f986:	f7f0 fc97 	bl	80002b8 <__aeabi_dsub>
 800f98a:	ec53 2b18 	vmov	r2, r3, d8
 800f98e:	f7f0 fe4b 	bl	8000628 <__aeabi_dmul>
 800f992:	4606      	mov	r6, r0
 800f994:	460f      	mov	r7, r1
 800f996:	2c00      	cmp	r4, #0
 800f998:	f43f af23 	beq.w	800f7e2 <__ieee754_log+0x12a>
 800f99c:	a308      	add	r3, pc, #32	; (adr r3, 800f9c0 <__ieee754_log+0x308>)
 800f99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a2:	ec51 0b19 	vmov	r0, r1, d9
 800f9a6:	f7f0 fe3f 	bl	8000628 <__aeabi_dmul>
 800f9aa:	a307      	add	r3, pc, #28	; (adr r3, 800f9c8 <__ieee754_log+0x310>)
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	460d      	mov	r5, r1
 800f9b4:	ec51 0b19 	vmov	r0, r1, d9
 800f9b8:	e727      	b.n	800f80a <__ieee754_log+0x152>
 800f9ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800fa10 <__ieee754_log+0x358>
 800f9be:	e694      	b.n	800f6ea <__ieee754_log+0x32>
 800f9c0:	fee00000 	.word	0xfee00000
 800f9c4:	3fe62e42 	.word	0x3fe62e42
 800f9c8:	35793c76 	.word	0x35793c76
 800f9cc:	3dea39ef 	.word	0x3dea39ef
 800f9d0:	55555555 	.word	0x55555555
 800f9d4:	3fd55555 	.word	0x3fd55555
 800f9d8:	df3e5244 	.word	0xdf3e5244
 800f9dc:	3fc2f112 	.word	0x3fc2f112
 800f9e0:	96cb03de 	.word	0x96cb03de
 800f9e4:	3fc74664 	.word	0x3fc74664
 800f9e8:	94229359 	.word	0x94229359
 800f9ec:	3fd24924 	.word	0x3fd24924
 800f9f0:	55555593 	.word	0x55555593
 800f9f4:	3fe55555 	.word	0x3fe55555
 800f9f8:	d078c69f 	.word	0xd078c69f
 800f9fc:	3fc39a09 	.word	0x3fc39a09
 800fa00:	1d8e78af 	.word	0x1d8e78af
 800fa04:	3fcc71c5 	.word	0x3fcc71c5
 800fa08:	9997fa04 	.word	0x9997fa04
 800fa0c:	3fd99999 	.word	0x3fd99999
	...
 800fa18:	c3500000 	.word	0xc3500000
 800fa1c:	43500000 	.word	0x43500000
 800fa20:	7fefffff 	.word	0x7fefffff
 800fa24:	3ff00000 	.word	0x3ff00000
 800fa28:	3fe00000 	.word	0x3fe00000
 800fa2c:	00000000 	.word	0x00000000

0800fa30 <nan>:
 800fa30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fa38 <nan+0x8>
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	00000000 	.word	0x00000000
 800fa3c:	7ff80000 	.word	0x7ff80000

0800fa40 <_init>:
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	bf00      	nop
 800fa44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa46:	bc08      	pop	{r3}
 800fa48:	469e      	mov	lr, r3
 800fa4a:	4770      	bx	lr

0800fa4c <_fini>:
 800fa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4e:	bf00      	nop
 800fa50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa52:	bc08      	pop	{r3}
 800fa54:	469e      	mov	lr, r3
 800fa56:	4770      	bx	lr
